<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Pandaos&#39;s blog</title>
  
  
  <link href="https://panda0s.top/atom.xml" rel="self"/>
  
  <link href="https://panda0s.top/"/>
  <updated>2021-05-16T08:40:55.124Z</updated>
  <id>https://panda0s.top/</id>
  
  <author>
    <name>Pandaos</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CISCN gift</title>
    <link href="https://panda0s.top/2021/05/16/CISCN-gift/"/>
    <id>https://panda0s.top/2021/05/16/CISCN-gift/</id>
    <published>2021-05-16T07:41:17.000Z</published>
    <updated>2021-05-16T08:40:55.124Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CISCN-gift"><a href="#CISCN-gift" class="headerlink" title="CISCN gift"></a>CISCN gift</h1><p>题目下载: <a href="/2021/05/16/CISCN-gift/CISCN_gift.exe" title="CISCN_gift.exe">CISCN_gift.exe</a></p><p>golang 写的程序，要优化一个内置算法</p><p>程序逻辑如下（不是解题脚本）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python">tab1 = [<span class="hljs-number">0x0000000000000001</span>, <span class="hljs-number">0x0000000000000003</span>, <span class="hljs-number">0x0000000000000006</span>, <span class="hljs-number">0x0000000000000009</span>, <span class="hljs-number">0x000000000000000A</span>, <span class="hljs-number">0x000000000000000B</span>, <span class="hljs-number">0x000000000000000C</span>, <span class="hljs-number">0x000000000000000D</span>, <span class="hljs-number">0x000000000000000E</span>, <span class="hljs-number">0x000000000000000F</span>, <span class="hljs-number">0x0000000000000010</span>, <span class="hljs-number">0x0000000000000011</span>, <span class="hljs-number">0x0000000000000012</span>, <span class="hljs-number">0x0000000000000014</span>, <span class="hljs-number">0x0000000000000019</span>, <span class="hljs-number">0x000000000000001E</span>, <span class="hljs-number">0x0000000000000028</span>, <span class="hljs-number">0x0000000000000042</span>, <span class="hljs-number">0x0000000000000066</span>, <span class="hljs-number">0x00000000000000A0</span>, <span class="hljs-number">0x0000000000000936</span>, <span class="hljs-number">0x0000000000003D21</span>, <span class="hljs-number">0x00000000000149A7</span>, <span class="hljs-number">0x00000000000243AC</span>, <span class="hljs-number">0x00000000000CB5BE</span>, <span class="hljs-number">0x000000000047DC61</span>, <span class="hljs-number">0x00000000016C0F46</span>, <span class="hljs-number">0x000000000262C432</span>, <span class="hljs-number">0x0000000004ACE299</span>, <span class="hljs-number">0x0000000010FBC92A</span>, <span class="hljs-number">0x00000000329ECDFD</span>, <span class="hljs-number">0x00000000370D7470</span>]<br>idx = <span class="hljs-number">0</span><br>idddd = <span class="hljs-number">0</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main_goooo</span>(<span class="hljs-params">data</span>):</span><br>    v4 = [<span class="hljs-number">0</span>] * <span class="hljs-number">5</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(data)):<br>        v3 = data[i]<br>        v4[v3] ^= <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> v4[<span class="hljs-number">1</span>] == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> v4[<span class="hljs-number">3</span>] == <span class="hljs-number">0</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main_wtf</span>(<span class="hljs-params">pos, index, data, size1, size2</span>):</span><br>    <span class="hljs-keyword">global</span> idx<br>    <span class="hljs-keyword">global</span> idddd<br>    data[pos] = index<br>    print(data)<br>    <span class="hljs-keyword">if</span> pos == size1 - <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">if</span> main_goooo(data):<br>            idddd = idddd + <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>):<br>            main_wtf(pos + <span class="hljs-number">1</span>, i, data, size1, size2)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">TestN</span>(<span class="hljs-params">n</span>):</span><br>    <span class="hljs-keyword">global</span> idddd<br>    idddd = <span class="hljs-number">0</span><br>    aa = [<span class="hljs-number">0</span>] * n<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>):<br>        main_wtf(<span class="hljs-number">0</span>, i, aa, n, n)<br>    <span class="hljs-keyword">return</span> idddd<br><br>flag_i = [TestN(i) % <span class="hljs-number">17</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tab1]<br></code></pre></td></tr></table></figure><p>这个算法很慢，基本不可能跑出来。</p><p>TestN(1), TestN(2), TestN(3) … 跑一些比较小的额数据观察一下，很容易发现规律，用规律求解 flag 序列</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">flag_i = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(tab1)):<br>    t = tab1[i]<br>    s1 = <span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>,t-<span class="hljs-number">1</span>,<span class="hljs-number">17</span>)<br>    s2 = <span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>,t-<span class="hljs-number">1</span>,<span class="hljs-number">17</span>)+<span class="hljs-number">1</span><br>    tmp = (s1*s2)%<span class="hljs-number">17</span><br>    out.append(tmp)<br>print(flag_i)<br><br>=&gt; [2, 3, 2, 2, 6, 3, 4, 0, 2, 12, 5, 2, 6, 4, 2, 2, 5, 6, 2, 5, 2, 2, 12, 4, 2, 2, 2, 6, 2, 6, 0, 5]<br></code></pre></td></tr></table></figure><p>得到序列后直接映射到 flag 字符即可</p><p>CISCN{4b445b3247c45344c54c44734445452c}</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CISCN-gift&quot;&gt;&lt;a href=&quot;#CISCN-gift&quot; class=&quot;headerlink&quot; title=&quot;CISCN gift&quot;&gt;&lt;/a&gt;CISCN gift&lt;/h1&gt;&lt;p&gt;题目下载: &lt;a href=&quot;/2021/05/16/CISCN-gift/</summary>
      
    
    
    
    <category term="CTF" scheme="https://panda0s.top/categories/CTF/"/>
    
    
    <category term="Revserse" scheme="https://panda0s.top/tags/Revserse/"/>
    
    <category term="golang" scheme="https://panda0s.top/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>CISCN Little_evil</title>
    <link href="https://panda0s.top/2021/05/16/CISCN-Little-evil/"/>
    <id>https://panda0s.top/2021/05/16/CISCN-Little-evil/</id>
    <published>2021-05-16T06:41:44.000Z</published>
    <updated>2021-05-16T13:56:26.360Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CISCN-little-evil"><a href="#CISCN-little-evil" class="headerlink" title="CISCN little_evil"></a>CISCN little_evil</h1><p>比赛的时候差一点点出，非常可惜</p><p>第一次做 ruby 的逆向题，学到很多东西。这道题总体来说，要进行两种不同策略的反混淆，最后还有一层是类似于 brainfuck 的 vm，需要写 <code>decompiler</code></p><p>题目: <a href="/2021/05/16/CISCN-Little-evil/little_evil" title="littile_evil">littile_evil</a></p><h2 id="提取-out-rb"><a href="#提取-out-rb" class="headerlink" title="提取 out.rb"></a>提取 out.rb</h2><p>题目的 elf 文件是典型的 ruby 解释器。问题是源码在哪里？ 最开始，我以为是内存加载，分析源码过程中发现是用 Ruby packer 打包的 ruby 程序。Ruby packer 会把源程序相关的打包成 squashfs 文件系统并塞进 ruby 解释器。ruby packer 用了一个内存虚拟文件系统 <code>__enclose_io_memfs__</code></p><p>squashfs 用 binwalk 就可以直接提取</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">binwalk -Me little_evil<br></code></pre></td></tr></table></figure><p>提取出主程序（节选）</p><p><strong>enclose_io_memfs</strong>/local/out.rb</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-variable">$l1Il</span>=<span class="hljs-string">&quot;&quot;</span>;<span class="hljs-variable">$l1lI</span>=<span class="hljs-string">&quot;&quot;</span>;<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">llIl</span><span class="hljs-params">()</span></span><span class="hljs-variable">$lI1lll</span> = <span class="hljs-variable">$lI1lll</span><span class="hljs-params">|7;<span class="hljs-keyword">end</span>;def l1lll()$lI1lll=10;<span class="hljs-keyword">end</span>;def llI1l()$lI1lll=$lI1lll|</span><span class="hljs-number">4</span>;<span class="hljs-keyword">end</span>;<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">lIlI</span><span class="hljs-params">()</span></span><span class="hljs-variable">$lI1lll</span>=<span class="hljs-variable">$lI1lll</span>+<span class="hljs-number">3</span>;<br><span class="hljs-keyword">end</span>;<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">l111</span><span class="hljs-params">()</span></span><span class="hljs-variable">$lI1lll</span>=<span class="hljs-variable">$lI1lll</span>%<span class="hljs-number">3</span>;<span class="hljs-keyword">end</span>;<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">lI1IlI</span><span class="hljs-params">()</span></span><span class="hljs-variable">$lI1lll</span>=<span class="hljs-variable">$lI1lll</span><span class="hljs-params">|3;<span class="hljs-keyword">end</span>;def ll1l1()$lI1lll=$lI1lll*8;<span class="hljs-keyword">end</span>;def l1lI()$lI1lll=$lI1lll-3;<span class="hljs-keyword">end</span>;def lI1lII()$lI1lll=$lI1lll%1;<span class="hljs-keyword">end</span>;def lIlIl()$lI1lll=$lI1lll&amp;10;<span class="hljs-keyword">end</span>;def lIll()$lI1lll=$lI1lll-4;<span class="hljs-keyword">end</span>;def lII1()$lI1lll=$lI1lll%2;<span class="hljs-keyword">end</span>;def l1III()$lI1lll=$lI1lll|</span><span class="hljs-number">1</span>;<span class="hljs-keyword">end</span>;<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">l1l111</span><span class="hljs-params">()</span></span><span class="hljs-variable">$lI1lll</span>=<span class="hljs-variable">$lI1lll</span><span class="hljs-params">|5;<span class="hljs-keyword">end</span>;def l1IIII()$lI1lll=$lI1lll%10;<span class="hljs-keyword">end</span>;def l11I()$l1Il=$l1Il+$lI1lll.chr;<span class="hljs-keyword">end</span>;def lIlll()$lI1lll=$lI1lll*9;<span class="hljs-keyword">end</span>;def l11IlI()$lI1lll=$lI1lll-8;<span class="hljs-keyword">end</span>;def lI1I1()$lI1lll=$lI1lll+5;<span class="hljs-keyword">end</span>;def ll11lI()$lI1lll=$lI1lll&amp;9;<span class="hljs-keyword">end</span>;def lII1l1()send($l1Il[0,4], $l1Il[4,$l1Il.length]);<span class="hljs-keyword">end</span>;l1lll;lIlI;ll1l1;l1lI;l11I;l1lll;llI1l;lIlll;l11IlI;l11I;l1lll;lIlll;llI1l;lIlI;l11I;l1lll;llIl;l1lI;lIlll;l11I;l1lll;llI1l;l1IIII;lIlll;l11I;l1lll;llIl;l1lI;lIlll;l11I;l1lll;llIl;l1lI;lIlll;l11I;l1lll;llIl;l1lI;lIlll;l11I;l1lll;llIl;l1lI;lIlll;l11I;l1lll;l1lI;ll1l1;l1l111;l11I;l1lll;llI1l;lI1I1;lI1I1;llIl;lIlI;l11I;l1lll;llI1l;lI1I1;lI1I1;llIl;lIlI;l11I;l1lll;l1lI;ll1l1;lIlI;l11I;l1lll;llI1l;l1IIII;lIlll;l11I;l1lll;llIl;l1lI;lIlll;l11I;l1lll;llIl;l1lI;lIlll;l11I;l1lll;ll1l1;l1lI;lIll;l11I;l1lll;ll1l1;l1lI;lIll;l11I;l1lll;l1lI;ll1l1;l1l111;l11I;l1lll;llI1l;lI1I1;</span><br><span class="hljs-params">......[节选]</span><br></code></pre></td></tr></table></figure><h2 id="第一层-ruby-程序"><a href="#第一层-ruby-程序" class="headerlink" title="第一层 ruby 程序"></a>第一层 ruby 程序</h2><p>提取出来的 rb 程序高度混淆，难以阅读，尝试过各种在线美化工具，均无效果，于是尝试手搓反混淆。</p><p>思路:</p><ul><li>分号 ; 替换成 ;\n</li><li>解析函数名，替换所有函数名为 funcX，x是序号</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python">data = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;out.rb&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>).read()<br>data = data.replace(<span class="hljs-string">&quot;;&quot;</span>, <span class="hljs-string">&quot;;\n&quot;</span>)<br>data = data.replace(<span class="hljs-string">&quot;()&quot;</span>, <span class="hljs-string">&quot;()\n\t&quot;</span>)<br>data = data.replace(<span class="hljs-string">&quot;end;&quot;</span>, <span class="hljs-string">&quot;end;\n&quot;</span>)<br><br><br>names = &#123;&#125;<br>iidx = <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> data.splitlines():<br>    <span class="hljs-keyword">if</span> line.startswith(<span class="hljs-string">&quot;def&quot;</span>):<br>        idx = line.find(<span class="hljs-string">&quot;(&quot;</span>)<br>        funcName = line[<span class="hljs-number">4</span>:idx]<br>        names[funcName] = <span class="hljs-string">&quot;func&quot;</span> + <span class="hljs-built_in">str</span>(iidx)<br>        iidx += <span class="hljs-number">1</span><br><br><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> names:<br>    data = data.replace(k + <span class="hljs-string">&quot;()&quot;</span>, names[k] + <span class="hljs-string">&quot;()&quot;</span>, -<span class="hljs-number">1</span>)<br>    data = data.replace(k + <span class="hljs-string">&quot;;&quot;</span>, names[k] + <span class="hljs-string">&quot;;&quot;</span>, -<span class="hljs-number">1</span>)<br><br><span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;out2.rb&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>).write(data)<br></code></pre></td></tr></table></figure><p>简单处理后效果</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-variable">$l1Il</span>=<span class="hljs-string">&quot;&quot;</span>;<br><br><span class="hljs-variable">$l1lI</span>=<span class="hljs-string">&quot;&quot;</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func1</span><span class="hljs-params">()</span></span><br><span class="hljs-variable">$lI1lll</span> = <span class="hljs-variable">$lI1lll</span><span class="hljs-params">|7;</span><br><span class="hljs-params"><span class="hljs-keyword">end</span>;</span><br><span class="hljs-params"></span><br><span class="hljs-params">def func2()</span><br><span class="hljs-params">$lI1lll=10;</span><br><span class="hljs-params"><span class="hljs-keyword">end</span>;</span><br><span class="hljs-params"></span><br><span class="hljs-params">def func3()</span><br><span class="hljs-params">$lI1lll=$lI1lll|</span><span class="hljs-number">4</span>;<br><span class="hljs-keyword">end</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func4</span><span class="hljs-params">()</span></span><br><span class="hljs-variable">$lI1lll</span>=<span class="hljs-variable">$lI1lll</span>+<span class="hljs-number">3</span>;<br><br><span class="hljs-keyword">end</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func5</span><span class="hljs-params">()</span></span><br><span class="hljs-variable">$lI1lll</span>=<span class="hljs-variable">$lI1lll</span>%<span class="hljs-number">3</span>;<br><span class="hljs-keyword">end</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func6</span><span class="hljs-params">()</span></span><br><span class="hljs-variable">$lI1lll</span>=<span class="hljs-variable">$lI1lll</span><span class="hljs-params">|3;</span><br><span class="hljs-params"><span class="hljs-keyword">end</span>;</span><br><span class="hljs-params"></span><br><span class="hljs-params">def func7()</span><br><span class="hljs-params">$lI1lll=$lI1lll*8;</span><br><span class="hljs-params"><span class="hljs-keyword">end</span>;</span><br><span class="hljs-params"></span><br><span class="hljs-params">def func8()</span><br><span class="hljs-params">$lI1lll=$lI1lll-3;</span><br><span class="hljs-params"><span class="hljs-keyword">end</span>;</span><br><span class="hljs-params"></span><br><span class="hljs-params">def func9()</span><br><span class="hljs-params">$lI1lll=$lI1lll%1;</span><br><span class="hljs-params"><span class="hljs-keyword">end</span>;</span><br><span class="hljs-params"></span><br><span class="hljs-params">def func10()</span><br><span class="hljs-params">$lI1lll=$lI1lll&amp;10;</span><br><span class="hljs-params"><span class="hljs-keyword">end</span>;</span><br><span class="hljs-params"></span><br><span class="hljs-params">def func11()</span><br><span class="hljs-params">$lI1lll=$lI1lll-4;</span><br><span class="hljs-params"><span class="hljs-keyword">end</span>;</span><br><span class="hljs-params"></span><br><span class="hljs-params">def func12()</span><br><span class="hljs-params">$lI1lll=$lI1lll%2;</span><br><span class="hljs-params"><span class="hljs-keyword">end</span>;</span><br><span class="hljs-params"></span><br><span class="hljs-params">def func13()</span><br><span class="hljs-params">$lI1lll=$lI1lll|</span><span class="hljs-number">1</span>;<br><span class="hljs-keyword">end</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">l1func5</span><span class="hljs-params">()</span></span><br><span class="hljs-variable">$lI1lll</span>=<span class="hljs-variable">$lI1lll</span><span class="hljs-params">|5;</span><br><span class="hljs-params"><span class="hljs-keyword">end</span>;</span><br><span class="hljs-params"></span><br><span class="hljs-params">def func15()</span><br><span class="hljs-params">$lI1lll=$lI1lll%10;</span><br><span class="hljs-params"><span class="hljs-keyword">end</span>;</span><br><span class="hljs-params"></span><br><span class="hljs-params">def func16()</span><br><span class="hljs-params">$l1Il=$l1Il+$lI1lll.chr;</span><br><span class="hljs-params"><span class="hljs-keyword">end</span>;</span><br><span class="hljs-params"></span><br><span class="hljs-params">def func17()</span><br><span class="hljs-params">$lI1lll=$lI1lll*9;</span><br><span class="hljs-params"><span class="hljs-keyword">end</span>;</span><br><span class="hljs-params"></span><br><span class="hljs-params">def func18()</span><br><span class="hljs-params">$lI1lll=$lI1lll-8;</span><br><span class="hljs-params"><span class="hljs-keyword">end</span>;</span><br><span class="hljs-params"></span><br><span class="hljs-params">def func19()</span><br><span class="hljs-params">$lI1lll=$lI1lll+5;</span><br><span class="hljs-params"><span class="hljs-keyword">end</span>;</span><br><span class="hljs-params"></span><br><span class="hljs-params">def func20()</span><br><span class="hljs-params">$lI1lll=$lI1lll&amp;9;</span><br><span class="hljs-params"><span class="hljs-keyword">end</span>;</span><br><span class="hljs-params"></span><br><span class="hljs-params">def func21()</span><br><span class="hljs-params">send($l1Il[0,4], $l1Il[4,$l1Il.length]);</span><br><span class="hljs-params"><span class="hljs-keyword">end</span>;</span><br><span class="hljs-params"></span><br><span class="hljs-params">func2;</span><br></code></pre></td></tr></table></figure><p><code>func21()</code> 中有一个 <code>send</code>，ruby 中的 send 貌似可以执行代码，修改代码，在 func21 调用时输出 <code>$l1Il[4,$l1Il.length]</code></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">def</span> func<span class="hljs-number">21</span>()<br><span class="hljs-attribute">print</span> $l<span class="hljs-number">1</span>Il[<span class="hljs-number">4</span>,$l<span class="hljs-number">1</span>Il.length]<br><span class="hljs-attribute">send</span>($l<span class="hljs-number">1</span>Il[<span class="hljs-number">0</span>,<span class="hljs-number">4</span>], $l<span class="hljs-number">1</span>Il[<span class="hljs-number">4</span>,$l<span class="hljs-number">1</span>Il.length]);<br><span class="hljs-attribute">end</span>;<br></code></pre></td></tr></table></figure><p>输出得到另外一个 ruby 程序。总结一下，第一层 ruby 程序计算出第二层 ruby 程序的字符串并调用第二层 ruby 程序。</p><h2 id="第二层-ruby-程序"><a href="#第二层-ruby-程序" class="headerlink" title="第二层 ruby 程序"></a>第二层 ruby 程序</h2><p>第二层 ruby 程序混淆规则也类似第一层的 ruby 程序。</p><p>节选第二层 ruby 程序</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$llll</span>=<span class="hljs-string">&quot;&quot;</span>;<span class="hljs-variable">$llII</span>=<span class="hljs-string">&quot;&quot;</span>;<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">l1llI</span></span>()<span class="hljs-variable">$l1lI1l</span>=<span class="hljs-variable">$l1lI1l</span>|<span class="hljs-number">7</span>;<span class="hljs-keyword">end</span>;<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">ll1III</span></span>()<span class="hljs-variable">$l1lI1l</span>=<span class="hljs-variable">$l1lI1l</span>%<span class="hljs-number">7</span>;<span class="hljs-keyword">end</span>;<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">lllI</span></span>()<span class="hljs-variable">$l1lI1l</span>=<span class="hljs-variable">$l1lI1l</span>/<span class="hljs-number">4</span>;<span class="hljs-keyword">end</span>;<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">lIl1l</span></span>()<span class="hljs-variable">$l1lI1l</span>=<span class="hljs-variable">$l1lI1l</span><span class="hljs-number">-3</span>;<span class="hljs-keyword">end</span>;<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">l1lll</span></span>()<span class="hljs-variable">$l1lI1l</span>=<span class="hljs-variable">$l1lI1l</span>|<span class="hljs-number">10</span>;<span class="hljs-keyword">end</span>;<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">l11I1I</span></span>()<span class="hljs-variable">$l1lI1l</span>=<span class="hljs-number">10</span>;<span class="hljs-keyword">end</span>;<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">l1l1</span></span>()<span class="hljs-variable">$l1lI1l</span>=<span class="hljs-variable">$l1lI1l</span>&amp;<span class="hljs-number">7</span>;<span class="hljs-keyword">end</span>;<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">l1II</span></span>()<span class="hljs-variable">$l1lI1l</span>=<span class="hljs-variable">$l1lI1l</span>%<span class="hljs-number">8</span>;<span class="hljs-keyword">end</span>;<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">ll1I</span></span>()<span class="hljs-variable">$l1lI1l</span>=<span class="hljs-variable">$l1lI1l</span>|<span class="hljs-number">8</span>;<span class="hljs-keyword">end</span>;<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">ll11</span></span>()<span class="hljs-variable">$l1lI1l</span>=<span class="hljs-variable">$l1lI1l</span>^<span class="hljs-number">6</span>;<span class="hljs-keyword">end</span>;<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">ll1l1I</span></span>()<span class="hljs-variable">$l1lI1l</span>=<span class="hljs-variable">$l1lI1l</span>|<span class="hljs-number">1</span>;<span class="hljs-keyword">end</span>;<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">lI1Il</span></span>()<span class="hljs-variable">$l1lI1l</span>=<span class="hljs-variable">$l1lI1l</span>|<span class="hljs-number">3</span>;<span class="hljs-keyword">end</span>;<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">llI1I</span></span>()<span class="hljs-variable">$l1lI1l</span>=<span class="hljs-variable">$l1lI1l</span>+<span class="hljs-number">6</span>;<span class="hljs-keyword">end</span>;<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">llIl1</span></span>()<span class="hljs-variable">$l1lI1l</span>=<span class="hljs-variable">$l1lI1l</span>*<span class="hljs-number">4</span>;<span class="hljs-keyword">end</span>;<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">lI1ll</span></span>()<span class="hljs-variable">$l1lI1l</span>=<span class="hljs-variable">$l1lI1l</span>*<span class="hljs-number">5</span>;<span class="hljs-keyword">end</span>;<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">l1111</span></span>()<span class="hljs-variable">$l1lI1l</span>=<span class="hljs-variable">$l1lI1l</span>^<span class="hljs-number">7</span>;<span class="hljs-keyword">end</span>;<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">l1lII</span></span>()<span class="hljs-variable">$l1lI1l</span>=<span class="hljs-variable">$l1lI1l</span>^<span class="hljs-number">4</span>;<span class="hljs-keyword">end</span>;<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">lIIl</span></span>()<span class="hljs-variable">$l1lI1l</span>=<span class="hljs-variable">$l1lI1l</span>%<span class="hljs-number">5</span>;<span class="hljs-keyword">end</span>;<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">lII11</span></span>()<span class="hljs-variable">$l1lI1l</span>=<span class="hljs-variable">$l1lI1l</span>+<span class="hljs-number">9</span>;<span class="hljs-keyword">end</span>;<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">lI11I</span></span>()<span class="hljs-variable">$llll</span>=<span class="hljs-variable">$llll</span>+<span class="hljs-variable">$l1lI1l</span>.chr;<span class="hljs-keyword">end</span>;<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">l1IlI</span></span>()send(<span class="hljs-variable">$llll</span>[0,<span class="hljs-number">4</span>], <span class="hljs-variable">$llll</span>[<span class="hljs-number">4</span>,<span class="hljs-variable">$llll</span>.length]);<span class="hljs-keyword">end</span>;l11I1I;lII11;lI1ll;llI1I;lI11I;l11I1I;l1llI;lII11;lI1ll;l1llI;lIl1l;lIl1l;lIl1l;lI11I;l11I1I;ll1l1I;lII11;lI1ll;lIl1l;lI11I;l11I1I;lII11;l1lll;llIl1;lI11I;l11I1I;lII11;lI1ll;llI1I;lIl1l;lI11I;l11I1I;lII11;lI1ll;llI1I;lI11I;l11I1I;l1llI;lII11;llIl1;l1llI;lI11I;l11I1I;l1llI;llI1I;lI1ll;lI11I;l11I1I;llI1I;ll11;lI1ll;lI11I;l11I1I;l1llI;l1111;llIl1;lI11I;l11I1I;l1llI;ll11;llIl1;lI11I;l11I1I;lII11;lI1ll;lI11I;l11I1I;l1llI;llIl1;ll1l1I;lI11I;l11I1I;l1llI;ll11;llIl1;lI11I;l11I1I;l1llI;ll11;llIl1;lI11I;l11I1I;lI1ll;lIl1l;lI11I;l11I1I;l1llI;ll11;llIl1;lI11I;l11I1I;l1llI;ll1<br>......【节选】<br></code></pre></td></tr></table></figure><p>继续用第一层处理方法处理第二层代码，得到如下代码：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-variable">$llll</span>=<span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-variable">$llII</span>=<span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func1</span><span class="hljs-params">()</span></span><br><span class="hljs-variable">$l1lI1l</span>=<span class="hljs-variable">$l1lI1l</span><span class="hljs-params">|7;</span><br><span class="hljs-params"><span class="hljs-keyword">end</span>;</span><br><span class="hljs-params"></span><br><span class="hljs-params">def func2()</span><br><span class="hljs-params">$l1lI1l=$l1lI1l%7;</span><br><span class="hljs-params"><span class="hljs-keyword">end</span>;</span><br><span class="hljs-params"></span><br><span class="hljs-params">def func3()</span><br><span class="hljs-params">$l1lI1l=$l1lI1l/4;</span><br><span class="hljs-params"><span class="hljs-keyword">end</span>;</span><br><span class="hljs-params"></span><br><span class="hljs-params">def func4()</span><br><span class="hljs-params">$l1lI1l=$l1lI1l-3;</span><br><span class="hljs-params"><span class="hljs-keyword">end</span>;</span><br><span class="hljs-params"></span><br><span class="hljs-params">def func5()</span><br><span class="hljs-params">$l1lI1l=$l1lI1l|</span><span class="hljs-number">10</span>;<br><span class="hljs-keyword">end</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func6</span><span class="hljs-params">()</span></span><br><span class="hljs-variable">$l1lI1l</span>=<span class="hljs-number">10</span>;<br><span class="hljs-keyword">end</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func7</span><span class="hljs-params">()</span></span><br><span class="hljs-variable">$l1lI1l</span>=<span class="hljs-variable">$l1lI1l</span>&amp;<span class="hljs-number">7</span>;<br><span class="hljs-keyword">end</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func8</span><span class="hljs-params">()</span></span><br><span class="hljs-variable">$l1lI1l</span>=<span class="hljs-variable">$l1lI1l</span>%<span class="hljs-number">8</span>;<br><span class="hljs-keyword">end</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func9</span><span class="hljs-params">()</span></span><br><span class="hljs-variable">$l1lI1l</span>=<span class="hljs-variable">$l1lI1l</span><span class="hljs-params">|8;</span><br><span class="hljs-params"><span class="hljs-keyword">end</span>;</span><br><span class="hljs-params"></span><br><span class="hljs-params">def func10()</span><br><span class="hljs-params">$l1lI1l=$l1lI1l^6;</span><br><span class="hljs-params"><span class="hljs-keyword">end</span>;</span><br><span class="hljs-params"></span><br><span class="hljs-params">def func11()</span><br><span class="hljs-params">$l1lI1l=$l1lI1l|</span><span class="hljs-number">1</span>;<br><span class="hljs-keyword">end</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func12</span><span class="hljs-params">()</span></span><br><span class="hljs-variable">$l1lI1l</span>=<span class="hljs-variable">$l1lI1l</span><span class="hljs-params">|3;</span><br><span class="hljs-params"><span class="hljs-keyword">end</span>;</span><br><span class="hljs-params"></span><br><span class="hljs-params">def func13()</span><br><span class="hljs-params">$l1lI1l=$l1lI1l+6;</span><br><span class="hljs-params"><span class="hljs-keyword">end</span>;</span><br><span class="hljs-params"></span><br><span class="hljs-params">def func14()</span><br><span class="hljs-params">$l1lI1l=$l1lI1l*4;</span><br><span class="hljs-params"><span class="hljs-keyword">end</span>;</span><br><span class="hljs-params"></span><br><span class="hljs-params">def func15()</span><br><span class="hljs-params">$l1lI1l=$l1lI1l*5;</span><br><span class="hljs-params"><span class="hljs-keyword">end</span>;</span><br><span class="hljs-params"></span><br><span class="hljs-params">def func16()</span><br><span class="hljs-params">$l1lI1l=$l1lI1l^7;</span><br><span class="hljs-params"><span class="hljs-keyword">end</span>;</span><br><span class="hljs-params"></span><br><span class="hljs-params">def func17()</span><br><span class="hljs-params">$l1lI1l=$l1lI1l^4;</span><br><span class="hljs-params"><span class="hljs-keyword">end</span>;</span><br><span class="hljs-params"></span><br><span class="hljs-params">def func18()</span><br><span class="hljs-params">$l1lI1l=$l1lI1l%5;</span><br><span class="hljs-params"><span class="hljs-keyword">end</span>;</span><br><span class="hljs-params"></span><br><span class="hljs-params">def func19()</span><br><span class="hljs-params">$l1lI1l=$l1lI1l+9;</span><br><span class="hljs-params"><span class="hljs-keyword">end</span>;</span><br><span class="hljs-params"></span><br><span class="hljs-params">def func20()</span><br><span class="hljs-params">$llll=$llll+$l1lI1l.chr;</span><br><span class="hljs-params"><span class="hljs-keyword">end</span>;</span><br><span class="hljs-params"></span><br><span class="hljs-params">def func21()</span><br><span class="hljs-params">send($llll[0,4], $llll[4,$llll.length]);</span><br><span class="hljs-params"><span class="hljs-keyword">end</span>;</span><br><span class="hljs-params"></span><br><span class="hljs-params">func6;</span><br><span class="hljs-params">func19;</span><br><span class="hljs-params">func15;</span><br><span class="hljs-params">func13;</span><br><span class="hljs-params">.....[节选]</span><br></code></pre></td></tr></table></figure><p>继续输出 func21 中 send 的参数得到第三层 ruby 程序</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">begin</span> <span class="hljs-variable">$_</span>=<span class="hljs-variable">$$</span>/<span class="hljs-variable">$$</span>;<br><span class="hljs-variable">@_</span>=<span class="hljs-variable">$_</span>+<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$-</span>_=<span class="hljs-variable">$_</span>-<span class="hljs-variable">@_</span>;<br><span class="hljs-variable">$__</span>=-&gt;_&#123;_==[]<span class="hljs-params">||</span>_==<span class="hljs-string">&#x27;&#x27;</span>?<span class="hljs-variable">$.</span><span class="hljs-symbol">:</span><span class="hljs-variable">$_</span>+<span class="hljs-variable">$__</span>[_[<span class="hljs-variable">$_</span>..<span class="hljs-variable">$-</span>_]]&#125;<br><span class="hljs-variable">@__</span>=-&gt;_,&amp;__&#123;_==[]?[]<span class="hljs-symbol">:</span>[__[_[<span class="hljs-variable">$.</span>]]]+<span class="hljs-variable">@__</span>[_[<span class="hljs-variable">$_</span>..<span class="hljs-variable">$-</span>_],&amp;__]&#125;<br><span class="hljs-variable">$_____</span>=-&gt;_&#123;<span class="hljs-variable">@__</span>[[*_],&amp;-&gt;__&#123;__[<span class="hljs-variable">$.</span>]&#125;]&#125;<br><span class="hljs-variable">@_____</span>=-&gt;_&#123;<span class="hljs-variable">@__</span>[[*_],&amp;-&gt;__&#123;__[<span class="hljs-variable">$-</span>_]&#125;]&#125;<br><span class="hljs-variable">$______</span>=-&gt;_&#123;___,______=<span class="hljs-variable">$_____</span>[_],<span class="hljs-variable">@_____</span>[_];_____=<span class="hljs-variable">$__</span>[___];____=&#123;&#125;;__=<span class="hljs-variable">$.</span>;(_=-&gt;&#123;<br>  ____[______[__]]=___[__];(__+=<span class="hljs-variable">$_</span>)==_____ ?<span class="hljs-symbol">____:</span>_[]&#125;)[]&#125;<br><span class="hljs-variable">@______</span>=-&gt;_,__&#123;_=[*_]+[*__];____=<span class="hljs-variable">$__</span>[_];___=&#123;&#125;;__=<span class="hljs-variable">$.</span>;(_____=-&gt;&#123;<br>  ___[_[__][<span class="hljs-variable">$.</span>]]=_[__][<span class="hljs-variable">$_</span>];(__+=<span class="hljs-variable">$_</span>)==____ ?<span class="hljs-symbol">___:</span>_____[]&#125;)[]&#125;<br><span class="hljs-variable">$_______</span>=-&gt;_&#123;<span class="hljs-variable">$___</span>=[];<span class="hljs-variable">@___</span>=<span class="hljs-variable">$__</span>[_];__=___=____=<span class="hljs-variable">$.</span>;<span class="hljs-variable">$____</span>,<span class="hljs-variable">@____</span>=&#123;&#125;,[]<br>(_____=-&gt;&#123;<br>  _[____]==<span class="hljs-string">&#x27;5&#x27;</span>?(<span class="hljs-variable">@____</span>&lt;&lt;____)<span class="hljs-symbol">:</span><span class="hljs-variable">$.</span><br>  _[____]==<span class="hljs-string">&#x27;6&#x27;</span>?(<span class="hljs-variable">$____</span>[<span class="hljs-variable">@____</span>[<span class="hljs-variable">$-</span>_]]=____;<span class="hljs-variable">@____</span>=<span class="hljs-variable">@____</span>[<span class="hljs-variable">$.</span>..<span class="hljs-variable">$.</span>-<span class="hljs-variable">@_</span>])<span class="hljs-symbol">:</span><span class="hljs-variable">$.</span><br>  (____+=<span class="hljs-variable">$_</span>)==<span class="hljs-variable">@__</span>_?<span class="hljs-variable">$.</span><span class="hljs-symbol">:_____[]</span>&#125;)[]<br><span class="hljs-variable">$____</span>=<span class="hljs-variable">$____</span>==&#123;&#125;?&#123;&#125;<span class="hljs-symbol">:</span><span class="hljs-variable">@______</span>[<span class="hljs-variable">$____</span>,<span class="hljs-variable">$______</span>[<span class="hljs-variable">$____</span>]]<br>(______=-&gt;&#123;_[__]==<br><span class="hljs-string">&#x27;0&#x27;</span>?(<span class="hljs-variable">$___</span>[___]<span class="hljs-params">||</span>=<span class="hljs-variable">$.</span>;<span class="hljs-variable">$___</span>[___]+=<span class="hljs-variable">$_</span>)<span class="hljs-symbol">:_</span>[__]==<br><span class="hljs-string">&#x27;1&#x27;</span>?(<span class="hljs-variable">$___</span>[___]<span class="hljs-params">||</span>=<span class="hljs-variable">$.</span>;<span class="hljs-variable">$___</span>[___]-=<span class="hljs-variable">$_</span>)<span class="hljs-symbol">:_</span>[__]==<br><span class="hljs-string">&#x27;2&#x27;</span>?(<span class="hljs-variable">$___</span>[___]<span class="hljs-params">||</span>=<span class="hljs-variable">$.</span>;<span class="hljs-variable">$___</span>[___]=STDIN.getc.ord)<span class="hljs-symbol">:_</span>[__]==<br><span class="hljs-string">&#x27;3&#x27;</span><span class="hljs-string">?(</span>___+=<span class="hljs-variable">$_</span>)<span class="hljs-symbol">:_</span>[__]==<br><span class="hljs-string">&#x27;4&#x27;</span><span class="hljs-string">?(</span>___-=<span class="hljs-variable">$_</span>)<span class="hljs-symbol">:_</span>[__]==<br><span class="hljs-string">&#x27;5&#x27;</span><span class="hljs-string">?(</span>__=(<span class="hljs-variable">$___</span>[___]<span class="hljs-params">||</span><span class="hljs-variable">$.</span>)==<span class="hljs-variable">$.</span><span class="hljs-string">?$</span>____[__]<span class="hljs-symbol">:__</span>)<span class="hljs-symbol">:_</span>[__]==<br><span class="hljs-string">&#x27;6&#x27;</span><span class="hljs-string">?(</span>__=(<span class="hljs-variable">$___</span>[___]<span class="hljs-params">||</span><span class="hljs-variable">$.</span>)!=<span class="hljs-variable">$.</span><span class="hljs-string">?$</span>____[__]<span class="hljs-symbol">:__</span>)<span class="hljs-symbol">:_</span>[__]==<br><span class="hljs-string">&#x27;7&#x27;</span>?(<span class="hljs-variable">$&gt;</span>&lt;&lt;(<span class="hljs-string">&#x27;&#x27;</span>&lt;&lt;<span class="hljs-variable">$___</span>[___]))<span class="hljs-symbol">:</span><span class="hljs-variable">$.</span><br>(__+=<span class="hljs-variable">$_</span>)==<span class="hljs-variable">@__</span>_?<span class="hljs-symbol">_:</span>______[]&#125;)[]&#125;<br><span class="hljs-variable">$_______</span>[<span class="hljs-string">&#xx27;</span>];<span class="hljs-keyword">rescue</span> Exception;<span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h2 id="第三层-ruby-程序"><a href="#第三层-ruby-程序" class="headerlink" title="第三层 ruby 程序"></a>第三层 ruby 程序</h2><p>主要是变量名的反混淆，用正则表达式匹配后替换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br>data = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;3.rb&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>).read()<br><br>target = <span class="hljs-string">&#x27;1&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> re.findall(<span class="hljs-string">r&quot;\$_[^_]&quot;</span>, data, re.M | re.S):<br>    <span class="hljs-keyword">if</span> i[-<span class="hljs-number">1</span>] != <span class="hljs-string">&quot;=&quot;</span>:<br>        print(i)<br>        data = data.replace(i, target + i[-<span class="hljs-number">1</span>])<br><br><span class="hljs-comment"># @_</span><br>target = <span class="hljs-string">&#x27;2&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> re.findall(<span class="hljs-string">r&quot;@_[^_]&quot;</span>, data, re.M | re.S):<br>    <span class="hljs-keyword">if</span> i[-<span class="hljs-number">1</span>] != <span class="hljs-string">&quot;=&quot;</span>:<br>        print(i)<br>        data = data.replace(i, target + i[-<span class="hljs-number">1</span>])<br><br><span class="hljs-comment"># $-_ =&gt; -1</span><br><br>target = <span class="hljs-string">&#x27;-1&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> re.findall(<span class="hljs-string">r&quot;\$-_[^_]&quot;</span>, data, re.M | re.S):<br>    <span class="hljs-keyword">if</span> i[-<span class="hljs-number">1</span>] != <span class="hljs-string">&quot;=&quot;</span>:<br>        print(i)<br>        data = data.replace(i, target + i[-<span class="hljs-number">1</span>])<br><br><span class="hljs-comment"># $__ -&gt; proc1</span><br><br>target = <span class="hljs-string">&#x27;$proc1&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> re.findall(<span class="hljs-string">r&quot;\$__[^_]&quot;</span>, data, re.M | re.S):<br>    print(i)<br>    data = data.replace(i, target + i[-<span class="hljs-number">1</span>])<br><br><span class="hljs-comment"># @__</span><br>target = <span class="hljs-string">&#x27;@proc2&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> re.findall(<span class="hljs-string">r&quot;@__[^_]&quot;</span>, data, re.M | re.S):<br>    print(i)<br>    data = data.replace(i, target + i[-<span class="hljs-number">1</span>])<br><br><span class="hljs-comment"># $_____</span><br>target = <span class="hljs-string">&#x27;$proc3&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> re.findall(<span class="hljs-string">r&quot;\$_____[^_]&quot;</span>, data, re.M | re.S):<br>    print(i)<br>    data = data.replace(i, target + i[-<span class="hljs-number">1</span>])<br><br><span class="hljs-comment"># @_____</span><br>target = <span class="hljs-string">&#x27;@proc4&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> re.findall(<span class="hljs-string">r&quot;@_____[^_]&quot;</span>, data, re.M | re.S):<br>    print(i)<br>    data = data.replace(i, target + i[-<span class="hljs-number">1</span>])<br><br><span class="hljs-comment"># $______</span><br>target = <span class="hljs-string">&#x27;$proc5&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> re.findall(<span class="hljs-string">r&quot;\$______[^_]&quot;</span>, data, re.M | re.S):<br>    print(i)<br>    data = data.replace(i, target + i[-<span class="hljs-number">1</span>])<br><br><br><span class="hljs-comment"># @______</span><br>target = <span class="hljs-string">&#x27;@proc6&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> re.findall(<span class="hljs-string">r&quot;@______[^_]&quot;</span>, data, re.M | re.S):<br>    print(i)<br>    data = data.replace(i, target + i[-<span class="hljs-number">1</span>])<br><br>target = <span class="hljs-string">&#x27;@varX&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> re.findall(<span class="hljs-string">r&quot;@___[^_]&quot;</span>, data, re.M | re.S):<br>    print(i)<br>    data = data.replace(i, target + i[-<span class="hljs-number">1</span>])<br><br><span class="hljs-comment"># $_______</span><br>target = <span class="hljs-string">&#x27;$proc7&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> re.findall(<span class="hljs-string">r&quot;\$_______[^_]&quot;</span>, data, re.M | re.S):<br>    print(i)<br>    data = data.replace(i, target + i[-<span class="hljs-number">1</span>])<br><br><span class="hljs-comment"># $___</span><br>target = <span class="hljs-string">&#x27;$arr1&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> re.findall(<span class="hljs-string">r&quot;\$___[^_]&quot;</span>, data, re.M | re.S):<br>    print(i)<br>    data = data.replace(i, target + i[-<span class="hljs-number">1</span>])<br><br><br><br><span class="hljs-comment"># $____</span><br>target = <span class="hljs-string">&#x27;$var3&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> re.findall(<span class="hljs-string">r&quot;\$____[^_]&quot;</span>, data, re.M | re.S):<br>    print(i)<br>    data = data.replace(i, target + i[-<span class="hljs-number">1</span>])<br><br><span class="hljs-comment"># @____</span><br>target = <span class="hljs-string">&#x27;@var4&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> re.findall(<span class="hljs-string">r&quot;@____[^_]&quot;</span>, data, re.M | re.S):<br>    print(i)<br>    data = data.replace(i, target + i[-<span class="hljs-number">1</span>])<br><br><span class="hljs-comment"># [^_]____[^_]</span><br>target = <span class="hljs-string">&#x27;var5&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> re.findall(<span class="hljs-string">r&quot;[^_]____[^_]&quot;</span>, data, re.M | re.S):<br>    print(i)<br>    data = data.replace(i, i[<span class="hljs-number">0</span>] + target + i[-<span class="hljs-number">1</span>])<br><br><span class="hljs-comment"># [^_]___[^_]</span><br>target = <span class="hljs-string">&#x27;var6&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> re.findall(<span class="hljs-string">r&quot;[^_]___[^_]&quot;</span>, data, re.M | re.S):<br>    print(i)<br>    data = data.replace(i, i[<span class="hljs-number">0</span>] + target + i[-<span class="hljs-number">1</span>])<br><br><br><span class="hljs-comment"># ______</span><br>target = <span class="hljs-string">&#x27;var7&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> re.findall(<span class="hljs-string">r&quot;[^_]______[^_]&quot;</span>, data, re.M | re.S):<br>    print(i)<br>    data = data.replace(i, i[<span class="hljs-number">0</span>] + target + i[-<span class="hljs-number">1</span>])<br><br><span class="hljs-comment"># _____</span><br>target = <span class="hljs-string">&#x27;var8&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> re.findall(<span class="hljs-string">r&quot;[^_]_____[^_]&quot;</span>, data, re.M | re.S):<br>    print(i)<br>    data = data.replace(i, i[<span class="hljs-number">0</span>] + target + i[-<span class="hljs-number">1</span>])<br>    data = data.replace(i, i[<span class="hljs-number">0</span>] + target + i[-<span class="hljs-number">1</span>])<br><br>data = data.replace(<span class="hljs-string">&quot;;&quot;</span>, <span class="hljs-string">&quot;;\n&quot;</span>, -<span class="hljs-number">1</span>)<br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;out4.rb&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>).write(data)<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>    print(e)<br><br></code></pre></td></tr></table></figure><p>处理后结果如下</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">begin</span> <span class="hljs-variable">$_</span>=<span class="hljs-variable">$$</span>/<span class="hljs-variable">$$</span>;<br><span class="hljs-variable">@_</span>=<span class="hljs-number">1</span>+<span class="hljs-number">1</span>;<br><span class="hljs-variable">$-</span>_=<span class="hljs-number">1</span>-<span class="hljs-number">2</span>;<br><span class="hljs-variable">$proc1</span>=-&gt;_&#123;_==[]<span class="hljs-params">||</span>_==<span class="hljs-string">&#x27;&#x27;</span>?<span class="hljs-variable">$.</span><span class="hljs-symbol">:</span><span class="hljs-number">1</span>+<span class="hljs-variable">$proc1</span>[_[<span class="hljs-number">1</span>..-<span class="hljs-number">1</span>]]&#125;<br><span class="hljs-variable">@proc2</span>=-&gt;_,&amp;__&#123;_==[]?[]<span class="hljs-symbol">:</span>[__[_[<span class="hljs-variable">$.</span>]]]+<span class="hljs-variable">@proc2</span>[_[<span class="hljs-number">1</span>..-<span class="hljs-number">1</span>],&amp;__]&#125;<br><span class="hljs-variable">$proc3</span>=-&gt;_&#123;<span class="hljs-variable">@proc2</span>[[*_],&amp;-&gt;__&#123;__[<span class="hljs-variable">$.</span>]&#125;]&#125;<br><span class="hljs-variable">@proc4</span>=-&gt;_&#123;<span class="hljs-variable">@proc2</span>[[*_],&amp;-&gt;__&#123;__[-<span class="hljs-number">1</span>]&#125;]&#125;<br><span class="hljs-variable">$proc5</span>=-&gt;_&#123;var6,var7=<span class="hljs-variable">$proc3</span>[_],<span class="hljs-variable">@proc4</span>[_];<br>var8=<span class="hljs-variable">$proc1</span>[var6];<br>var5=&#123;&#125;;<br>__=<span class="hljs-variable">$.</span>;<br>(_=-&gt;&#123;<br>  var5[var7[__]]=var6[__];<br>(__+=<span class="hljs-number">1</span>)==var8 ?<span class="hljs-symbol">var5:</span>_[]&#125;)[]&#125;<br><span class="hljs-variable">@proc6</span>=-&gt;_,__&#123;_=[*_]+[*__];<br>var5=<span class="hljs-variable">$proc1</span>[_];<br>var6=&#123;&#125;;<br>__=<span class="hljs-variable">$.</span>;<br>(var8=-&gt;&#123;<br>  var6[_[__][<span class="hljs-variable">$.</span>]]=_[__][<span class="hljs-number">1</span>];<br>(__+=<span class="hljs-number">1</span>)==var5 ?<span class="hljs-symbol">var6:</span>var8[]&#125;)[]&#125;<br><span class="hljs-variable">$proc7</span>=-&gt;_&#123;<span class="hljs-variable">$arr1</span>=[];<br><span class="hljs-variable">@varX</span>=<span class="hljs-variable">$proc1</span>[_];<br>__=var6=var5=<span class="hljs-variable">$.</span>;<br><span class="hljs-variable">$var3</span>,<span class="hljs-variable">@var4</span>=&#123;&#125;,[]<br>(var8=-&gt;&#123;<br>  _[var5]==<span class="hljs-string">&#x27;5&#x27;</span>?(<span class="hljs-variable">@var4</span>&lt;&lt;var5)<span class="hljs-symbol">:</span><span class="hljs-variable">$.</span><br>  _[var5]==<span class="hljs-string">&#x27;6&#x27;</span>?(<span class="hljs-variable">$var3</span>[<span class="hljs-variable">@var4</span>[-<span class="hljs-number">1</span>]]=var5;<br><span class="hljs-variable">@var4</span>=<span class="hljs-variable">@var4</span>[<span class="hljs-variable">$.</span>..<span class="hljs-variable">$.</span>-<span class="hljs-number">2</span>])<span class="hljs-symbol">:</span><span class="hljs-variable">$.</span><br>  (var5+=<span class="hljs-number">1</span>)==@varX?<span class="hljs-variable">$.</span><span class="hljs-symbol">:var8[]</span>&#125;)[]<br><span class="hljs-variable">$var3</span>=<span class="hljs-variable">$var3</span>==&#123;&#125;?&#123;&#125;<span class="hljs-symbol">:</span><span class="hljs-variable">@proc6</span>[<span class="hljs-variable">$var3</span>,<span class="hljs-variable">$proc5</span>[<span class="hljs-variable">$var3</span>]]<br>(var7=-&gt;&#123;_[__]==<br><span class="hljs-string">&#x27;0&#x27;</span>?(<span class="hljs-variable">$arr1</span>[var6]<span class="hljs-params">||</span>=<span class="hljs-variable">$.</span>;<br><span class="hljs-variable">$arr1</span>[var6]+=<span class="hljs-number">1</span>)<span class="hljs-symbol">:_</span>[__]==<br><span class="hljs-string">&#x27;1&#x27;</span>?(<span class="hljs-variable">$arr1</span>[var6]<span class="hljs-params">||</span>=<span class="hljs-variable">$.</span>;<br><span class="hljs-variable">$arr1</span>[var6]-=<span class="hljs-number">1</span>)<span class="hljs-symbol">:_</span>[__]==<br><span class="hljs-string">&#x27;2&#x27;</span>?(<span class="hljs-variable">$arr1</span>[var6]<span class="hljs-params">||</span>=<span class="hljs-variable">$.</span>;<br><span class="hljs-variable">$arr1</span>[var6]=STDIN.getc.ord)<span class="hljs-symbol">:_</span>[__]==<br><span class="hljs-string">&#x27;3&#x27;</span><span class="hljs-string">?(</span>var6+=<span class="hljs-number">1</span>)<span class="hljs-symbol">:_</span>[__]==<br><span class="hljs-string">&#x27;4&#x27;</span><span class="hljs-string">?(</span>var6-=<span class="hljs-number">1</span>)<span class="hljs-symbol">:_</span>[__]==<br><span class="hljs-string">&#x27;5&#x27;</span><span class="hljs-string">?(</span>__=(<span class="hljs-variable">$arr1</span>[var6]<span class="hljs-params">||</span><span class="hljs-variable">$.</span>)==<span class="hljs-variable">$.</span><span class="hljs-string">?$</span>var3[__]<span class="hljs-symbol">:__</span>)<span class="hljs-symbol">:_</span>[__]==<br><span class="hljs-string">&#x27;6&#x27;</span><span class="hljs-string">?(</span>__=(<span class="hljs-variable">$arr1</span>[var6]<span class="hljs-params">||</span><span class="hljs-variable">$.</span>)!=<span class="hljs-variable">$.</span><span class="hljs-string">?$</span>var3[__]<span class="hljs-symbol">:__</span>)<span class="hljs-symbol">:_</span>[__]==<br><span class="hljs-string">&#x27;7&#x27;</span>?(<span class="hljs-variable">$&gt;</span>&lt;&lt;(<span class="hljs-string">&#x27;&#x27;</span>&lt;&lt;<span class="hljs-variable">$arr1</span>[var6]))<span class="hljs-symbol">:</span><span class="hljs-variable">$.</span><br>(__+=<span class="hljs-number">1</span>)==@varX?<span class="hljs-symbol">_:</span>var7[]&#125;)[]&#125;<br><span class="hljs-variable">$proc7</span>[<span class="hljs-string">&#xx27;</span>];<br><span class="hljs-keyword">rescue</span> Exception;<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>虚拟机，指令集如下</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta"># 0: arr1[var6]+=1</span><br><span class="hljs-meta"># 1: $arr1[var6]-=1</span><br><span class="hljs-meta"># 2: $arr1[var6]=STDIN.getc.ord</span><br><span class="hljs-meta"># 3: var6+=1</span><br><span class="hljs-meta"># 4: var6-=1</span><br><span class="hljs-meta"># 5: if(arr1[var6] == 0) goto $var3[__]</span><br><span class="hljs-meta"># 6: if(arr1[var6] != 0) goto $var3[__]</span><br><span class="hljs-meta"># 7: putchar(arr1[var6])</span><br></code></pre></td></tr></table></figure><p><code>$var3</code> 是调用表，是 load 虚拟机字节码的时候生成的，可以直接 print 输出获得。</p><h2 id="编写-decompiler"><a href="#编写-decompiler" class="headerlink" title="编写 decompiler"></a>编写 decompiler</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-string">&#xx27;</span><br><br>addr = <span class="hljs-number">0</span><br>var3 = &#123;<span class="hljs-number">2</span>: <span class="hljs-string">&#x27;_5&#x27;</span>, <span class="hljs-number">6</span>: <span class="hljs-string">&#x27;_9&#x27;</span>,<br> <span class="hljs-number">19</span>: <span class="hljs-string">&#x27;_21&#x27;</span>,<br> <span class="hljs-number">43</span>: <span class="hljs-string">&#x27;_36&#x27;</span>,<br> <span class="hljs-number">76</span>: <span class="hljs-string">&#x27;_59&#x27;</span>,<br> <span class="hljs-number">93</span>: <span class="hljs-string">&#x27;_60&#x27;</span>,<br> <span class="hljs-number">100</span>: <span class="hljs-string">&#x27;_67&#x27;</span>,<br> <span class="hljs-number">105</span>: <span class="hljs-string">&#x27;_6c&#x27;</span>,<br> <span class="hljs-number">109</span>: <span class="hljs-string">&#x27;_76&#x27;</span>,<br> <span class="hljs-number">119</span>: <span class="hljs-string">&#x27;_7d&#x27;</span>,<br> <span class="hljs-number">128</span>: <span class="hljs-string">&#x27;_83&#x27;</span>,<br> <span class="hljs-number">135</span>: <span class="hljs-string">&#x27;_8a&#x27;</span>,<br> <span class="hljs-number">139</span>: <span class="hljs-string">&#x27;_8e&#x27;</span>,<br> <span class="hljs-number">149</span>: <span class="hljs-string">&#x27;_a5&#x27;</span>,<br> <span class="hljs-number">170</span>: <span class="hljs-string">&#x27;_b0&#x27;</span>,<br> <span class="hljs-number">180</span>: <span class="hljs-string">&#x27;_b7&#x27;</span>,<br> <span class="hljs-number">186</span>: <span class="hljs-string">&#x27;_bd&#x27;</span>,<br> <span class="hljs-number">193</span>: <span class="hljs-string">&#x27;_c4&#x27;</span>,<br> <span class="hljs-number">199</span>: <span class="hljs-string">&#x27;_d4&#x27;</span>,<br> <span class="hljs-number">213</span>: <span class="hljs-string">&#x27;_db&#x27;</span>,<br> <span class="hljs-number">224</span>: <span class="hljs-string">&#x27;_e3&#x27;</span>,<br> <span class="hljs-number">177</span>: <span class="hljs-string">&#x27;_e4&#x27;</span>,<br> <span class="hljs-number">228</span>: <span class="hljs-string">&#x27;_e7&#x27;</span>,<br> <span class="hljs-number">235</span>: <span class="hljs-string">&#x27;_ee&#x27;</span>,<br> <span class="hljs-number">239</span>: <span class="hljs-string">&#x27;_f2&#x27;</span>,<br> <span class="hljs-number">248</span>: <span class="hljs-string">&#x27;_106&#x27;</span>,<br> <span class="hljs-number">268</span>: <span class="hljs-string">&#x27;_112&#x27;</span>,<br> <span class="hljs-number">278</span>: <span class="hljs-string">&#x27;_119&#x27;</span>,<br> <span class="hljs-number">284</span>: <span class="hljs-string">&#x27;_11f&#x27;</span>,<br> <span class="hljs-number">291</span>: <span class="hljs-string">&#x27;_126&#x27;</span>,<br> <span class="hljs-number">297</span>: <span class="hljs-string">&#x27;_136&#x27;</span>,<br> <span class="hljs-number">311</span>: <span class="hljs-string">&#x27;_13d&#x27;</span>,<br> <span class="hljs-number">322</span>: <span class="hljs-string">&#x27;_145&#x27;</span>,<br> <span class="hljs-number">275</span>: <span class="hljs-string">&#x27;_146&#x27;</span>,<br> <span class="hljs-number">326</span>: <span class="hljs-string">&#x27;_149&#x27;</span>,<br> <span class="hljs-number">333</span>: <span class="hljs-string">&#x27;_150&#x27;</span>,<br> <span class="hljs-number">337</span>: <span class="hljs-string">&#x27;_154&#x27;</span>,<br> <span class="hljs-number">348</span>: <span class="hljs-string">&#x27;_16c&#x27;</span>,<br> <span class="hljs-number">370</span>: <span class="hljs-string">&#x27;_178&#x27;</span>,<br> <span class="hljs-number">380</span>: <span class="hljs-string">&#x27;_17f&#x27;</span>,<br> <span class="hljs-number">386</span>: <span class="hljs-string">&#x27;_185&#x27;</span>,<br> <span class="hljs-number">393</span>: <span class="hljs-string">&#x27;_18c&#x27;</span>,<br> <span class="hljs-number">399</span>: <span class="hljs-string">&#x27;_19c&#x27;</span>,<br> <span class="hljs-number">413</span>: <span class="hljs-string">&#x27;_1a3&#x27;</span>,<br> <span class="hljs-number">424</span>: <span class="hljs-string">&#x27;_1ab&#x27;</span>,<br> <span class="hljs-number">377</span>: <span class="hljs-string">&#x27;_1ac&#x27;</span>,<br> <span class="hljs-number">428</span>: <span class="hljs-string">&#x27;_1af&#x27;</span>,<br> <span class="hljs-number">435</span>: <span class="hljs-string">&#x27;_1b6&#x27;</span>,<br> <span class="hljs-number">439</span>: <span class="hljs-string">&#x27;_1ba&#x27;</span>,<br> <span class="hljs-number">450</span>: <span class="hljs-string">&#x27;_1d3&#x27;</span>,<br> <span class="hljs-number">473</span>: <span class="hljs-string">&#x27;_1df&#x27;</span>,<br> <span class="hljs-number">483</span>: <span class="hljs-string">&#x27;_1e6&#x27;</span>,<br> <span class="hljs-number">489</span>: <span class="hljs-string">&#x27;_1ec&#x27;</span>,<br> <span class="hljs-number">496</span>: <span class="hljs-string">&#x27;_1f3&#x27;</span>,<br> <span class="hljs-number">502</span>: <span class="hljs-string">&#x27;_203&#x27;</span>,<br> <span class="hljs-number">516</span>: <span class="hljs-string">&#x27;_20a&#x27;</span>,<br> <span class="hljs-number">527</span>: <span class="hljs-string">&#x27;_212&#x27;</span>,<br> <span class="hljs-number">480</span>: <span class="hljs-string">&#x27;_213&#x27;</span>,<br> <span class="hljs-number">531</span>: <span class="hljs-string">&#x27;_216&#x27;</span>,<br> <span class="hljs-number">538</span>: <span class="hljs-string">&#x27;_21d&#x27;</span>,<br> <span class="hljs-number">542</span>: <span class="hljs-string">&#x27;_221&#x27;</span>,<br> <span class="hljs-number">550</span>: <span class="hljs-string">&#x27;_236&#x27;</span>,<br> <span class="hljs-number">571</span>: <span class="hljs-string">&#x27;_241&#x27;</span>,<br> <span class="hljs-number">581</span>: <span class="hljs-string">&#x27;_248&#x27;</span>,<br> <span class="hljs-number">587</span>: <span class="hljs-string">&#x27;_24e&#x27;</span>,<br> <span class="hljs-number">594</span>: <span class="hljs-string">&#x27;_255&#x27;</span>,<br> <span class="hljs-number">600</span>: <span class="hljs-string">&#x27;_265&#x27;</span>,<br> <span class="hljs-number">614</span>: <span class="hljs-string">&#x27;_26c&#x27;</span>,<br> <span class="hljs-number">625</span>: <span class="hljs-string">&#x27;_274&#x27;</span>,<br> <span class="hljs-number">578</span>: <span class="hljs-string">&#x27;_275&#x27;</span>,<br> <span class="hljs-number">629</span>: <span class="hljs-string">&#x27;_278&#x27;</span>,<br> <span class="hljs-number">633</span>: <span class="hljs-string">&#x27;_27c&#x27;</span>,<br> <span class="hljs-number">638</span>: <span class="hljs-string">&#x27;_287&#x27;</span>,<br> <span class="hljs-number">649</span>: <span class="hljs-string">&#x27;_291&#x27;</span>,<br> <span class="hljs-number">661</span>: <span class="hljs-string">&#x27;_298&#x27;</span>,<br> <span class="hljs-number">665</span>: <span class="hljs-string">&#x27;_29c&#x27;</span>,<br> <span class="hljs-number">678</span>: <span class="hljs-string">&#x27;_2b5&#x27;</span>,<br> <span class="hljs-number">703</span>: <span class="hljs-string">&#x27;_2c2&#x27;</span>,<br> <span class="hljs-number">658</span>: <span class="hljs-string">&#x27;_2c3&#x27;</span>,<br> <span class="hljs-number">4</span>: <span class="hljs-string">&#x27;_3&#x27;</span>,<br> <span class="hljs-number">8</span>: <span class="hljs-string">&#x27;_7&#x27;</span>,<br> <span class="hljs-number">32</span>: <span class="hljs-string">&#x27;_14&#x27;</span>,<br> <span class="hljs-number">53</span>: <span class="hljs-string">&#x27;_2c&#x27;</span>,<br> <span class="hljs-number">88</span>: <span class="hljs-string">&#x27;_4d&#x27;</span>,<br> <span class="hljs-number">95</span>: <span class="hljs-string">&#x27;_5e&#x27;</span>,<br> <span class="hljs-number">102</span>: <span class="hljs-string">&#x27;_65&#x27;</span>,<br> <span class="hljs-number">107</span>: <span class="hljs-string">&#x27;_6a&#x27;</span>,<br> <span class="hljs-number">117</span>: <span class="hljs-string">&#x27;_6e&#x27;</span>,<br> <span class="hljs-number">124</span>: <span class="hljs-string">&#x27;_78&#x27;</span>,<br> <span class="hljs-number">130</span>: <span class="hljs-string">&#x27;_81&#x27;</span>,<br> <span class="hljs-number">137</span>: <span class="hljs-string">&#x27;_88&#x27;</span>,<br> <span class="hljs-number">141</span>: <span class="hljs-string">&#x27;_8c&#x27;</span>,<br> <span class="hljs-number">164</span>: <span class="hljs-string">&#x27;_96&#x27;</span>,<br> <span class="hljs-number">175</span>: <span class="hljs-string">&#x27;_ab&#x27;</span>,<br> <span class="hljs-number">182</span>: <span class="hljs-string">&#x27;_b5&#x27;</span>,<br> <span class="hljs-number">188</span>: <span class="hljs-string">&#x27;_bb&#x27;</span>,<br> <span class="hljs-number">195</span>: <span class="hljs-string">&#x27;_c2&#x27;</span>,<br> <span class="hljs-number">211</span>: <span class="hljs-string">&#x27;_c8&#x27;</span>,<br> <span class="hljs-number">218</span>: <span class="hljs-string">&#x27;_d6&#x27;</span>,<br> <span class="hljs-number">226</span>: <span class="hljs-string">&#x27;_e1&#x27;</span>,<br> <span class="hljs-number">227</span>: <span class="hljs-string">&#x27;_b2&#x27;</span>,<br> <span class="hljs-number">230</span>: <span class="hljs-string">&#x27;_e5&#x27;</span>,<br> <span class="hljs-number">237</span>: <span class="hljs-string">&#x27;_ec&#x27;</span>,<br> <span class="hljs-number">241</span>: <span class="hljs-string">&#x27;_f0&#x27;</span>,<br> <span class="hljs-number">261</span>: <span class="hljs-string">&#x27;_f9&#x27;</span>,<br> <span class="hljs-number">273</span>: <span class="hljs-string">&#x27;_10d&#x27;</span>,<br> <span class="hljs-number">280</span>: <span class="hljs-string">&#x27;_117&#x27;</span>,<br> <span class="hljs-number">286</span>: <span class="hljs-string">&#x27;_11d&#x27;</span>,<br> <span class="hljs-number">293</span>: <span class="hljs-string">&#x27;_124&#x27;</span>,<br> <span class="hljs-number">309</span>: <span class="hljs-string">&#x27;_12a&#x27;</span>,<br> <span class="hljs-number">316</span>: <span class="hljs-string">&#x27;_138&#x27;</span>,<br> <span class="hljs-number">324</span>: <span class="hljs-string">&#x27;_143&#x27;</span>,<br> <span class="hljs-number">325</span>: <span class="hljs-string">&#x27;_114&#x27;</span>,<br> <span class="hljs-number">328</span>: <span class="hljs-string">&#x27;_147&#x27;</span>,<br> <span class="hljs-number">335</span>: <span class="hljs-string">&#x27;_14e&#x27;</span>,<br> <span class="hljs-number">339</span>: <span class="hljs-string">&#x27;_152&#x27;</span>,<br> <span class="hljs-number">363</span>: <span class="hljs-string">&#x27;_15d&#x27;</span>,<br> <span class="hljs-number">375</span>: <span class="hljs-string">&#x27;_173&#x27;</span>,<br> <span class="hljs-number">382</span>: <span class="hljs-string">&#x27;_17d&#x27;</span>,<br> <span class="hljs-number">388</span>: <span class="hljs-string">&#x27;_183&#x27;</span>,<br> <span class="hljs-number">395</span>: <span class="hljs-string">&#x27;_18a&#x27;</span>,<br> <span class="hljs-number">411</span>: <span class="hljs-string">&#x27;_190&#x27;</span>,<br> <span class="hljs-number">418</span>: <span class="hljs-string">&#x27;_19e&#x27;</span>,<br> <span class="hljs-number">426</span>: <span class="hljs-string">&#x27;_1a9&#x27;</span>,<br> <span class="hljs-number">427</span>: <span class="hljs-string">&#x27;_17a&#x27;</span>,<br> <span class="hljs-number">430</span>: <span class="hljs-string">&#x27;_1ad&#x27;</span>,<br> <span class="hljs-number">437</span>: <span class="hljs-string">&#x27;_1b4&#x27;</span>,<br> <span class="hljs-number">441</span>: <span class="hljs-string">&#x27;_1b8&#x27;</span>,<br> <span class="hljs-number">466</span>: <span class="hljs-string">&#x27;_1c3&#x27;</span>,<br> <span class="hljs-number">478</span>: <span class="hljs-string">&#x27;_1da&#x27;</span>,<br> <span class="hljs-number">485</span>: <span class="hljs-string">&#x27;_1e4&#x27;</span>,<br> <span class="hljs-number">491</span>: <span class="hljs-string">&#x27;_1ea&#x27;</span>,<br> <span class="hljs-number">498</span>: <span class="hljs-string">&#x27;_1f1&#x27;</span>,<br> <span class="hljs-number">514</span>: <span class="hljs-string">&#x27;_1f7&#x27;</span>,<br> <span class="hljs-number">521</span>: <span class="hljs-string">&#x27;_205&#x27;</span>,<br> <span class="hljs-number">529</span>: <span class="hljs-string">&#x27;_210&#x27;</span>,<br> <span class="hljs-number">530</span>: <span class="hljs-string">&#x27;_1e1&#x27;</span>,<br> <span class="hljs-number">533</span>: <span class="hljs-string">&#x27;_214&#x27;</span>,<br> <span class="hljs-number">540</span>: <span class="hljs-string">&#x27;_21b&#x27;</span>,<br> <span class="hljs-number">544</span>: <span class="hljs-string">&#x27;_21f&#x27;</span>,<br> <span class="hljs-number">565</span>: <span class="hljs-string">&#x27;_227&#x27;</span>,<br> <span class="hljs-number">576</span>: <span class="hljs-string">&#x27;_23c&#x27;</span>,<br> <span class="hljs-number">583</span>: <span class="hljs-string">&#x27;_246&#x27;</span>,<br> <span class="hljs-number">589</span>: <span class="hljs-string">&#x27;_24c&#x27;</span>,<br> <span class="hljs-number">596</span>: <span class="hljs-string">&#x27;_253&#x27;</span>,<br> <span class="hljs-number">612</span>: <span class="hljs-string">&#x27;_259&#x27;</span>,<br> <span class="hljs-number">619</span>: <span class="hljs-string">&#x27;_267&#x27;</span>,<br> <span class="hljs-number">627</span>: <span class="hljs-string">&#x27;_272&#x27;</span>,<br> <span class="hljs-number">628</span>: <span class="hljs-string">&#x27;_243&#x27;</span>,<br> <span class="hljs-number">631</span>: <span class="hljs-string">&#x27;_276&#x27;</span>,<br> <span class="hljs-number">635</span>: <span class="hljs-string">&#x27;_27a&#x27;</span>,<br> <span class="hljs-number">646</span>: <span class="hljs-string">&#x27;_27f&#x27;</span>,<br> <span class="hljs-number">656</span>: <span class="hljs-string">&#x27;_28a&#x27;</span>,<br> <span class="hljs-number">663</span>: <span class="hljs-string">&#x27;_296&#x27;</span>,<br> <span class="hljs-number">667</span>: <span class="hljs-string">&#x27;_29a&#x27;</span>,<br> <span class="hljs-number">692</span>: <span class="hljs-string">&#x27;_2a7&#x27;</span>,<br> <span class="hljs-number">705</span>: <span class="hljs-string">&#x27;_2c0&#x27;</span>,<br> <span class="hljs-number">706</span>: <span class="hljs-string">&#x27;_293&#x27;</span>&#125;<br>var6 = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> op <span class="hljs-keyword">in</span> a:<br>    <span class="hljs-keyword">if</span> op == <span class="hljs-string">&#x27;0&#x27;</span>:<br>        print(<span class="hljs-string">&quot;_%x: arr1[var6]+=1;&quot;</span> % addr)<br><br>    <span class="hljs-keyword">elif</span> op == <span class="hljs-string">&#x27;1&#x27;</span>:<br>        print(<span class="hljs-string">&quot;_%x: arr1[var6]-=1;&quot;</span> %  addr)<br><br>    <span class="hljs-keyword">elif</span> op == <span class="hljs-string">&quot;2&quot;</span>:<br>        print(<span class="hljs-string">&quot;_%x: arr1[var6]=getchar();&quot;</span>   % addr)<br><br>    <span class="hljs-keyword">elif</span> op == <span class="hljs-string">&quot;3&quot;</span>:<br>        print(<span class="hljs-string">&quot;_%x: var6+=1;&quot;</span>% addr)<br>        var6 += <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">elif</span> op == <span class="hljs-string">&quot;4&quot;</span>:<br>        print(<span class="hljs-string">&quot;_%x: var6-=1;&quot;</span> % addr)<br>        var6 -= <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">elif</span> op == <span class="hljs-string">&quot;5&quot;</span>:<br>        print((<span class="hljs-string">&quot;_%x: if(arr1[var6] == 0) goto &quot;</span> + var3[addr] + <span class="hljs-string">&quot;;&quot;</span>) %  addr)<br><br>    <span class="hljs-keyword">elif</span> op == <span class="hljs-string">&quot;6&quot;</span>:<br>        print((<span class="hljs-string">&quot;_%x: if(arr1[var6] != 0) goto &quot;</span> + var3[addr] + <span class="hljs-string">&quot;;&quot;</span>) %   addr)<br><br>    <span class="hljs-keyword">elif</span> op == <span class="hljs-string">&quot;7&quot;</span>:<br>        print(<span class="hljs-string">&quot;_%x: putchar(arr1[var6]);&quot;</span>  % addr)<br>    <span class="hljs-keyword">else</span>:<br>        print(op)<br>        <span class="hljs-keyword">raise</span><br>    addr += <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="第四层-vm-分析"><a href="#第四层-vm-分析" class="headerlink" title="第四层 vm 分析"></a>第四层 vm 分析</h2><p>decompiler 结果如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++">_0: var6+=<span class="hljs-number">1</span>;<br>_1: var6+=<span class="hljs-number">1</span>;<br>_2: <span class="hljs-keyword">if</span>(arr1[var6] == <span class="hljs-number">0</span>) <span class="hljs-keyword">goto</span> _5;<br>_3: arr1[var6]-=<span class="hljs-number">1</span>;<br>_4: <span class="hljs-keyword">if</span>(arr1[var6] != <span class="hljs-number">0</span>) <span class="hljs-keyword">goto</span> _3;<br>_5: var6+=<span class="hljs-number">1</span>;<br>_6: <span class="hljs-keyword">if</span>(arr1[var6] == <span class="hljs-number">0</span>) <span class="hljs-keyword">goto</span> _9;<br>_7: arr1[var6]-=<span class="hljs-number">1</span>;<br>_8: <span class="hljs-keyword">if</span>(arr1[var6] != <span class="hljs-number">0</span>) <span class="hljs-keyword">goto</span> _7;<br>_9: var6-=<span class="hljs-number">1</span>;<br><br>............  节选<br>    <br><br>_2bd: var6-=<span class="hljs-number">1</span>;<br>_2be: var6-=<span class="hljs-number">1</span>;<br>_2bf: <span class="hljs-keyword">if</span>(arr1[var6] == <span class="hljs-number">0</span>) <span class="hljs-keyword">goto</span> _2c2;<br>_2c0: arr1[var6]-=<span class="hljs-number">1</span>;<br>_2c1: <span class="hljs-keyword">if</span>(arr1[var6] != <span class="hljs-number">0</span>) <span class="hljs-keyword">goto</span> _2c0;<br>_2c2: <span class="hljs-keyword">if</span>(arr1[var6] != <span class="hljs-number">0</span>) <span class="hljs-keyword">goto</span> _293;<br>_2c3: var6-=<span class="hljs-number">1</span>;<br>_2c4: var6-=<span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>用 C 语言重新编译处理</p><img src="/2021/05/16/CISCN-Little-evil/image-20210516153045506.png" class="" title="image-20210516153045506"><p>用 IDA 调试分析</p><img src="/2021/05/16/CISCN-Little-evil/image-20210516153148968.png" class="" title="image-20210516153148968"><p>逻辑很简单，就是逐个字节比较输入的五位 flag，经过调试得出输入为: M5Ya7</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CISCN-little-evil&quot;&gt;&lt;a href=&quot;#CISCN-little-evil&quot; class=&quot;headerlink&quot; title=&quot;CISCN little_evil&quot;&gt;&lt;/a&gt;CISCN little_evil&lt;/h1&gt;&lt;p&gt;比赛的时候差一点点出</summary>
      
    
    
    
    <category term="CTF" scheme="https://panda0s.top/categories/CTF/"/>
    
    
    <category term="Reverse" scheme="https://panda0s.top/tags/Reverse/"/>
    
    <category term="Ruby" scheme="https://panda0s.top/tags/Ruby/"/>
    
    <category term="obfuscator" scheme="https://panda0s.top/tags/obfuscator/"/>
    
  </entry>
  
  <entry>
    <title>WebAssembly Reverse</title>
    <link href="https://panda0s.top/2021/05/14/WebAssembly-Reverse/"/>
    <id>https://panda0s.top/2021/05/14/WebAssembly-Reverse/</id>
    <published>2021-05-14T02:50:17.000Z</published>
    <updated>2021-05-16T07:36:57.432Z</updated>
    
    <content type="html"><![CDATA[<h1 id="WASM"><a href="#WASM" class="headerlink" title="WASM"></a>WASM</h1><h2 id="WASM-开发环境"><a href="#WASM-开发环境" class="headerlink" title="WASM 开发环境"></a>WASM 开发环境</h2><p><code>Emscripten SDK</code> 主流的 WASM 开发环境, 本文基于 <code>Emscripten</code> 环境编写</p><h3 id="安装-Emscripten"><a href="#安装-Emscripten" class="headerlink" title="安装 Emscripten"></a>安装 Emscripten</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> Get the emsdk repo</span><br>git clone https://github.com/emscripten-core/emsdk.git<br><br><span class="hljs-meta">#</span><span class="bash"> Enter that directory</span><br>cd emsdk<br><br><span class="hljs-meta">#</span><span class="bash"> Fetch the latest version of the emsdk (not needed the first time you <span class="hljs-built_in">clone</span>)</span><br>git pull<br><br><span class="hljs-meta">#</span><span class="bash"> Download and install the latest SDK tools.</span><br>./emsdk install latest<br><br><span class="hljs-meta">#</span><span class="bash"> Make the <span class="hljs-string">&quot;latest&quot;</span> SDK <span class="hljs-string">&quot;active&quot;</span> <span class="hljs-keyword">for</span> the current user. (writes .emscripten file)</span><br>./emsdk activate latest<br><br><span class="hljs-meta">#</span><span class="bash"> Activate PATH and other environment variables <span class="hljs-keyword">in</span> the current terminal</span><br>source ./emsdk_env.sh<br></code></pre></td></tr></table></figure><h3 id="编译-Hello-world"><a href="#编译-Hello-world" class="headerlink" title="编译 Hello world"></a>编译 Hello world</h3><p>1.c </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> d;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;hello world.\n&quot;</span>);<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;d);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;your input: %d\n&quot;</span>, d);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译并生成运行 html 页面</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">emcc 1.c -o 1.html<br></code></pre></td></tr></table></figure><p>编译后当前目录下会生成三个文件: 1.html 1.js 1.wasm</p><p>目前主流的浏览器不支持 <code>file://</code> XHR 请求，因此要把这些文件放到 http server 上。</p><h2 id="js-与-wasm-的交互"><a href="#js-与-wasm-的交互" class="headerlink" title="js 与 wasm 的交互"></a>js 与 wasm 的交互</h2><p>通过js 层的 <code>ccall</code> 和 <code>cwarp</code> 调用 wasm 中的 C 函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;math.h&gt;</span></span><br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> &#123; <span class="hljs-comment">// to disable name-mangle</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">int_sqrt</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">sqrt</span>(x);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">emcc 1.cpp -o 1.html -s EXPORTED_FUNCTIONS=&#x27;[&quot;_int_sqrt&quot;, &quot;_main&quot;]&#x27; -s EXPORTED_RUNTIME_METHODS=&#x27;[&quot;ccall&quot;,&quot;cwrap&quot;]&#x27;<br></code></pre></td></tr></table></figure><p>调用接口</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">int_sqrt = Module.cwrap(<span class="hljs-string">&#x27;int_sqrt&#x27;</span>, <span class="hljs-string">&#x27;number&#x27;</span>, [<span class="hljs-string">&#x27;number&#x27;</span>])<br>int_sqrt(<span class="hljs-number">12</span>)<br>int_sqrt(<span class="hljs-number">28</span>)<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> result = Module.ccall(<span class="hljs-string">&#x27;int_sqrt&#x27;</span>, <span class="hljs-comment">// name of C function</span><br>  <span class="hljs-string">&#x27;number&#x27;</span>, <span class="hljs-comment">// return type</span><br>  [<span class="hljs-string">&#x27;number&#x27;</span>], <span class="hljs-comment">// argument types</span><br>  [<span class="hljs-number">28</span>]); <span class="hljs-comment">// arguments</span><br></code></pre></td></tr></table></figure><h2 id="一些基本的文件"><a href="#一些基本的文件" class="headerlink" title="一些基本的文件"></a>一些基本的文件</h2><p><code>.wasm</code> 二进制形式的代码</p><p><code>.wat</code> 文本形式(text format)的代码文件</p><p><code>wasm2wat</code> 可以将 <code>.wasm</code> 文件转换成 <code>.wat</code> 文件。</p><h1 id="WASM-静态分析"><a href="#WASM-静态分析" class="headerlink" title="WASM 静态分析"></a>WASM 静态分析</h1><p>WABT 是 WebAssembly 的二进制工具包</p><p>git 仓库地址:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-symbol">git@</span>github.com:WebAssembly/wabt.git<br></code></pre></td></tr></table></figure><p>编译方法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone git@github.com:WebAssembly/wabt.git<br>cd wabt<br>git submodule update --init<br>mkdir build<br>cd build<br>cmake ..<br>make -j8<br></code></pre></td></tr></table></figure><p>基本用法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">wasm2wat 1.wasm -o test.wat # Parse from binary to text format<br>wasm2c 1.wasm -o test.c     # decompile to c<br></code></pre></td></tr></table></figure><p>wasm2c 反编译出来的 C 效果不是很好，可以用 gcc 编译 test.c，然后用 IDA 分析输出文件。</p><p>⚠️⚠️⚠️ wasm2c 的输出文件名一定不能是数字开头，否则 GCC 编译会出问题。</p><p>gcc 编译方法</p><ol><li>复制 wabt/wasm2c 下的头文件到 test.c 目录</li><li>用 gcc 编译</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">gcc -c test.c -o test.out<br></code></pre></td></tr></table></figure><p>效果</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">strmlen</span><span class="hljs-params">(<span class="hljs-keyword">char</span> * s)</span> </span>&#123;<br>    <span class="hljs-keyword">size_t</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> ( *(s++) )cnt += <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> cnt;<br>&#125;<br></code></pre></td></tr></table></figure><p>用 IDA 逆向分析效果如下</p><img src="/2021/05/14/WebAssembly-Reverse/image-20210514222510337.png" class="" title="image-20210514222510337"><p>还是比较清晰的。</p><h2 id="调试方法"><a href="#调试方法" class="headerlink" title="调试方法"></a>调试方法</h2><p>一般没有源码只能用 <code>Chrome</code> 的 <code>DevTool</code> 调试。</p><p>DevTool 里面可以直接对 wasm 下断点。</p><h3 id="查看内存"><a href="#查看内存" class="headerlink" title="查看内存"></a>查看内存</h3><p>Chrome 版本 Chrome 91 以上支持 Memory Inspect</p><img src="/2021/05/14/WebAssembly-Reverse/image-20210514174849940.png" class="" title="image-20210514174849940"><p>点击 【Scope】 中 memory 旁边的内存图标可以打开 memory panel，输入地址即可查看。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>[1] Download and install Emscripten “<a href="https://emscripten.org/docs/getting_started/downloads.html#sdk-download-and-install&quot;">https://emscripten.org/docs/getting_started/downloads.html#sdk-download-and-install&quot;</a><br>[2] Emscripten Tutorial “<a href="https://emscripten.org/docs/getting_started/Tutorial.html&quot;">https://emscripten.org/docs/getting_started/Tutorial.html&quot;</a><br>[3] Interacting with code “<a href="https://emscripten.org/docs/porting/connecting_cpp_and_javascript/Interacting-with-code.html&quot;">https://emscripten.org/docs/porting/connecting_cpp_and_javascript/Interacting-with-code.html&quot;</a><br>[4] 一种Wasm逆向静态分析方法 “<a href="https://xz.aliyun.com/t/5170&quot;">https://xz.aliyun.com/t/5170&quot;</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;WASM&quot;&gt;&lt;a href=&quot;#WASM&quot; class=&quot;headerlink&quot; title=&quot;WASM&quot;&gt;&lt;/a&gt;WASM&lt;/h1&gt;&lt;h2 id=&quot;WASM-开发环境&quot;&gt;&lt;a href=&quot;#WASM-开发环境&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    <category term="PL_Reverse" scheme="https://panda0s.top/categories/PL-Reverse/"/>
    
    
    <category term="Reverse" scheme="https://panda0s.top/tags/Reverse/"/>
    
    <category term="Wasm" scheme="https://panda0s.top/tags/Wasm/"/>
    
  </entry>
  
  <entry>
    <title>看雪CTF2021</title>
    <link href="https://panda0s.top/2021/05/13/%E7%9C%8B%E9%9B%AACTF2021/"/>
    <id>https://panda0s.top/2021/05/13/%E7%9C%8B%E9%9B%AACTF2021/</id>
    <published>2021-05-13T14:09:51.000Z</published>
    <updated>2021-05-14T08:18:05.532Z</updated>
    
    <content type="html"><![CDATA[<h1 id="看雪CTF2021"><a href="#看雪CTF2021" class="headerlink" title="看雪CTF2021"></a>看雪CTF2021</h1><h2 id="第二题-南冥神功"><a href="#第二题-南冥神功" class="headerlink" title="第二题 南冥神功"></a>第二题 南冥神功</h2><p>简单迷宫题</p><p>map1 = [0x0, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x01, 0x01, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>):<br>    line = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>        <span class="hljs-keyword">if</span> theMap[y * <span class="hljs-number">10</span> + x] == <span class="hljs-number">0</span>:<br>            line = line + <span class="hljs-string">&quot;.&quot;</span><br>        <span class="hljs-keyword">else</span>:<br>            line = line + <span class="hljs-string">&quot;#&quot;</span><br>    print(line)<br></code></pre></td></tr></table></figure><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs clean">..#..#..##<br>##..#..#..<br>..#.#####.<br>.##.#..#..<br>..#..#..##<br>##.###.#.#<br>..####.#.#<br>.##..#.#.#<br>...#..##..<br></code></pre></td></tr></table></figure><p>.data:004B7040 a0123456789abcd db ‘0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ’,0<br>loc_4B3DC5:             ; what is ecx<br>mov     eax, ecx<br>‘0’ =&gt; 0<br>‘1’ =&gt; 1<br>‘2’ =&gt; 2<br>‘9’ =&gt; 9<br>‘A’ =&gt; 0xA<br>‘F’ =&gt; 0xF</p><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs gml">alpha = <span class="hljs-string">&#x27;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span><br>i_1 =&gt; alpha.index(flag[flagPos])<br>v8 = i_1 + flagPos;<br>v10 = <span class="hljs-number">5</span> - v8 % <span class="hljs-number">6</span>;<br><span class="hljs-keyword">switch</span> ( v10 )<br><br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span><br>    <span class="hljs-symbol">x</span> = <span class="hljs-symbol">x</span> + <span class="hljs-number">1</span><br><span class="hljs-keyword">case</span> <span class="hljs-number">4</span><br>    <span class="hljs-symbol">x</span> = <span class="hljs-symbol">x</span> - <span class="hljs-number">1</span><br><br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>    当 <span class="hljs-symbol">y</span> 为偶数， <span class="hljs-symbol">x</span> = <span class="hljs-symbol">x</span> + <span class="hljs-number">1</span><br>    <span class="hljs-symbol">y</span> = <span class="hljs-symbol">y</span> + <span class="hljs-number">1</span><br><br><span class="hljs-keyword">default</span><br>    如果 <span class="hljs-symbol">y</span> 为偶数, <span class="hljs-symbol">x</span> = <span class="hljs-symbol">x</span> + <span class="hljs-number">1</span><br>    <span class="hljs-symbol">y</span> = <span class="hljs-symbol">y</span> - <span class="hljs-number">1</span><br><br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>    如果 <span class="hljs-symbol">y</span> 为奇数, <span class="hljs-symbol">x</span> = <span class="hljs-symbol">x</span> - <span class="hljs-number">1</span><br>    <span class="hljs-symbol">y</span> = <span class="hljs-symbol">y</span> + <span class="hljs-number">1</span><br><br><span class="hljs-keyword">case</span> <span class="hljs-number">5</span><br>    如果 <span class="hljs-symbol">y</span> 为奇数, <span class="hljs-symbol">x</span> = <span class="hljs-symbol">x</span> - <span class="hljs-number">1</span><br>    <span class="hljs-symbol">y</span> = <span class="hljs-symbol">y</span> - <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>一位flag字符决定两个方向指令<br>v2 = (flagPos + flagIdx / 6) % 6;<br>v1 = cur = 5 - (flagPos + flagIdx ) % 6;<br>爆破 flagIdx 即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><code class="hljs python">map1 = [<span class="hljs-number">0x1</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>]<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">checkValid</span>(<span class="hljs-params">theMap, x, y</span>):</span><br>    <span class="hljs-keyword">if</span> x &lt; <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> y &lt; <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">if</span> x &gt; <span class="hljs-number">9</span> <span class="hljs-keyword">or</span> y &gt; <span class="hljs-number">8</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">return</span> theMap[y * <span class="hljs-number">10</span> + x] == <span class="hljs-number">0</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">isAllClear</span>(<span class="hljs-params">theMap</span>):</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span>(theMap) == <span class="hljs-number">90</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">genNextValid</span>(<span class="hljs-params">theMap, x, y</span>):</span><br>    insList = []<br>    <span class="hljs-comment"># case1</span><br>    <span class="hljs-keyword">if</span> checkValid(theMap, x + <span class="hljs-number">1</span>, y):<br>        insList.append((<span class="hljs-number">1</span>, x + <span class="hljs-number">1</span>, y))<br><br>    <span class="hljs-comment"># case4</span><br>    <span class="hljs-keyword">if</span> checkValid(theMap, x - <span class="hljs-number">1</span>, y):<br>        insList.append((<span class="hljs-number">4</span>, x - <span class="hljs-number">1</span>, y))<br><br>    <span class="hljs-keyword">if</span> y % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>        <span class="hljs-comment"># case2</span><br>        <span class="hljs-keyword">if</span> checkValid(theMap, x + <span class="hljs-number">1</span>, y + <span class="hljs-number">1</span>):<br>            insList.append((<span class="hljs-number">2</span>, x + <span class="hljs-number">1</span>, y + <span class="hljs-number">1</span>))<br>        <span class="hljs-comment"># default</span><br>        <span class="hljs-keyword">if</span> checkValid(theMap, x + <span class="hljs-number">1</span>, y - <span class="hljs-number">1</span>):<br>            insList.append((-<span class="hljs-number">1</span>, x + <span class="hljs-number">1</span>, y - <span class="hljs-number">1</span>))<br>        <span class="hljs-comment"># case3</span><br>        <span class="hljs-keyword">if</span> checkValid(theMap, x, y + <span class="hljs-number">1</span>):<br>            insList.append((<span class="hljs-number">3</span>, x, y + <span class="hljs-number">1</span>))<br>        <span class="hljs-comment"># case5</span><br>        <span class="hljs-keyword">if</span> checkValid(theMap, x, y - <span class="hljs-number">1</span>):<br>            insList.append((<span class="hljs-number">5</span>, x, y - <span class="hljs-number">1</span>))<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-comment"># case2</span><br>        <span class="hljs-keyword">if</span> checkValid(theMap, x, y + <span class="hljs-number">1</span>):<br>            insList.append((<span class="hljs-number">2</span>, x, y + <span class="hljs-number">1</span>))<br>        <span class="hljs-comment"># default</span><br>        <span class="hljs-keyword">if</span> checkValid(theMap, x, y - <span class="hljs-number">1</span>):<br>            insList.append((-<span class="hljs-number">1</span>, x, y - <span class="hljs-number">1</span>))<br>        <span class="hljs-comment"># case3</span><br>        <span class="hljs-keyword">if</span> checkValid(theMap, x - <span class="hljs-number">1</span>, y + <span class="hljs-number">1</span>):<br>            insList.append((<span class="hljs-number">3</span>, x - <span class="hljs-number">1</span>, y + <span class="hljs-number">1</span>))<br>        <span class="hljs-comment"># case5</span><br>        <span class="hljs-keyword">if</span> checkValid(theMap, x - <span class="hljs-number">1</span>, y - <span class="hljs-number">1</span>):<br>            insList.append((<span class="hljs-number">5</span>, x - <span class="hljs-number">1</span>, y - <span class="hljs-number">1</span>))<br>    <span class="hljs-keyword">return</span> insList<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dfs</span>(<span class="hljs-params">CurMap, curX, curY, InsList</span>):</span><br>    CurMap = CurMap.copy()<br>    CurMap[curY * <span class="hljs-number">10</span> + curX] = <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">if</span> isAllClear(CurMap):<br>        print(<span class="hljs-string">&quot;Find Solve.&quot;</span>)<br>        print(InsList)<br>        <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>):<br>            line = <span class="hljs-string">&#x27;&#x27;</span><br>            <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>                <span class="hljs-keyword">if</span> CurMap[y * <span class="hljs-number">10</span> + x] == <span class="hljs-number">0</span>:<br>                    line = line + <span class="hljs-string">&quot;.&quot;</span><br>                <span class="hljs-keyword">else</span>:<br>                    line = line + <span class="hljs-string">&quot;#&quot;</span><br>            print(line)<br>        <span class="hljs-keyword">return</span> InsList<br><br><br>    curInsList = genNextValid(CurMap, curX, curY)<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(curInsList) == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br>    result = <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> curInsList:<br>        InsList.append(i)<br>        dfs(CurMap, i[<span class="hljs-number">1</span>], i[<span class="hljs-number">2</span>], InsList)<br>        InsList.pop()<br>    <span class="hljs-keyword">return</span> result<br><br><br>dfs(map1, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, [])<br><br><span class="hljs-comment"># alpha = &#x27;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span><br><span class="hljs-comment"># i_1 =&gt; alpha.index(flag[flagPos])</span><br><span class="hljs-comment"># v8 = i_1 + flagPos;</span><br><span class="hljs-comment"># v10 = 5 - v8 % 6;</span><br>alpha = <span class="hljs-string">&#x27;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span><br>target = [(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>), (<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>), (<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>), (<span class="hljs-number">4</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>), (<span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>), (<span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>), (<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>), (<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>), (<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">6</span>), (<span class="hljs-number">4</span>, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>), (<span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">7</span>), (<span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">8</span>), (<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">8</span>), (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>), (-<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">7</span>), (<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>), (<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">8</span>), (<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>), (-<span class="hljs-number">1</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>), (-<span class="hljs-number">1</span>, <span class="hljs-number">6</span>, <span class="hljs-number">6</span>), (<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">5</span>), (-<span class="hljs-number">1</span>, <span class="hljs-number">6</span>, <span class="hljs-number">4</span>), (<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>), (<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>), (<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>), (<span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>), (<span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>), (-<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>), (<span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>), (-<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>), (<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">0</span>), (<span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>), (<span class="hljs-number">1</span>, <span class="hljs-number">6</span>, <span class="hljs-number">1</span>), (-<span class="hljs-number">1</span>, <span class="hljs-number">6</span>, <span class="hljs-number">0</span>), (<span class="hljs-number">1</span>, <span class="hljs-number">7</span>, <span class="hljs-number">0</span>), (<span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>), (<span class="hljs-number">1</span>, <span class="hljs-number">9</span>, <span class="hljs-number">1</span>), (<span class="hljs-number">2</span>, <span class="hljs-number">9</span>, <span class="hljs-number">2</span>), (<span class="hljs-number">3</span>, <span class="hljs-number">9</span>, <span class="hljs-number">3</span>), (<span class="hljs-number">4</span>, <span class="hljs-number">8</span>, <span class="hljs-number">3</span>), (<span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>), (<span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">5</span>), (<span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">6</span>), (<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>), (<span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>), (<span class="hljs-number">1</span>, <span class="hljs-number">9</span>, <span class="hljs-number">8</span>)]<br>flagPos = <span class="hljs-number">0</span><br>realPos = <span class="hljs-number">0</span><br>v7 = <span class="hljs-number">0</span><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(target), <span class="hljs-number">2</span>):<br>    step1 = target[i][<span class="hljs-number">0</span>]<br>    step2 = target[i + <span class="hljs-number">1</span>][<span class="hljs-number">0</span>]<br>    flagPos = i // <span class="hljs-number">2</span><br><br>    <span class="hljs-keyword">if</span> step1 == -<span class="hljs-number">1</span>:<br>        step1 = <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">if</span> step2 == -<span class="hljs-number">1</span>:<br>        step2 = <span class="hljs-number">0</span><br><br>    FindAns = <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">for</span> idx <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(alpha)):<br>        v7 = (flagPos + idx // <span class="hljs-number">6</span>) % <span class="hljs-number">6</span><br>        v6 = <span class="hljs-number">5</span> - (idx + flagPos) % <span class="hljs-number">6</span><br>        <span class="hljs-keyword">if</span> v6 == step1 <span class="hljs-keyword">and</span> v7 == step2:<br>            FindAns = idx<br><br>    flag += alpha[FindAns]<br>print(flag)<br></code></pre></td></tr></table></figure><h2 id="第四题-英雄救美"><a href="#第四题-英雄救美" class="headerlink" title="第四题 英雄救美"></a>第四题 英雄救美</h2><p>sub_391240 对输入数据进行转换<br>这个函数有点小坑…..</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">table1 = [<span class="hljs-number">0x24</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0x3E</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0x4D</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0x3F</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0x71</span>]<br></code></pre></td></tr></table></figure><p>$B$BP =&gt; 12123</p><p>sub_391000  9x9 数独 check</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">map1 = [<span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000004</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000007</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000009</span>, <span class="hljs-number">0x00000002</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000006</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000007</span>, <span class="hljs-number">0x00000008</span>, <span class="hljs-number">0x00000003</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000005</span>, <span class="hljs-number">0x00000004</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000003</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000002</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000005</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000004</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000004</span>, <span class="hljs-number">0x00000009</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000007</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000003</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000005</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000009</span>, <span class="hljs-number">0x00000004</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000008</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000006</span>, <span class="hljs-number">0x00000000</span>]<br><br>mat = []<br><span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>):<br>    line = <span class="hljs-built_in">list</span>()<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>):<br>        line.append(map1[y * <span class="hljs-number">9</span> + x])<br>    mat.append(line)<br></code></pre></td></tr></table></figure><p>数独输出如下</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">0 </span><span class="hljs-number">4</span> <span class="hljs-number">0</span> <span class="hljs-number">7</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">9 </span><span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">6</span> <span class="hljs-number">0</span> <span class="hljs-number">7</span><br><span class="hljs-symbol">8 </span><span class="hljs-number">3</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">5</span> <span class="hljs-number">4</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">3</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">5</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">4</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">0</span> <span class="hljs-number">4</span> <span class="hljs-number">9</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">7</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">0</span> <span class="hljs-number">5</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">9</span> <span class="hljs-number">4</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">8</span> <span class="hljs-number">0</span> <span class="hljs-number">6</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>用 z3 脚本解一下数独</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python">X = [ [ Int(<span class="hljs-string">&quot;x_%s_%s&quot;</span> % (i+<span class="hljs-number">1</span>, j+<span class="hljs-number">1</span>)) <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>) ] <br>      <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>) ]<br><br>cells_c  = [ And(<span class="hljs-number">1</span> &lt;= X[i][j], X[i][j] &lt;= <span class="hljs-number">9</span>) <br>             <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>) <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>) ]<br><br>rows_c   = [ Distinct(X[i]) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>) ]<br><br>cols_c   = [ Distinct([ X[i][j] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>) ]) <br>             <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>) ]<br><br>sq_c     = [ Distinct([ X[<span class="hljs-number">3</span>*i0 + i][<span class="hljs-number">3</span>*j0 + j] <br>                        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>) <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>) ]) <br>             <span class="hljs-keyword">for</span> i0 <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>) <span class="hljs-keyword">for</span> j0 <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>) ]<br><br>sudoku_c = cells_c + rows_c + cols_c + sq_c<br><br>instance = [[<span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">0</span>, <span class="hljs-number">7</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],<br> [<span class="hljs-number">9</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>, <span class="hljs-number">0</span>, <span class="hljs-number">7</span>],<br> [<span class="hljs-number">8</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],<br> [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],<br> [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],<br> [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">0</span>],<br> [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>],<br> [<span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">9</span>, <span class="hljs-number">4</span>],<br> [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">8</span>, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>, <span class="hljs-number">0</span>]]<br><br>instance_c = [ If(instance[i][j] == <span class="hljs-number">0</span>, <br>                  <span class="hljs-literal">True</span>, <br>                  X[i][j] == instance[i][j]) <br>               <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>) <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>) ]<br><br>s = Solver()<br>s.add(sudoku_c + instance_c)<br><span class="hljs-keyword">if</span> s.check() == sat:<br>    m = s.model()<br>    r = [ [ m.evaluate(X[i][j]) <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>) ] <br>          <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>) ]<br>    print_matrix(r)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;failed to solve&quot;</span>)<br></code></pre></td></tr></table></figure><p>得到结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">result = [[<span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>, <span class="hljs-number">9</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">8</span>],<br> [<span class="hljs-number">9</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">8</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>],<br> [<span class="hljs-number">8</span>, <span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">6</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">9</span>],<br> [<span class="hljs-number">7</span>, <span class="hljs-number">1</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>, <span class="hljs-number">9</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>],<br> [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">9</span>, <span class="hljs-number">1</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">6</span>],<br> [<span class="hljs-number">6</span>, <span class="hljs-number">9</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>],<br> [<span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>],<br> [<span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">4</span>],<br> [<span class="hljs-number">1</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">8</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">2</span>]]<br></code></pre></td></tr></table></figure><p>反推输入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python">dict_map = &#123;&#125;<br><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(table1)):<br>    kk = k % <span class="hljs-number">9</span> + <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> kk <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> dict_map:<br>        dict_map[kk] = []<br>    dict_map[kk].append(table1[k])<br><br><span class="hljs-keyword">for</span> kk <span class="hljs-keyword">in</span> dict_map:<br>    print(kk, dict_map[kk])<br><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>):<br>    cnt = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>):<br>        <span class="hljs-keyword">if</span> instance[y][x] == <span class="hljs-number">0</span>:<br>            flag = flag + <span class="hljs-built_in">chr</span>(dict_map[result[y][x]][y])<br>            cnt = cnt + <span class="hljs-number">1</span> <br>    flag = flag + <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;9&#x27;</span>) - cnt)<br>print(flag)<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;看雪CTF2021&quot;&gt;&lt;a href=&quot;#看雪CTF2021&quot; class=&quot;headerlink&quot; title=&quot;看雪CTF2021&quot;&gt;&lt;/a&gt;看雪CTF2021&lt;/h1&gt;&lt;h2 id=&quot;第二题-南冥神功&quot;&gt;&lt;a href=&quot;#第二题-南冥神功&quot; class=&quot;</summary>
      
    
    
    
    <category term="CTF" scheme="https://panda0s.top/categories/CTF/"/>
    
    
    <category term="Reverse" scheme="https://panda0s.top/tags/Reverse/"/>
    
  </entry>
  
  <entry>
    <title>Cython Reverse</title>
    <link href="https://panda0s.top/2021/05/07/Cython-Reverse/"/>
    <id>https://panda0s.top/2021/05/07/Cython-Reverse/</id>
    <published>2021-05-07T11:56:04.000Z</published>
    <updated>2021-05-13T14:07:31.265Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Cython-Reverse-notes"><a href="#Cython-Reverse-notes" class="headerlink" title="Cython Reverse notes"></a>Cython Reverse notes</h1><p>Cython 是什么呢？官方给出的解释是 Cython 是一种新的语言，是带类型的 Python [1]。</p><p>Cython 有一个功能叫 <code>Cythonize</code> 这个功能可以将 Python 编译成 C语言实现，再由 GCC/Clang 将 C 编译成动态库。</p><p>setup.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> setuptools <span class="hljs-keyword">import</span> setup<br><span class="hljs-keyword">from</span> Cython.Build <span class="hljs-keyword">import</span> cythonize<br><br>setup(<br>    ext_modules = cythonize(<span class="hljs-string">&quot;hello.pyx&quot;</span>, annotate=<span class="hljs-literal">True</span>)<br>)<br></code></pre></td></tr></table></figure><p>annotate=True 选项可以生成一个 html 页面，用于显示 Py源码与生成的C代码的对应关系。</p><p>build 命令</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> setup.<span class="hljs-keyword">py</span> build_ext --inplace<br></code></pre></td></tr></table></figure><p>Build 成功后，可以在当前目录下找到对应的动态库与对应的 xxx.c 源文件。此时可以直接用 python import 导入（就像导入编译之前的那样）</p><p>Cythonize 好处是编译成本地代码后执行效率可以提高，缺点是不太好<code>逆向</code></p><p>本文分析基于 Python 3.7.6，Cython 0.29.21</p><p>本文基于 Hello.py 编译成的动态库分析</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">import</span> math<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">myfunc1</span>():</span><br>    print(<span class="hljs-string">&quot;This is myfunc1.&quot;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_variables</span>():</span><br>    x = <span class="hljs-number">5</span><br>    y = <span class="hljs-string">&quot;variables test.&quot;</span><br>    print(x)<br>    print(y)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_strVar</span>():</span><br>    x = <span class="hljs-string">&quot;Hello world.&quot;</span><br>    print(x)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_global_var</span>():</span><br>    <span class="hljs-keyword">global</span> gy<br>    print(gy)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_cast</span>():</span><br>    x = <span class="hljs-built_in">int</span>(<span class="hljs-number">5</span>)<br>    y = <span class="hljs-built_in">str</span>(<span class="hljs-number">3</span>)<br>    print(x, y)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_numbers</span>():</span><br>    x = <span class="hljs-number">123</span><br>    y = <span class="hljs-number">12.3</span><br>    z = <span class="hljs-number">0x112233445566778899AABBCCDD</span><br>    print(x, y, z)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_if</span>(<span class="hljs-params">x</span>):</span><br>    <span class="hljs-keyword">if</span> x &gt; <span class="hljs-number">456</span>:<br>        print(<span class="hljs-string">&quot;x &gt; 456&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        print(<span class="hljs-string">&quot;x &lt;= 456&quot;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_string</span>():</span><br>    x = <span class="hljs-string">&quot;I am str.&quot;</span><br>    y = <span class="hljs-built_in">len</span>(x)<br>    z = x[<span class="hljs-number">1</span>]<br>    w = x[<span class="hljs-number">2</span>:]<br>    print(x, y, z, w)<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;am&quot;</span> <span class="hljs-keyword">in</span> x:<br>        print(<span class="hljs-string">&quot;yes&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        print(<span class="hljs-string">&quot;wrong&quot;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_list</span>():</span><br>    x = <span class="hljs-built_in">list</span>()<br>    x.append(<span class="hljs-number">1</span>)<br>    x.append(<span class="hljs-number">2</span>)<br>    x.append(<span class="hljs-number">3</span>)<br>    x.append(<span class="hljs-number">4</span>)<br>    x.append(<span class="hljs-string">&quot;five&quot;</span>)<br>    print(x)<br>    print(<span class="hljs-built_in">len</span>(x))<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> x:<br>        print(i)<br>    x = x[<span class="hljs-number">1</span>:]<br>    x[<span class="hljs-number">2</span>:<span class="hljs-number">4</span>] = [<span class="hljs-number">22</span>, <span class="hljs-number">33</span>]<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_dict</span>():</span><br>    x = &#123;&#125;<br>    x[<span class="hljs-string">&quot;one&quot;</span>] = <span class="hljs-number">1</span><br>    x[<span class="hljs-string">&quot;two&quot;</span>] = <span class="hljs-number">2</span><br>    x[<span class="hljs-string">&quot;three&quot;</span>] = <span class="hljs-number">3</span><br>    y = x[<span class="hljs-string">&quot;one&quot;</span>]<br>    z = x[<span class="hljs-string">&quot;two&quot;</span>]<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;one&quot;</span> <span class="hljs-keyword">in</span> x:<br>        print(y)<br><br>    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> x:<br>        print(k, x[k])<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_for</span>():</span><br>    s = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">101</span>):<br>        s = s + i<br>    print(s)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_while</span>():</span><br>    s = <span class="hljs-number">0</span><br>    i = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> i &lt;= <span class="hljs-number">100</span>:<br>        s = s + i<br>        i += <span class="hljs-number">1</span><br>    print(s)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_exception</span>():</span><br>    x = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">try</span>:<br>        x = x + <span class="hljs-string">&quot;1&quot;</span><br>        print(x)<br>    <span class="hljs-keyword">except</span> NameError:<br>        print(<span class="hljs-string">&quot;Variable x is not defined&quot;</span>)<br>    <span class="hljs-keyword">except</span>:<br>        print(<span class="hljs-string">&quot;Something else went wrong&quot;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_datetime</span>():</span><br>    x = datetime.datetime.now()<br>    print(x)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_format</span>():</span><br>    x = <span class="hljs-number">1</span><br>    y = <span class="hljs-string">&quot;One&quot;</span><br>    z = <span class="hljs-string">&quot;%s is %d&quot;</span> % (y, x)<br>    print(z)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_math</span>():</span><br>    x = math.ceil(<span class="hljs-number">1.4</span>)<br>    y = math.floor(<span class="hljs-number">1.4</span>)<br><br>    print(x) <span class="hljs-comment"># returns 2</span><br>    print(y) <span class="hljs-comment"># returns 1</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_arg</span>(<span class="hljs-params">x, y, z</span>):</span><br>    x = x + <span class="hljs-number">1</span><br>    y = y + <span class="hljs-string">&quot;2&quot;</span><br>    z = z[:]<br>    print(x, y, z)<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test_class</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span><br>        self.aa = <span class="hljs-number">1</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_class_hh</span>(<span class="hljs-params">self</span>):</span><br>        print(self.aa)<br><br>    <br><br>gy = <span class="hljs-number">123</span><br>myfunc1()<br>test_variables()<br>test_strVar()<br>test_global_var()<br>test_cast()<br>test_numbers()<br>test_string()<br>test_list()<br>test_dict()<br>test_for()<br>test_while()<br>test_exception()<br>test_datetime()<br>test_format()<br>test_math()<br>test_arg(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;2&quot;</span>, [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>])<br><br></code></pre></td></tr></table></figure><h2 id="字符串表-pyx-string-tab"><a href="#字符串表-pyx-string-tab" class="headerlink" title="字符串表 __pyx_string_tab"></a>字符串表 __pyx_string_tab</h2><p>字符串表算是 Cython 动态库逆向非常重要的一个入口了，字符串表记录 Python 代码中引用的字符串。</p><p>在 hello.c 源文件中可以找到 __pyx_string_tab</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span>PyObject **p; <br>                <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *s; <br>                <span class="hljs-keyword">const</span> Py_ssize_t n; <br>                <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* encoding;<br>                <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> is_unicode; <br>                <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> is_str; <br>                <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> intern; <br>               &#125; __Pyx_StringTabEntry;<br><br><span class="hljs-keyword">static</span> PyObject *__pyx_kp_s_1;<br><span class="hljs-keyword">static</span> PyObject *__pyx_kp_s_Hello_world;<br><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> __pyx_k_1[] = <span class="hljs-string">&quot;1&quot;</span>;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> __pyx_k_Hello_world[] = <span class="hljs-string">&quot;Hello world.&quot;</span>;<br><br><br><span class="hljs-keyword">static</span> __Pyx_StringTabEntry __pyx_string_tab[] = &#123;<br>  &#123;&amp;__pyx_kp_s_1, __pyx_k_1, <span class="hljs-keyword">sizeof</span>(__pyx_k_1), <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;,<br>  &#123;&amp;__pyx_kp_s_Hello_world, __pyx_k_Hello_world, <span class="hljs-keyword">sizeof</span>(__pyx_k_Hello_world), <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;,<br>  &#123;&amp;__pyx_kp_s_I_am_str, __pyx_k_I_am_str, <span class="hljs-keyword">sizeof</span>(__pyx_k_I_am_str), <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;,<br>  &#123;&amp;__pyx_n_s_NameError, __pyx_k_NameError, <span class="hljs-keyword">sizeof</span>(__pyx_k_NameError), <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>&#125;,<br>    ......<br>  &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;<br>&#125;<br><br>__Pyx_InitStrings(__pyx_string_tab)<br></code></pre></td></tr></table></figure><p><code>__pyx_string_tab</code> 将 <code>PyObject</code> 与对应的字符串关联起来，最后调用 <code>__Pyx_InitStrings</code> 初始化所有字符串对象。</p><p>在 IDA 逆向分析时，查找字符串引用，可以快速定位到<code>__pyx_string_tab</code> ，然后根据 <code>__Pyx_StringTabEntry</code> 定位程序对某个字符串 <code>PyObject</code> 的引用。</p><img src="/2021/05/07/Cython-Reverse/image-20210507215019652.png" class="" title="image-20210507215019652"><h2 id="整数常量的构造"><a href="#整数常量的构造" class="headerlink" title="整数常量的构造"></a>整数常量的构造</h2><p>整数在 Cython 里面也是 <code>PyObject</code>，整数常量属于全局变量，在 <code>__Pyx_InitGlobals</code> 中初始化</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++">__pyx_float_1_4 = PyFloat_FromDouble(<span class="hljs-number">1.4</span>); <br>__pyx_int_0 = PyInt_FromLong(<span class="hljs-number">0</span>);<br>__pyx_int_1 = PyInt_FromLong(<span class="hljs-number">1</span>);<br>__pyx_int_2 = PyInt_FromLong(<span class="hljs-number">2</span>);<br>__pyx_int_3 = PyInt_FromLong(<span class="hljs-number">3</span>);<br>__pyx_int_4 = PyInt_FromLong(<span class="hljs-number">4</span>);<br>__pyx_int_5 = PyInt_FromLong(<span class="hljs-number">5</span>);<br>__pyx_int_6 = PyInt_FromLong(<span class="hljs-number">6</span>);<br>__pyx_int_22 = PyInt_FromLong(<span class="hljs-number">22</span>);<br>__pyx_int_33 = PyInt_FromLong(<span class="hljs-number">33</span>);<br>__pyx_int_100 = PyInt_FromLong(<span class="hljs-number">100</span>);<br>__pyx_int_123 = PyInt_FromLong(<span class="hljs-number">123</span>);<br>__pyx_int_1357463230989497419223659171037 = PyInt_FromString((<span class="hljs-keyword">char</span> *)<span class="hljs-string">&quot;1357463230989497419223659171037&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><h2 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">static</span> PyObject *__pyx_pf_5hello_myfunc1(CYTHON_UNUSED PyObject *__pyx_self); <span class="hljs-comment">/* proto */</span><br><span class="hljs-keyword">static</span> PyObject *__pyx_pf_5hello_2test_variables(CYTHON_UNUSED PyObject *__pyx_self); <span class="hljs-comment">/* proto */</span><br><span class="hljs-keyword">static</span> PyObject *__pyx_pf_5hello_4test_strVar(CYTHON_UNUSED PyObject *__pyx_self); <span class="hljs-comment">/* proto */</span><br><span class="hljs-keyword">static</span> PyObject *__pyx_pf_5hello_6test_global_var(CYTHON_UNUSED PyObject *__pyx_self); <span class="hljs-comment">/* proto */</span><br><span class="hljs-keyword">static</span> PyObject *__pyx_pf_5hello_8test_cast(CYTHON_UNUSED PyObject *__pyx_self); <span class="hljs-comment">/* proto */</span><br><span class="hljs-keyword">static</span> PyObject *__pyx_pf_5hello_10test_numbers(CYTHON_UNUSED PyObject *__pyx_self); <span class="hljs-comment">/* proto */</span><br><span class="hljs-keyword">static</span> PyObject *__pyx_pf_5hello_12test_if(CYTHON_UNUSED PyObject *__pyx_self); <span class="hljs-comment">/* proto */</span><br><span class="hljs-keyword">static</span> PyObject *__pyx_pf_5hello_14test_string(CYTHON_UNUSED PyObject *__pyx_self); <span class="hljs-comment">/* proto */</span><br><span class="hljs-keyword">static</span> PyObject *__pyx_pf_5hello_16test_list(CYTHON_UNUSED PyObject *__pyx_self); <span class="hljs-comment">/* proto */</span><br><span class="hljs-keyword">static</span> PyObject *__pyx_pf_5hello_18test_dict(CYTHON_UNUSED PyObject *__pyx_self); <span class="hljs-comment">/* proto */</span><br><span class="hljs-keyword">static</span> PyObject *__pyx_pf_5hello_20test_for(CYTHON_UNUSED PyObject *__pyx_self); <span class="hljs-comment">/* proto */</span><br><span class="hljs-keyword">static</span> PyObject *__pyx_pf_5hello_22test_while(CYTHON_UNUSED PyObject *__pyx_self); <span class="hljs-comment">/* proto */</span><br><span class="hljs-keyword">static</span> PyObject *__pyx_pf_5hello_24test_exception(CYTHON_UNUSED PyObject *__pyx_self); <span class="hljs-comment">/* proto */</span><br><span class="hljs-keyword">static</span> PyObject *__pyx_pf_5hello_26test_datetime(CYTHON_UNUSED PyObject *__pyx_self); <span class="hljs-comment">/* proto */</span><br><span class="hljs-keyword">static</span> PyObject *__pyx_pf_5hello_28test_format(CYTHON_UNUSED PyObject *__pyx_self); <span class="hljs-comment">/* proto */</span><br><span class="hljs-keyword">static</span> PyObject *__pyx_pf_5hello_30test_math(CYTHON_UNUSED PyObject *__pyx_self); <span class="hljs-comment">/* proto */</span><br><span class="hljs-keyword">static</span> PyObject *__pyx_pf_5hello_32test_arg(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_x, PyObject *__pyx_v_y, PyObject *__pyx_v_z); <span class="hljs-comment">/* proto */</span><br><span class="hljs-keyword">static</span> PyObject *__pyx_pf_5hello_10test_class___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); <span class="hljs-comment">/* proto */</span><br><span class="hljs-keyword">static</span> PyObject *__pyx_pf_5hello_10test_class_2test_class_hh(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); <span class="hljs-comment">/* proto */</span><br></code></pre></td></tr></table></figure><p>重点看一下 <code>__pyx_pf_5hello_32test_arg</code> 与 <code>__pyx_pf_5hello_10test_class_2test_class_hh</code></p><p><code>__pyx_pf_5hello_32test_arg</code> 的 py 定义是 <code>def test_arg(x, y, z)</code> 因此多了几个参数。</p><p><code>__pyx_pf_5hello_10test_class_2test_class_hh</code> 是类函数 test_class.test_class_hh , 所以有一个 self 参数。</p><h2 id="myfunc1-分析"><a href="#myfunc1-分析" class="headerlink" title="myfunc1() 分析"></a>myfunc1() 分析</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">PyObject *__cdecl <span class="hljs-title">PyObject_Call</span><span class="hljs-params">(PyObject *callable_object, PyObject *args, PyObject *kw)</span></span>;<br><br>v0 = PyTuple_Pack(<span class="hljs-number">1LL</span>, __pyx_kp_s_This_is_myfunc1); <span class="hljs-comment">// args</span><br>v2 = PyObject_GetAttr(__pyx_b, __pyx_n_s_print) <span class="hljs-comment">// __pyx_b -&gt; PyImport_AddModule(&quot;builtins&quot;);</span><br>PyObject_Call(v2, v1, <span class="hljs-number">0LL</span>)<br></code></pre></td></tr></table></figure><h2 id="test-variables-分析"><a href="#test-variables-分析" class="headerlink" title="test_variables() 分析"></a>test_variables() 分析</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">myfunc1</span>():</span><br>    print(<span class="hljs-string">&quot;This is myfunc1.&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++">v0 = __pyx_kp_s_variables_test; <span class="hljs-comment">// 引用字符串</span><br>x = PyLong_FromLong(<span class="hljs-number">5LL</span>);<br><br><span class="hljs-comment">// 调用 print</span><br>args = PyTuple_Pack(<span class="hljs-number">1LL</span>, x);<br>v6 = PyObject_GetAttr(__pyx_b, __pyx_n_s_print);<br>PyObject_Call(v6, args, <span class="hljs-number">0LL</span>);<br></code></pre></td></tr></table></figure><h2 id="test-global-var-分析"><a href="#test-global-var-分析" class="headerlink" title="test_global_var() 分析"></a>test_global_var() 分析</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_global_var</span>():</span><br>    <span class="hljs-keyword">global</span> gy<br>    print(gy)<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++">v0 = PyObject_GetAttr(__pyx_b, __pyx_n_s_gy); <span class="hljs-comment">// 从当前模块查找globals</span><br><br><span class="hljs-comment">// 调用 print</span><br>v1 = PyTuple_Pack(<span class="hljs-number">1LL</span>, v0);<br>v3 = PyObject_GetAttr(__pyx_b, __pyx_n_s_print);<br>PyObject_Call(v3, v2, <span class="hljs-number">0LL</span>);<br></code></pre></td></tr></table></figure><h2 id="test-numbers-分析"><a href="#test-numbers-分析" class="headerlink" title="test_numbers() 分析"></a>test_numbers() 分析</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_numbers</span>():</span><br>    x = <span class="hljs-number">123</span><br>    y = <span class="hljs-number">12.3</span><br>    z = <span class="hljs-number">0x112233445566778899AABBCCDD</span><br>    print(x, y, z)<br></code></pre></td></tr></table></figure><p>print 三个参数，构造元组。<br>decompiler 识别出来的数据结构有问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs asm">mov     edi, 3          ; size<br>call    _PyTuple_New<br>mov     [rax+18h], r12  ; 123<br>mov     [rax+20h], r15  ; 12.3<br>mov     [rax+28h], r14  ; 0x112233445566778899AABBCCDD<br></code></pre></td></tr></table></figure><p>这段代码也可以看出 Tuple 构造方法</p><h2 id="test-if-分析"><a href="#test-if-分析" class="headerlink" title="test_if() 分析"></a>test_if() 分析</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_if</span>(<span class="hljs-params">x</span>):</span><br>    <span class="hljs-keyword">if</span> x &gt; <span class="hljs-number">456</span>:<br>        print(<span class="hljs-string">&quot;x &gt; 456&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        print(<span class="hljs-string">&quot;x &lt;= 456&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++">v2 = PyObject_RichCompare(a2, __pyx_int_456, <span class="hljs-number">4</span>);<br>v5 = PyObject_IsTrue(v2);<br><span class="hljs-keyword">if</span> ( v5 )<br>    <span class="hljs-keyword">goto</span> LABEL_8;<br><span class="hljs-keyword">goto</span> LABEL_13;<br><br>LABEL_8 =&gt; 输出  x  &gt; <span class="hljs-number">456</span><br>LABEL_13 =&gt; 输出 x &lt;= <span class="hljs-number">456</span><br></code></pre></td></tr></table></figure><h2 id="test-for-分析"><a href="#test-for-分析" class="headerlink" title="test_for() 分析"></a>test_for() 分析</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_for</span>():</span><br>    s = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">101</span>):<br>        s = s + i<br>    print(s)<br></code></pre></td></tr></table></figure><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs smali">v3 = PyLong_FromLong(0<span class="hljs-class">LL);</span><br>v0 = __pyx_int_0;<br>v2 = 0<br>while ( 1 ) &#123;<br>v0 = PyNumber_Add(v0, v3);<br>++v2;<br><span class="hljs-built_in">if </span>( v2 &gt;= 101 )<br>       break;<br>   v3 = PyLong_FromLong(v2);<br>&#125;<br><span class="hljs-keyword">.</span>.... print 代码忽略 ......<br></code></pre></td></tr></table></figure><p>range(101) 直接翻译成等价最优形式了。</p><h2 id="test-string-分析"><a href="#test-string-分析" class="headerlink" title="test_string() 分析"></a>test_string() 分析</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_string</span>():</span><br>    x = <span class="hljs-string">&quot;I am str.&quot;</span><br>    y = <span class="hljs-built_in">len</span>(x)<br>    z = x[<span class="hljs-number">1</span>]<br>    w = x[<span class="hljs-number">2</span>:]<br>    print(x, y, z, w)<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;am&quot;</span> <span class="hljs-keyword">in</span> x:<br>        print(<span class="hljs-string">&quot;yes&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        print(<span class="hljs-string">&quot;wrong&quot;</span>)<br></code></pre></td></tr></table></figure><p>下标访问  <code> z = x[1]</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++">v0 = __pyx_kp_s_I_am_str;<br><br>item = (v4-&gt;sq_item)(v0, <span class="hljs-number">1LL</span>); <span class="hljs-comment">// sq_item 访问下标 PyObject* PySequence_GetItem(PyObject *o, Py_ssize_t i)</span><br>或者<br>v31 = PyLong_FromSsize_t(<span class="hljs-number">1LL</span>);<br>item = PyObject_GetItem(v0, v31);<br><br></code></pre></td></tr></table></figure><p>切片访问  w = x[2:]</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++">v0 = __pyx_kp_s_I_am_str;<br>__pyx_slice__2 = PySlice_New(__pyx_int_2, &amp;_Py_NoneStruct, &amp;_Py_NoneStruct);<br>v6 = (v0-&gt;ob_type-&gt;tp_as_mapping-&gt;mp_subscript)(v0, __pyx_slice__2);<br></code></pre></td></tr></table></figure><p><code>in</code> 关键字</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">v10</span> = PySequence_Contains(v1, __pyx_n_s_am)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h2 id="test-list-分析"><a href="#test-list-分析" class="headerlink" title="test_list() 分析"></a>test_list() 分析</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_list</span>():</span><br>    x = <span class="hljs-built_in">list</span>()<br>    x.append(<span class="hljs-number">1</span>)<br>    x.append(<span class="hljs-number">2</span>)<br>    x.append(<span class="hljs-number">3</span>)<br>    x.append(<span class="hljs-number">4</span>)<br>    x.append(<span class="hljs-string">&quot;five&quot;</span>)<br>    print(x)<br>    print(<span class="hljs-built_in">len</span>(x))<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> x:<br>        print(i)<br>    x = x[<span class="hljs-number">1</span>:]<br>    x[<span class="hljs-number">2</span>:<span class="hljs-number">4</span>] = [<span class="hljs-number">22</span>, <span class="hljs-number">33</span>]<br></code></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs asm">v0 &#x3D; PyList_New(0LL);<br>PyList_Append(v1, __pyx_int_1);<br>PyList_Append(v1, __pyx_int_2);<br>......<br>PyList_Append(v1,  __pyx_n_s_five);<br><br>; for i in x: <br>;     print(i)<br>mov     rax, [rbx+18h]    &#x2F;&#x2F; 列表开始<br>mov     r15, [rax+r12*8]  &#x2F;&#x2F; r12 下标<br><br>; x &#x3D; x[1:]<br>call    _PyList_New<br>mov     rcx, rax<br>mov     rax, [rbp+var_38] ; var_38 是原来的 x<br>mov     r12, [rax+18h] ; 第一个 PyObect * 地址<br>lea     rsi, [r12+8] ; [1:] 跳过一个元素<br>mov     rdi, [rcx+18h]  ; __dst<br>lea     r15, [r13-1]<br>lea     rdx, ds:0[r15*8] ; __n r15 复制的元素的个数<br>call    _memcpy<br><br>;x[2:4] &#x3D; [22, 33]<br>;构造 [22, 33]<br>mov     edi, 2<br>call    _PyList_New<br>mov     r13, rax<br>mov     rax, cs:___pyx_int_22<br>mov     rcx, [r13+18h]<br>mov     [rcx], rax<br>mov     rax, cs:___pyx_int_33<br>mov     rcx, [r13+18h]<br>mov     [rcx+8], rax<br>mov     [rbp+var_40], rcx<br>; x[2:4] &#x3D; <br><br>;创建切片<br>mov     edi, 2          ; r12 &#x3D; _PyLong_FromSsize_t(2)<br>call    _PyLong_FromSsize_t<br>mov     r12, rax<br>mov     edi, 4          ; r15 &#x3D; _PyLong_FromSsize_t(4)<br>call    _PyLong_FromSsize_t<br>mov     r15, rax<br>mov     r13, cs:__Py_NoneStruct_ptr<br>mov     rdi, r12        ; start: 2<br>mov     rsi, rax        ; stop : 4<br>mov     rdx, r13        ; step __Py_NoneStruct_ptr<br>call    _PySlice_New<br>mov     [rbp+var_48], rax<br><br>;给切片赋值<br>mov r12, [rbp+var_48]<br>mov     rdi, rbx   ;o<br>mov     rsi, r12   ;key, 切片<br>mov     rdx, [rbp+var_38] ;v<br>mov     rax, [rbp+var_40]<br>call    qword ptr [rax+10h] ;mp_ass_subscript int PyObject_SetItem(PyObject *o, PyObject *key, PyObject *v)<br><br><br><br></code></pre></td></tr></table></figure><h2 id="test-dict-分析"><a href="#test-dict-分析" class="headerlink" title="test_dict() 分析"></a>test_dict() 分析</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_dict</span>():</span><br>    x = &#123;&#125;<br>    x[<span class="hljs-string">&quot;one&quot;</span>] = <span class="hljs-number">1</span><br>    x[<span class="hljs-string">&quot;two&quot;</span>] = <span class="hljs-number">2</span><br>    x[<span class="hljs-string">&quot;three&quot;</span>] = <span class="hljs-number">3</span><br>    y = x[<span class="hljs-string">&quot;one&quot;</span>]<br>    z = x[<span class="hljs-string">&quot;two&quot;</span>]<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;one&quot;</span> <span class="hljs-keyword">in</span> x:<br>        print(y)<br><br>    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> x:<br>        print(k, x[k])<br></code></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs asm">; x &#x3D; &#123;&#125;<br>call    _PyDict_New<br>mov rbx, rax ; rbx &#x3D;&gt; x PyObject *<br><br>;  x[&quot;one&quot;] &#x3D; 1<br>mov     rsi, cs:___pyx_n_s_one ; key<br>mov     rdx, cs:___pyx_int_1 ; v<br>mov     rdi, rbx        ; o<br>call    _PyDict_SetItem ;int PyObject_SetItem(PyObject *o, PyObject *key, PyObject *v)<br><br>; x[&quot;two&quot;] &#x3D; 2<br>mov     rsi, cs:___pyx_n_s_two ; key<br>mov     rdx, cs:___pyx_int_2 ; item<br>mov     rdi, rbx        ; mp<br>call    _PyDict_SetItem<br><br>; x[&quot;three&quot;] &#x3D; 3<br>mov     rsi, cs:___pyx_n_s_three ; key<br>mov     rdx, cs:___pyx_int_3 ; item<br>mov     rdi, rbx        ; mp<br>call    _PyDict_SetItem<br><br>;  y &#x3D; x[&quot;one&quot;]<br>mov     rsi, cs:___pyx_n_s_one<br>mov     rdi, rbx<br>call    ___Pyx_PyDict_GetItem<br>mov     [rbp+var_40], rax<br><br>;  z &#x3D; x[&quot;two&quot;]<br>mov     rsi, cs:___pyx_n_s_two<br>mov     rdi, rbx<br>call    ___Pyx_PyDict_GetItem<br>mov     [rbp+var_38], rax<br><br>; if &quot;one&quot; in x<br>mov     rsi, cs:___pyx_n_s_one ; key<br>mov     rdi, rbx        ; mp<br>call    _PyDict_Contains ; key in mp retrun 1, not in return 0, error: -1<br><br><br>; for k in x<br>loop_start:<br>mov     rdi, rbx        ; o<br>lea     rsi, [rbp+pos]  ; pos<br>lea     rdx, [rbp+key]  ; key<br>lea     rcx, [rbp+value] ; value<br>call    _PyDict_Next ; int PyDict_Next(PyObject *p, Py_ssize_t *ppos, PyObject **pkey, PyObject **pvalue)<br>.......<br>call    ___Pyx_PyDict_GetItem<br>.......<br>call    _PyTuple_New<br>.....<br>call    _PyTuple_Pack<br>....<br>call print.<br>.....<br>call    _PyDict_Size<br>......<br></code></pre></td></tr></table></figure><h2 id="test-datetime-分析"><a href="#test-datetime-分析" class="headerlink" title="test_datetime () 分析"></a>test_datetime () 分析</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_datetime</span>():</span><br>    x = datetime.datetime.now()<br>    print(x)<br></code></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs asm">mov     rbx, cs:___pyx_n_s_datetime<br>mov     rdx, [rbx+18h]<br>mov     rsi, rbx<br>call    __PyDict_GetItem_KnownHash<br>mov     r15, rax<br><br>mov     rsi, cs:___pyx_n_s_datetime<br>mov     rdi, r15        ; PyObject *<br>call    _PyObject_GetAttr<br>mov     rbx, rax<br><br>mov     rsi, cs:___pyx_n_s_now ;now<br>mov     rdi, rbx<br>call    _PyObject_GetAttr<br>mov     r15, rax<br><br>mov     rsi, cs:___pyx_empty_tuple<br>mov     rdi, r15        ; callable_object<br>call    ___Pyx_PyObject_Call<br><br>........ print(x) 略 ........<br></code></pre></td></tr></table></figure><h2 id="test-format-分析"><a href="#test-format-分析" class="headerlink" title="test_format() 分析"></a>test_format() 分析</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_format</span>():</span><br>    x = <span class="hljs-number">1</span><br>    y = <span class="hljs-string">&quot;One&quot;</span><br>    z = <span class="hljs-string">&quot;%s is %d&quot;</span> % (y, x)<br>    print(z)<br></code></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs asm">mov     r14, cs:___pyx_n_s_One<br>mov     edi, 1          ; __int64<br>call    _PyLong_FromLong<br>mov     r15, rax ; r15 &#x3D; _PyLong_FromLong(1)<br>mov     edi, 2          ; size<br>call    _PyTuple_New<br>mov     rbx, rax<br>mov     [rax+18h], r14 ; &quot;One&quot;<br>mov     [rax+20h], r15 ; 1<br><br>mov     rdi, cs:___pyx_kp_s_s_is_d ; %s is %d<br>mov     rsi, rax                   ; Tuple(&quot;One&quot;, 1)<br>call    _PyUnicode_Format<br><br></code></pre></td></tr></table></figure><h2 id="dump-PyObject"><a href="#dump-PyObject" class="headerlink" title="dump PyObject *"></a>dump PyObject *</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs asm">.text:00007FFBC501B615 mov     rcx, rbx<br>.text:00007FFBC501B618 call    python38_PyObject_Str          <br>.text:00007FFBC501B618                                       <br>.text:00007FFBC501B61D mov     rcx, rax<br>.text:00007FFBC501B620 call    python38_PyUnicode_AsUTF8<br></code></pre></td></tr></table></figure><p>这样就可以得到 PyObject * 的字符串 dump 信息。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// frida -pid xxx</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">DumpPyObject</span>(<span class="hljs-params">address</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (Process.arch === <span class="hljs-string">&quot;x64&quot;</span>) &#123;<br>        <span class="hljs-keyword">var</span> native_address = <span class="hljs-keyword">new</span> NativePointer(address);<br>        <span class="hljs-keyword">var</span> <span class="hljs-built_in">module</span> = Process.findModuleByName(<span class="hljs-string">&quot;python38.dll&quot;</span>);<br>        <span class="hljs-keyword">var</span> PyObject_Str = <span class="hljs-keyword">new</span> NativeFunction(<span class="hljs-built_in">module</span>.findExportByName(<span class="hljs-string">&quot;PyObject_Str&quot;</span>), <span class="hljs-string">&quot;pointer&quot;</span>, [<span class="hljs-string">&quot;pointer&quot;</span>], <span class="hljs-string">&quot;win64&quot;</span>);<br>        <span class="hljs-keyword">var</span> PyUnicode_AsUTF8 = <span class="hljs-keyword">new</span> NativeFunction(<span class="hljs-built_in">module</span>.findExportByName(<span class="hljs-string">&quot;PyUnicode_AsUTF8&quot;</span>), <span class="hljs-string">&quot;pointer&quot;</span>, [<span class="hljs-string">&quot;pointer&quot;</span>], <span class="hljs-string">&quot;win64&quot;</span>);<br>        <span class="hljs-keyword">var</span> obj = PyObject_Str(native_address);<br>        <span class="hljs-keyword">var</span> p = PyUnicode_AsUTF8(obj);<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;okkk..&quot;</span>);<br>        <span class="hljs-built_in">console</span>.log(p.readUtf8String());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p>[1] “The Basics of Cython” <a href="https://cython.readthedocs.io/en/latest/src/tutorial/cython_tutorial.html">https://cython.readthedocs.io/en/latest/src/tutorial/cython_tutorial.html</a></p><p>[2] “Object Protocol” <a href="https://docs.python.org/3/c-api/object.html">https://docs.python.org/3/c-api/object.html</a></p><p>[3] “Type Objects” <a href="https://docs.python.org/3/c-api/typeobj.html#c.PySequenceMethods.sq_item">https://docs.python.org/3/c-api/typeobj.html#c.PySequenceMethods.sq_item</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Cython-Reverse-notes&quot;&gt;&lt;a href=&quot;#Cython-Reverse-notes&quot; class=&quot;headerlink&quot; title=&quot;Cython Reverse notes&quot;&gt;&lt;/a&gt;Cython Reverse notes&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="PL_Reverse" scheme="https://panda0s.top/categories/PL-Reverse/"/>
    
    
    <category term="Reverse" scheme="https://panda0s.top/tags/Reverse/"/>
    
    <category term="Python" scheme="https://panda0s.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>go notes</title>
    <link href="https://panda0s.top/2021/05/06/go-notes/"/>
    <id>https://panda0s.top/2021/05/06/go-notes/</id>
    <published>2021-05-06T08:26:05.000Z</published>
    <updated>2021-05-06T08:50:58.022Z</updated>
    
    <content type="html"><![CDATA[<h1 id="go-笔记"><a href="#go-笔记" class="headerlink" title="go 笔记"></a>go 笔记</h1><p>开一篇博客页面记录一下学习 go 过程中的一些小笔记, 遇到新的会继续更新</p><p>[TOC]</p><h2 id="1-编译时删除源码路径"><a href="#1-编译时删除源码路径" class="headerlink" title="1. 编译时删除源码路径"></a>1. 编译时删除源码路径</h2><img src="/2021/05/06/go-notes/image-20210506162809042.png" class="" title="image-20210506162809042"><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">go</span>.<span class="hljs-keyword">exe</span> build -trimpath<br>strip xxx<br></code></pre></td></tr></table></figure><h2 id="2-关闭编译优化"><a href="#2-关闭编译优化" class="headerlink" title="2. 关闭编译优化"></a>2. 关闭编译优化</h2><p>有时候想逆向一些语言特性的时候，最好关掉编译优化</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">-gcflags <span class="hljs-string">&quot;-N -l&quot;</span><br>比如: <span class="hljs-keyword">go</span> build -<span class="hljs-keyword">o</span> hw.<span class="hljs-keyword">exe</span> -gcflags <span class="hljs-string">&quot;-N -l&quot;</span> HelloWorld.<span class="hljs-keyword">go</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;go-笔记&quot;&gt;&lt;a href=&quot;#go-笔记&quot; class=&quot;headerlink&quot; title=&quot;go 笔记&quot;&gt;&lt;/a&gt;go 笔记&lt;/h1&gt;&lt;p&gt;开一篇博客页面记录一下学习 go 过程中的一些小笔记, 遇到新的会继续更新&lt;/p&gt;
&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2</summary>
      
    
    
    
    <category term="develop" scheme="https://panda0s.top/categories/develop/"/>
    
    
    <category term="golang" scheme="https://panda0s.top/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>Cluster notes</title>
    <link href="https://panda0s.top/2021/04/23/Cluster-notes/"/>
    <id>https://panda0s.top/2021/04/23/Cluster-notes/</id>
    <published>2021-04-23T08:07:26.000Z</published>
    <updated>2021-04-23T08:58:51.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="聚类"><a href="#聚类" class="headerlink" title="聚类"></a>聚类</h1><p>简单记录一下聚类。</p><p>无监督学习：训练集没有标签，聚类就是一个典型的无监督学习应用。</p><img src="/2021/04/23/Cluster-notes/image-20210423162155480.png" class="" title="image-20210423162155480"><p>聚类算法可以把上图分类两个簇。</p><h2 id="K-Means-算法"><a href="#K-Means-算法" class="headerlink" title="K-Means 算法"></a>K-Means 算法</h2><p><strong>K-Means</strong> 是最普及的聚类算法，算法接受一个未标记的数据集，然后将数据聚类成不同的组。K-Means算法的思想很简单，对于给定的样本集，按照样本之间的距离大小，将样本集划分为K个簇。让簇内的点尽量紧密的连在一起，而让簇间的距离尽量的大。</p><p>例如我们想将数据分成 k 个分组，k-means 算法首先选择 k 个随机点，这 k 个随机点称为 <strong>聚类中心</strong>（<strong>cluster centroids</strong>）</p><p>每一个聚类中心相当于“分组”的中心，k-means 算法优化目标是最小化所有数据与聚类中心点距离的距离和。</p><p>K-means 算法是一个迭代算法，每一次迭代完成两件事情</p><ul><li>计算每个数据最近的聚类中心，即为聚类中心关联数据（优化目标1）</li><li>用聚类中心关联的数据点平均分布位置更新该聚类中心 （优化目标2）</li></ul><p>k-means 算法优化目标</p><h3 id="优化目标-1"><a href="#优化目标-1" class="headerlink" title="优化目标(1)"></a>优化目标(1)</h3><img src="/2021/04/23/Cluster-notes/image-20210423163657455.png" class="" title="image-20210423163657455"><p>$c^{(i)}$ 是第 i 个样本 $x^{(i)}$ 最近的聚类中心的下标,  $\mu_j$ 是第 j 个聚类中心的向量。</p><p>优化目标(1) 的目标是找一个 j 使得 $x^{(i)}$ 到该聚类中心 $\mu_j$ 的距离最短（换句话讲，就是找到离 $x^{(i)}$ 最近的聚类中心, 并将该聚类中心的下标对应的下标赋值给 $c^{(i)}$）</p><p>通俗点讲，为聚类中心关联数据向量</p><p>优化目标(1)的代码实现</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">idx</span> = <span class="hljs-title">findClosestCentroids</span><span class="hljs-params">(X, centroids)</span></span><br><span class="hljs-comment">%FINDCLOSESTCENTROIDS computes the centroid memberships for every example</span><br><span class="hljs-comment">%   idx = FINDCLOSESTCENTROIDS (X, centroids) returns the closest centroids</span><br><span class="hljs-comment">%   in idx for a dataset X where each row is a single example. idx = m x 1 </span><br><span class="hljs-comment">%   vector of centroid assignments (i.e. each entry in range [1..K])</span><br><span class="hljs-comment">%</span><br><br><span class="hljs-comment">% Set K</span><br>K = <span class="hljs-built_in">size</span>(centroids, <span class="hljs-number">1</span>);<br><br><span class="hljs-comment">% You need to return the following variables correctly.</span><br>idx = <span class="hljs-built_in">zeros</span>(<span class="hljs-built_in">size</span>(X,<span class="hljs-number">1</span>), <span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span> = <span class="hljs-number">1</span>:<span class="hljs-built_in">size</span>(X, <span class="hljs-number">1</span>)<br>    a = <span class="hljs-built_in">zeros</span>(<span class="hljs-built_in">size</span>(centroids));<br>    <span class="hljs-keyword">for</span> <span class="hljs-built_in">j</span> = <span class="hljs-number">1</span>:<span class="hljs-built_in">size</span>(centroids, <span class="hljs-number">1</span>)<br>        a(<span class="hljs-built_in">j</span>, :) = X(<span class="hljs-built_in">i</span>, :);<br>    <span class="hljs-keyword">end</span><br>    distance = sum((a - centroids).^<span class="hljs-number">2</span>, <span class="hljs-number">2</span>);<br>    [~, idx(<span class="hljs-built_in">i</span>)] = <span class="hljs-built_in">min</span>(distance);<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">% =============================================================</span><br><span class="hljs-keyword">end</span><br><br><br></code></pre></td></tr></table></figure><h3 id="优化目标-2"><a href="#优化目标-2" class="headerlink" title="优化目标(2)"></a>优化目标(2)</h3><img src="/2021/04/23/Cluster-notes/image-20210423164317870.png" class="" title="image-20210423164317870"><p>优化目标(2) 的作用是优化聚类中心。 $\mu_k$ 表示聚类中心，$C_k$ 是一个集合，用来记录聚类中心 k 对应的关联数据的集合，$|C_k|$ 是集合中元素的个数。</p><p>优化目标(2) 的代码实现</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">centroids</span> = <span class="hljs-title">computeCentroids</span><span class="hljs-params">(X, idx, K)</span></span><br><span class="hljs-comment">%COMPUTECENTROIDS returns the new centroids by computing the means of the </span><br><span class="hljs-comment">%data points assigned to each centroid.</span><br><span class="hljs-comment">%   centroids = COMPUTECENTROIDS(X, idx, K) returns the new centroids by </span><br><span class="hljs-comment">%   computing the means of the data points assigned to each centroid. It is</span><br><span class="hljs-comment">%   given a dataset X where each row is a single data point, a vector</span><br><span class="hljs-comment">%   idx of centroid assignments (i.e. each entry in range [1..K]) for each</span><br><span class="hljs-comment">%   example, and K, the number of centroids. You should return a matrix</span><br><span class="hljs-comment">%   centroids, where each row of centroids is the mean of the data points</span><br><span class="hljs-comment">%   assigned to it.</span><br><span class="hljs-comment">%</span><br><br><span class="hljs-comment">% Useful variables</span><br>[m n] = <span class="hljs-built_in">size</span>(X);<br><br><span class="hljs-comment">% You need to return the following variables correctly.</span><br>centroids = <span class="hljs-built_in">zeros</span>(K, n);<br><br>sums = <span class="hljs-built_in">zeros</span>(K, n);<br>sums_counter = <span class="hljs-built_in">zeros</span>(<span class="hljs-built_in">size</span>(idx, <span class="hljs-number">1</span>), <span class="hljs-number">1</span>);<br><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">j</span> = <span class="hljs-number">1</span> : <span class="hljs-built_in">size</span>(idx, <span class="hljs-number">1</span>)<br>    sums(idx(<span class="hljs-built_in">j</span>), :) = sums(idx(<span class="hljs-built_in">j</span>), :) + X(<span class="hljs-built_in">j</span>, :);<br>    sums_counter(idx(<span class="hljs-built_in">j</span>)) = sums_counter(idx(<span class="hljs-built_in">j</span>)) + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span> = <span class="hljs-number">1</span> : <span class="hljs-built_in">size</span>(sums, <span class="hljs-number">1</span>)<br>    sums(<span class="hljs-built_in">i</span>, :) = sums(<span class="hljs-built_in">i</span>, :) ./ sums_counter(<span class="hljs-built_in">i</span>);<br><span class="hljs-keyword">end</span><br><br>centroids = sums;<br><br><span class="hljs-comment">% =============================================================</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h3 id="随机初始化聚类中心"><a href="#随机初始化聚类中心" class="headerlink" title="随机初始化聚类中心"></a>随机初始化聚类中心</h3><p>k-means 结果对于初始的聚类中心选择非常敏感，在运行 k-means 算法之前，我们应该选择随机的聚类中心。一般随机选择 k 个数据点作为聚类中心。多次用随机初始化的聚类中心运行 k-means 算法，选择误差最小的为最优模型。这样可以避免迭代算法达到局部最优解。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;聚类&quot;&gt;&lt;a href=&quot;#聚类&quot; class=&quot;headerlink&quot; title=&quot;聚类&quot;&gt;&lt;/a&gt;聚类&lt;/h1&gt;&lt;p&gt;简单记录一下聚类。&lt;/p&gt;
&lt;p&gt;无监督学习：训练集没有标签，聚类就是一个典型的无监督学习应用。&lt;/p&gt;
&lt;img src=&quot;/2021/0</summary>
      
    
    
    
    <category term="ml" scheme="https://panda0s.top/categories/ml/"/>
    
    
    <category term="notes" scheme="https://panda0s.top/tags/notes/"/>
    
    <category term="homework" scheme="https://panda0s.top/tags/homework/"/>
    
  </entry>
  
  <entry>
    <title>红明谷杯2021:Reverse</title>
    <link href="https://panda0s.top/2021/04/15/%E7%BA%A2%E6%98%8E%E8%B0%B7%E6%9D%AF2021-Reverse/"/>
    <id>https://panda0s.top/2021/04/15/%E7%BA%A2%E6%98%8E%E8%B0%B7%E6%9D%AF2021-Reverse/</id>
    <published>2021-04-15T05:05:55.000Z</published>
    <updated>2021-04-22T12:57:36.869Z</updated>
    
    <content type="html"><![CDATA[<h1 id="红明谷杯2021-Reverse"><a href="#红明谷杯2021-Reverse" class="headerlink" title="红明谷杯2021:Reverse"></a>红明谷杯2021:Reverse</h1><h2 id="g0"><a href="#g0" class="headerlink" title="g0"></a>g0</h2><p>golang 逆向题</p><h3 id="1-flag-长度-：-0x14"><a href="#1-flag-长度-：-0x14" class="headerlink" title="1. flag 长度 ： 0x14"></a>1. flag 长度 ： 0x14</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asm">call    fmt_Fscanf<br>mov     rax, [rsp+0A8h]<br>mov     rcx, [rax]<br>cmp     qword ptr [rax+8], 14h<br></code></pre></td></tr></table></figure><p>数据变化  null -&gt; AABBCCDDEEFFGGHHIIJJ</p><h3 id="2-Flag-乱序"><a href="#2-Flag-乱序" class="headerlink" title="2. Flag 乱序"></a>2. Flag 乱序</h3><p>测试输入：AABBCCDDEEFFGGHHIIJJ<br>乱序输出：CDDEEHIIJJFFGGHAABBC<br>还原时，对照位置还原即可。<br>数据变化: AABBCCDDEEFFGGHHIIJJ -&gt; CDDEEHIIJJFFGGHAABBC</p><h3 id="3-调用-main-Encode-对乱序结果编码"><a href="#3-调用-main-Encode-对乱序结果编码" class="headerlink" title="3. 调用 main_Encode 对乱序结果编码"></a>3. 调用 main_Encode 对乱序结果编码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asm">.text:00000000004CD3A5 mov     [rsp+0E0h+var_E0], rax ; slice.data<br>.text:00000000004CD3A9 mov     [rsp+0E0h+var_D8], rcx ; slice.len<br>.text:00000000004CD3AE mov     [rsp+0E0h+var_D0], rdx ; slice.cap<br>.text:00000000004CD3B3 call    main_Encode<br></code></pre></td></tr></table></figure><p>由调用时参数推断 main_Encode 传入的参数是 []string, 即 golang 的 slice 切片类型。<br>数据变化: CDDEEHIIJJFFGGHAABBC -&gt; jKbWKuiRNZVR9xFNfdv41ptrx85</p><h3 id="4-比较"><a href="#4-比较" class="headerlink" title="4. 比较"></a>4. 比较</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asm">.text:00000000004CD58D mov     [rsp+58h+var_50], rcx<br>.text:00000000004CD592 mov     [rsp+58h+var_48], rax<br>.text:00000000004CD597 call    runtime_memequal<br></code></pre></td></tr></table></figure><p>数据变化: 2GVdudkYo2CBXoQii7gfpkjTc4gT 与 jKbWKuiRNZVR9xFNfdv41ptrx85 比较</p><p>-&gt; 2GVdudkYo2CBXoQii7gfpkjTc4gT 反推输入。</p><h3 id="5-main-Encode-流程"><a href="#5-main-Encode-流程" class="headerlink" title="5. main_Encode 流程"></a>5. main_Encode 流程</h3><h4 id="5-1-math-big-nat-setBytes"><a href="#5-1-math-big-nat-setBytes" class="headerlink" title="5.1 math_big_nat_setBytes"></a>5.1 math_big_nat_setBytes</h4><p>将输入字符串作为大整数（大端序，可以写个go测试）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asm">call    math_big_nat_setBytes<br></code></pre></td></tr></table></figure><p>x = math_big_nat_setBytes(intputflag)</p><h4 id="5-2-循环"><a href="#5-2-循环" class="headerlink" title="5.2 循环"></a>5.2 循环</h4><p>循环条件： math_big__ptr_Int_Cmp(x, 0) 即 x &gt; 0 才循环</p><p>循环体流程：<br>调用 math_big__ptr_Int_DivMod </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(z *Int)</span> <span class="hljs-title">DivMod</span><span class="hljs-params">(x, y, m *Int)</span> <span class="hljs-params">(*Int, *Int)</span></span> <br></code></pre></td></tr></table></figure><p>4个参数，在call math_big__ptr_Int_DivMod 程序点，栈数据如下:<br>rsp -&gt; z<br>rsp + 0x8 -&gt; x<br>rsp + 0x10 -&gt; y<br>rsp + 0x18 -&gt; m</p><p>rsp + 0x20 -&gt; 返回值1: x div y<br>rsp + 0x28 -&gt; 返回值2: x mod y</p><p>z,x,y,m 的类型都是指向 Int 结构体的指针 *Int<br>Int 结构体定义如下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Int <span class="hljs-keyword">struct</span> &#123;<br>neg <span class="hljs-keyword">bool</span> <span class="hljs-comment">// sign</span><br>abs nat  <span class="hljs-comment">// absolute value of the integer</span><br>&#125;<br><span class="hljs-keyword">type</span> nat []Word<br></code></pre></td></tr></table></figure><p>64位 golang 中 Word 代表的是一个64位整数， nat 就是整数的切片数组。</p><p>这些定义对寻找数据很有帮助!</p><p>循环代码类似:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">x = flag<br>table = <span class="hljs-string">&#x27;12Nrst6CDquvG7BefghJKLMEFHPQZabRSTUVmyzno89ApwxWXYcdkij345&#x27;</span><br>result = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">while</span> x &gt; <span class="hljs-number">0</span>:<br>result = result + table[x % <span class="hljs-number">58</span>]<br>x = x // <span class="hljs-number">58</span><br></code></pre></td></tr></table></figure><p>应该是 base58 编码换表，根据正向过程手写逆向过程如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">target = <span class="hljs-string">&#x27;2GVdudkYo2CBXoQii7gfpkjTc4gT&#x27;</span><br>table = <span class="hljs-string">&#x27;12Nrst6CDquvG7BefghJKLMEFHPQZabRSTUVmyzno89ApwxWXYcdkij345&#x27;</span><br>c = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> target:<br>    idx = table.find(i)<br>    c = c * <span class="hljs-number">58</span><br>    c = c + idx<br>print(c)<br><span class="hljs-built_in">hex</span>(c) ...再转 ASCII<br></code></pre></td></tr></table></figure><p>We1CT2345}Fc0m_flag 换顺序得到 flag{We1CTFc0m_2345}</p><h2 id="gogogo"><a href="#gogogo" class="headerlink" title="gogogo"></a>gogogo</h2><p>TODO…….</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>[1] “<a href="https://golang.org/src/math/big/int.go&quot;">https://golang.org/src/math/big/int.go&quot;</a><br>[2] “<a href="https://golang.org/src/math/big/nat.go&quot;">https://golang.org/src/math/big/nat.go&quot;</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;红明谷杯2021-Reverse&quot;&gt;&lt;a href=&quot;#红明谷杯2021-Reverse&quot; class=&quot;headerlink&quot; title=&quot;红明谷杯2021:Reverse&quot;&gt;&lt;/a&gt;红明谷杯2021:Reverse&lt;/h1&gt;&lt;h2 id=&quot;g0&quot;&gt;&lt;a hr</summary>
      
    
    
    
    <category term="CTF" scheme="https://panda0s.top/categories/CTF/"/>
    
    
    <category term="Reverse" scheme="https://panda0s.top/tags/Reverse/"/>
    
    <category term="golang" scheme="https://panda0s.top/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>Golang underlying data representaion</title>
    <link href="https://panda0s.top/2021/04/14/Golang-underlying-data-representaion/"/>
    <id>https://panda0s.top/2021/04/14/Golang-underlying-data-representaion/</id>
    <published>2021-04-14T05:09:19.000Z</published>
    <updated>2021-04-14T17:12:10.015Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Golang-underlying-data-representaion"><a href="#Golang-underlying-data-representaion" class="headerlink" title="Golang underlying data representaion"></a>Golang underlying data representaion</h1><p>有些沙雕出题人就是喜欢用 go 来恶心人，做个总结</p><p>简单记录一下 Golang 各种数据类型的存储形式、参数传递、返回值传递等等</p><p>本文的数据均在 64位 环境下得出.</p><p>为了方便观察代码，关掉编译优化</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim">-gcflags <span class="hljs-string">&quot;-N -l&quot;</span><br><br><span class="hljs-keyword">go</span> build -<span class="hljs-keyword">o</span> hw.<span class="hljs-keyword">exe</span> -gcflags <span class="hljs-string">&quot;-N -l&quot;</span> HelloWorld.<span class="hljs-keyword">go</span><br></code></pre></td></tr></table></figure><h2 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h2><p>记住最重要的一点，无论是 x86 还是 x86-64， 都采用栈传递参数，类似 stdcall</p><p>返回值传递不通过 eax/rax 等寄存器，也是通过栈。位置是最后一个参数之上。例如最后一个参数的地址是 <code>rsp + 0x8</code>, 则:</p><ul><li>第一个返回值： rsp + 0x10</li><li>第二个返回值:   rsp + 0x18</li><li>。。。。。。</li></ul><p>返回值（一个或多个）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">testfunc</span><span class="hljs-params">(a <span class="hljs-keyword">int</span>)</span> <span class="hljs-params">(i,j <span class="hljs-keyword">int</span>)</span></span>  &#123;<br>i = a + <span class="hljs-number">1</span><br>j = a + <span class="hljs-number">2</span><br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> a, b <span class="hljs-keyword">int</span><br>a, b = testfunc(<span class="hljs-number">123</span>)<br>a = a + <span class="hljs-number">1</span><br>b = b + <span class="hljs-number">2</span><br>fmt.Println(a, b)<br>&#125;<br></code></pre></td></tr></table></figure><p>调用代码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asm">mov     qword ptr [rsp], 123   ; 参数<br>call    main_testfunc<br>mov     rax, [rsp+8]          ; 返回值1<br>mov     rcx, [rsp+10h]        ; 返回值2<br></code></pre></td></tr></table></figure><h4 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h4><p>方法还有一个额外的参数，可以理解为 this</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">/* 定义结构体 */</span><br><span class="hljs-keyword">type</span> Circle <span class="hljs-keyword">struct</span> &#123;<br>radius <span class="hljs-keyword">float64</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> c1 Circle<br>c1.radius = <span class="hljs-number">10.00</span><br>fmt.Println(<span class="hljs-string">&quot;area is: &quot;</span>, c1.getArea(<span class="hljs-number">10</span>))<br>&#125;<br><br><span class="hljs-comment">//该 method 属于 Circle 类型对象中的方法</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c Circle)</span> <span class="hljs-title">getArea</span><span class="hljs-params">(cnt <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">float64</span></span> &#123;<br><span class="hljs-comment">//c.radius 即为 Circle 类型对象中的属性</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">3.14</span> * c.radius * c.radius * <span class="hljs-keyword">float64</span>(cnt)<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asm">movsd   qword ptr [rsp], xmm0  ;  Circle struct <br>mov     qword ptr [rsp+8], 0Ah ; 10<br>call    main_Circle_getArea<br>movsd   xmm0, qword ptr [rsp+10h] ; 获取返回值<br></code></pre></td></tr></table></figure><p>可以看出 this 相当于第一个参数。</p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> stringTest = <span class="hljs-string">&quot;flag&#123;&#125;&quot;</span><br></code></pre></td></tr></table></figure><p>内存格式</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">String</span>&#123;</span><br><span class="hljs-keyword">char</span> * strPtr;<br>int64 <span class="hljs-built_in">size</span>;<br>&#125;<br><br>debug060:<span class="hljs-number">000000</span>C0000D9F40 dq offset aFlagListenobje               ; <span class="hljs-string">&quot;flag&#123;&#125;&quot;</span><br>debug060:<span class="hljs-number">000000</span>C0000D9F48 dq <span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><h2 id="Slice-切片"><a href="#Slice-切片" class="headerlink" title="Slice 切片"></a>Slice 切片</h2><h3 id="make"><a href="#make" class="headerlink" title="make"></a>make</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">slice1 := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>, <span class="hljs-built_in">len</span>)<br></code></pre></td></tr></table></figure><p>make 函数是一个 builtin 函数，貌似由编译器处理？ </p><p>slice 结构</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">struct</span> slice &#123;<br><span class="hljs-attribute">dq</span>    dataPtr;<br><span class="hljs-attribute">dq</span>  len;<br><span class="hljs-attribute">dq</span>  cap;<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2021/04/14/Golang-underlying-data-representaion/image-20210414151420839.png" class="" title="image-20210414151420839"><p>slice 结构构造代码由编译器生成，相当于内联 inline make 函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs asm">go:<br>slice1 :&#x3D; make([]int, len)<br><br>asm:<br>call    runtime_makeslice<br>mov     [rsp+28h], rdx &#x2F;&#x2F; rdx &#x3D; makeslice 创建的数组基地址<br>mov     [rsp+30h], rax &#x2F;&#x2F; rax &#x3D; len<br>mov     [rsp+38h], rcx &#x2F;&#x2F; rcx &#x3D; cap<br></code></pre></td></tr></table></figure><p>make 最底层调用 runtime_makeslice 分配 Array</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// runtime_makeslice</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">makeslice</span><span class="hljs-params">(et *_type, <span class="hljs-built_in">len</span>, <span class="hljs-built_in">cap</span> <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">unsafe</span>.<span class="hljs-title">Pointer</span></span> &#123;<br>mem, overflow := math.MulUintptr(et.size, <span class="hljs-keyword">uintptr</span>(<span class="hljs-built_in">cap</span>))<br><span class="hljs-keyword">if</span> overflow || mem &gt; maxAlloc || <span class="hljs-built_in">len</span> &lt; <span class="hljs-number">0</span> || <span class="hljs-built_in">len</span> &gt; <span class="hljs-built_in">cap</span> &#123;<br><span class="hljs-comment">// <span class="hljs-doctag">NOTE:</span> Produce a &#x27;len out of range&#x27; error instead of a</span><br><span class="hljs-comment">// &#x27;cap out of range&#x27; error when someone does make([]T, bignumber).</span><br><span class="hljs-comment">// &#x27;cap out of range&#x27; is true too, but since the cap is only being</span><br><span class="hljs-comment">// supplied implicitly, saying len is clearer.</span><br><span class="hljs-comment">// See golang.org/issue/4085.</span><br>mem, overflow := math.MulUintptr(et.size, <span class="hljs-keyword">uintptr</span>(<span class="hljs-built_in">len</span>))<br><span class="hljs-keyword">if</span> overflow || mem &gt; maxAlloc || <span class="hljs-built_in">len</span> &lt; <span class="hljs-number">0</span> &#123;<br>panicmakeslicelen()<br>&#125;<br>panicmakeslicecap()<br>&#125;<br><br><span class="hljs-keyword">return</span> mallocgc(mem, et, <span class="hljs-literal">true</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>makeslice 返回的是一个指向实际数据的指针（不含管理slice的结构体）相当于  <code>malloc(sizeof(Type) * len)</code></p><p>在访问slice中元素时，一般会检测下标是否小于len, 如果越界则调用<code>runtime_panicIndex</code></p><h3 id="append-copy"><a href="#append-copy" class="headerlink" title="append / copy"></a>append / copy</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">slice1 = <span class="hljs-built_in">append</span>(slice1, <span class="hljs-number">123</span>)<br></code></pre></td></tr></table></figure><p>append 的时候会检测目标 slice1.len + 1 与 slice1.cap 的大小关系</p><p>若 slice1.len + 1 &gt; slice1.cap 则调用 runtime_growslice 扩容</p><p>copy 就是复制一个新的切片</p><h3 id="切片截取"><a href="#切片截取" class="headerlink" title="切片截取"></a>切片截取</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">myvar := slice1[<span class="hljs-number">1</span>:<span class="hljs-number">20</span>]<br></code></pre></td></tr></table></figure><p>myvar 的数据结构是新一个新的切片 struct.<br>myvar.dataPtr = &amp;slice1.dataPtr[1]<br>myvar.len = 20 - 1<br>myvar.cap = slice1.cap - 1<br>dataPtr 相当于传的一个引用</p><h2 id="range"><a href="#range" class="headerlink" title="range"></a>range</h2><p>略，不会调用新函数，逻辑比较简单，佷容易理解</p><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><h3 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h3><p>runtime_mapassign_*</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">mapassign</span><span class="hljs-params">(t *maptype, h *hmap, key unsafe.Pointer)</span> <span class="hljs-title">unsafe</span>.<span class="hljs-title">Pointer</span></span>&#123;&#125;<br></code></pre></td></tr></table></figure><p>3个参数，第三个参数是key的指针，rsp + 0x8 * 2， 返回值是 key 对应的数据指针.</p><h3 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">mapaccess1</span><span class="hljs-params">(t *maptype, h *hmap, key unsafe.Pointer)</span> <span class="hljs-title">unsafe</span>.<span class="hljs-title">Pointer</span></span> &#123;&#125;<br></code></pre></td></tr></table></figure><p>和赋值同理，区别是这个不会为不存在的 key 创建 key pair.</p><h2 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>        <span class="hljs-string">&quot;fmt&quot;</span><br>        <span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">say</span><span class="hljs-params">(s <span class="hljs-keyword">string</span>)</span></span> &#123;<br>        <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++ &#123;<br>                time.Sleep(<span class="hljs-number">100</span> * time.Millisecond)<br>                fmt.Println(s)<br>        &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>        <span class="hljs-keyword">go</span> say(<span class="hljs-string">&quot;world&quot;</span>)<br>        say(<span class="hljs-string">&quot;hello&quot;</span>)<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs asm">call    runtime_newproc<br><br>rsp&#x3D;&gt;000000C00010FF58<br><br>debug062:000000C00010FF58 dq 10h    ; rsp here<br>debug062:000000C00010FF60 dq offset off_515DD0      ;pointer to main_say<br>debug062:000000C00010FF68 dq offset aWorld                        ; &quot;world&quot;  这里开始就是参数了<br>debug062:000000C00010FF70 dq 5<br></code></pre></td></tr></table></figure><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><ul><li>convXXX 类似 assert 的功能，逆向时忽略即可</li></ul><p>目前就这么多，以后遇到再补吧。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://www.runoob.com/go/go-slice.html">https://www.runoob.com/go/go-slice.html</a> “Go 语言切片(Slice)”</p><p>[2] <a href="https://golang.org/src/runtime/slice.go">https://golang.org/src/runtime/slice.go</a> “<a href="https://golang.org/src">src</a>/<a href="https://golang.org/src/runtime">runtime</a>/slice.go”</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Golang-underlying-data-representaion&quot;&gt;&lt;a href=&quot;#Golang-underlying-data-representaion&quot; class=&quot;headerlink&quot; title=&quot;Golang underlying da</summary>
      
    
    
    
    <category term="PL_Reverse" scheme="https://panda0s.top/categories/PL-Reverse/"/>
    
    
    <category term="Reverse" scheme="https://panda0s.top/tags/Reverse/"/>
    
    <category term="golang" scheme="https://panda0s.top/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>SSE Instructions</title>
    <link href="https://panda0s.top/2021/04/12/SSE-Instructions/"/>
    <id>https://panda0s.top/2021/04/12/SSE-Instructions/</id>
    <published>2021-04-11T16:46:21.000Z</published>
    <updated>2021-04-12T06:04:31.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SSE-Instructions"><a href="#SSE-Instructions" class="headerlink" title="SSE Instructions"></a>SSE Instructions</h1><p>记录一些 SSE 指令集最基础的东西，经常容易忘。</p><p>一些比较混的概念 SSE、MMX、XMM、SIMD</p><p>SIMD:  Single instruction, multiple data 就是一条指令处理一组数据，描述指令集性质的一个缩写。</p><p>SSE 是 SIMD 指令集，支持同时处理多组数据（整数/浮点），属于 SIMD 指令集。 SSE 进一步升级还有SSE2,SSE3……</p><p>MMX 也是 SIMD 指令集，只不过是以前 IA32 的 SIMD 解决方案，缺点是占用 FPU 寄存器，浮点和 SIMD 不能同时处理，SSE 引入了 XMM 寄存器解决了这个问题。</p><p>SIMD 指令集主要用于多媒体操作吧，比如信号/图像处理，这些处理涉及到大量的矩阵运算。简单说，矩阵基本运算用 for 循环实现真的太拉垮。一般线性代数库就会用平台 SIMD 指令集优化计算算法，这也是为什么 ml 里面的各种公式最好要向量化实现。</p><h2 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h2><p>SSE 最基本的寄存器: XMM0 - XMM7： 128 bit registers</p><p>AMD64 (x86-64) / IA64: XMM8 - XMM15</p><h2 id="SSE-指令"><a href="#SSE-指令" class="headerlink" title="SSE 指令"></a>SSE 指令</h2><p>指令速查网站:<a href="https://software.intel.com/sites/landingpage/IntrinsicsGuide/">https://software.intel.com/sites/landingpage/IntrinsicsGuide/</a></p><p>本文记录的指令有SSE，SSE2，SSE3</p><p>SSE 指令运算有两种类型 <code>packed</code>和<code>scalar</code></p><p>packed 多组数据一起运算</p><p>scalar 只有一组数据运算(标量运算)（低64/32位）</p><h3 id="Floating-point-instructions"><a href="#Floating-point-instructions" class="headerlink" title="Floating-point instructions"></a>Floating-point instructions</h3><p>内存 Load / Store</p><ul><li>Scalar – <code>MOVSS</code></li><li>Packed – <code>MOVAPS, MOVUPS, MOVLPS, MOVHPS, MOVLHPS, MOVHLPS, MOVMSKPS</code></li><li>MOVAPS，MOVUPS <ul><li>区别：前者要求内存地址 16 字节对齐，后者不需要对齐。</li><li>共同：Load 完整 128 bit</li></ul></li><li><code>movhps</code> - to/from the higher part of <code>xmm</code> register.</li><li><code>movlps</code> - to/from the lower part of <code>xmm</code>.</li><li><code>movhlps</code> - from higher part of source register to lower part of destination register.</li><li><code>movlhps</code> - from lower part of source register to higher part of destination register.</li></ul><p>运算</p><ul><li>Scalar – <code>ADDSS, SUBSS, MULSS, DIVSS, RCPSS, SQRTSS, MAXSS, MINSS, RSQRTSS</code></li><li>Packed – <code>ADDPS, SUBPS, MULPS, DIVPS, RCPPS, SQRTPS, MAXPS, MINPS, RSQRTPS</code></li></ul><p>比较</p><ul><li>Scalar – <code>CMPSS, COMISS, UCOMISS</code></li><li>Packed – <code>CMPPS</code></li></ul><p>数据改组(shuffle/unpacking)</p><ul><li>Packed – <code>SHUFPS, UNPCKHPS, UNPCKLPS</code></li></ul><p>shuffle 机翻译出来就是改组，我也不知道翻译对不对。shuffle 将 XMM 寄存器中元素的顺序改变或者混和两个寄存器的值。</p><p>shufps 指令有 3 个操作数（2个XMM寄存器，8bit的掩码)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">shufps xmm, xmm, imm8<br></code></pre></td></tr></table></figure><p>目的寄存器的前两个元素(低64bit)可以被覆盖成目的寄存器的任意两个元素。</p><p>目的寄存器的第三四元素(高32bit)可以被源寄存器任意两个元素。</p><p>imm8 掩码作用是控制元素的选择，掩码分成 4 组长度为2bit的数据 00 | 00 | 00 | 00，分别控制元素来源的选择。</p><p>00 - src[31:0]</p><p>01 - src[63:32]</p><p>10 - src[95:64]</p><p>11 - src[127:96]</p><p>src 可以是目的寄存器和源寄存器, 取决于目的寄存器中重组的位置。</p><p>intel 给的伪代码很清晰</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs inform7">DEFINE SELECT4(src, control) &#123;<br>CASE(control<span class="hljs-comment">[1:0]</span>) <span class="hljs-keyword">OF</span><br>0:tmp<span class="hljs-comment">[31:0]</span> := src<span class="hljs-comment">[31:0]</span><br>1:tmp<span class="hljs-comment">[31:0]</span> := src<span class="hljs-comment">[63:32]</span><br>2:tmp<span class="hljs-comment">[31:0]</span> := src<span class="hljs-comment">[95:64]</span><br>3:tmp<span class="hljs-comment">[31:0]</span> := src<span class="hljs-comment">[127:96]</span><br>ESAC<br>RETURN tmp<span class="hljs-comment">[31:0]</span><br>&#125;<br>dst<span class="hljs-comment">[31:0]</span> := SELECT4(a<span class="hljs-comment">[127:0]</span>, imm8<span class="hljs-comment">[1:0]</span>)<br>dst<span class="hljs-comment">[63:32]</span> := SELECT4(a<span class="hljs-comment">[127:0]</span>, imm8<span class="hljs-comment">[3:2]</span>)<br>dst<span class="hljs-comment">[95:64]</span> := SELECT4(b<span class="hljs-comment">[127:0]</span>, imm8<span class="hljs-comment">[5:4]</span>)<br>dst<span class="hljs-comment">[127:96]</span> := SELECT4(b<span class="hljs-comment">[127:0]</span>, imm8<span class="hljs-comment">[7:6]</span>)<br></code></pre></td></tr></table></figure><p>数据类型转换</p><p>整数转浮点，浮点转整数</p><ul><li>Scalar – <code>CVTSI2SS, CVTSS2SI, CVTTSS2SI</code>, <code>cvtsi2sd</code>,<code>cvtsd2si</code>,<code>cvttsd2si</code></li><li>Packed – <code>CVTPI2PS, CVTPS2PI, CVTTPS2PI</code></li></ul><ul><li>Integer to float/doubles<ul><li>cvtsi2ss, cvtsi2sd</li></ul></li><li>floats/doubles to integers<ul><li><code>cvtss2si</code> convert 32-bit float to integer, round up/down</li><li><code>cvttss2si</code> convert 32-bit float to integer, truncate result</li><li><code>cvtsd2si</code>  convert 64-bit double to integer, round</li><li><code>cvttsd2si</code> convert 64-bit double to integer, truncate</li></ul></li></ul><ul><li><p>Convert between floats and doubles</p><ul><li><code>cvtss2sd</code> convert 32-bit float to 64-bit double</li><li><code>cvtsd2ss</code> convert 64-bit float to 32-bit float</li></ul></li></ul><p>先说一下命名，例如 <code>CVTSI2SS</code></p><p>CVT + SI + 2 + SS：</p><ul><li>SI: Scalar Integer</li><li>SS: Scalar Single Folat point</li><li>整数转单精度浮点</li></ul><p><code>CVTSS2SI</code> CVT + SS + 2 + SI 即单精度浮点转整数</p><p><code>CVTTSS2SI</code> CVTT + SS + 2 + SI 也是单精度浮点转整数 （Truncation）</p><p>总结一下:</p><ul><li>SS:  标量，单精度浮点</li><li>SI:  标量，整数</li><li>SD: 标量，双精度浮点</li><li>PS: 向量，单精度浮点</li><li>PI：向量，整数</li><li>PD: 向量，双精度</li><li>US: unisgned 无符号</li></ul><p><code>cvt</code> 与 <code>cvtt</code> 有什么区别呢？</p><p> <code>cvt</code> 转换浮点时就近舍去浮点（四舍五入），<code>cvtt</code> 直接舍掉小数点后的数字保留整数部分（c/c++ 默认）</p><p><code>CVTPI2PS</code> CVT + PI + 2 + PS:</p><ul><li>PI： Packed Integer</li><li>PS：  packed Single Float</li></ul><p>逻辑运算</p><ul><li>Packed – <code>ANDPS, ORPS, XORPS, ANDNPS</code></li></ul><p><code>ANDPS</code>: AND + Packed + Single</p><h3 id="Integer-instructions"><a href="#Integer-instructions" class="headerlink" title="Integer instructions"></a>Integer instructions</h3><p>Arithmetic</p><ul><li><code>PADDB</code>, <code>PADDW</code>, <code>PADDD</code>,<code>PADDQ</code>, <code>PADDSB</code>，<code>PADDSB</code></li><li><code>PMULHUW, PSADBW, PAVGB, PAVGW, PMAXUB, PMINUB, PMAXSW, PMINSW</code></li></ul><p><code>PADDSB</code> ：Add packed signed byte integers with saturation</p><p>saturation 是运算比较特殊运行，可以运算将结果限制在某个区间内。</p><p>Data movement</p><ul><li><code>PEXTRW, PINSRW</code></li></ul><p>Other</p><ul><li><code>PMOVMSKB, PSHUFW</code></li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>[1] <a href="https://en.wikipedia.org/wiki/Streaming_SIMD_Extensions">https://en.wikipedia.org/wiki/Streaming_SIMD_Extensions</a> “Streaming SIMD Extensions”</p><p>[2] <a href="https://blog.csdn.net/arau_sh/article/details/6161871">https://blog.csdn.net/arau_sh/article/details/6161871</a> “MMX 和SSE指令集的区别是什么”</p><p>[3] <a href="https://stackoverflow.com/questions/16218665/simd-and-difference-between-packed-and-scalar-double-precision">https://stackoverflow.com/questions/16218665/simd-and-difference-between-packed-and-scalar-double-precision</a> “SIMD and difference between packed and scalar double precision”</p><p>[4] <a href="https://students.mimuw.edu.pl/~zbyszek/asm/en/instrukcje-sse.html">https://students.mimuw.edu.pl/~zbyszek/asm/en/instrukcje-sse.html</a> “SSE Instructions (Streaming SIMD Extensions)”</p><p>[5] <a href="https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_shuffle_ps&amp;expand=5197">https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_shuffle_ps&amp;expand=5197</a> “Intrinsics Guide”</p><p>[6] <a href="https://blog.csdn.net/zp288105109a/article/details/100008264">https://blog.csdn.net/zp288105109a/article/details/100008264</a> “[汇编]汇编学习笔记（4）：SHUFPS（洗牌）指令”</p><p>[6] <a href="https://www.cs.uaf.edu/2012/fall/cs301/lecture/10_26_asm_float.html">https://www.cs.uaf.edu/2012/fall/cs301/lecture/10_26_asm_float.html</a> “CS301: Floating Point in x86 Assembly”</p><p>[7] <a href="https://montcs.bloomu.edu/Presentations/Old/240/16.floating-point-SSE.pdf">https://montcs.bloomu.edu/Presentations/Old/240/16.floating-point-SSE.pdf</a> “Introduction to Scalar FloatingPoint Operations via SSE”</p><p>[8] <a href="https://en.wikipedia.org/wiki/X86_instruction_listings#SSE2_instructions">https://en.wikipedia.org/wiki/X86_instruction_listings#SSE2_instructions</a> “x86 instruction listings” </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SSE-Instructions&quot;&gt;&lt;a href=&quot;#SSE-Instructions&quot; class=&quot;headerlink&quot; title=&quot;SSE Instructions&quot;&gt;&lt;/a&gt;SSE Instructions&lt;/h1&gt;&lt;p&gt;记录一些 SSE 指令集最基</summary>
      
    
    
    
    <category term="Asm" scheme="https://panda0s.top/categories/Asm/"/>
    
    
    <category term="Reverse" scheme="https://panda0s.top/tags/Reverse/"/>
    
    <category term="x86" scheme="https://panda0s.top/tags/x86/"/>
    
  </entry>
  
  <entry>
    <title>LLVM Liveness Analysis</title>
    <link href="https://panda0s.top/2021/04/06/LLVM-Liveness-Analysis/"/>
    <id>https://panda0s.top/2021/04/06/LLVM-Liveness-Analysis/</id>
    <published>2021-04-06T07:38:18.000Z</published>
    <updated>2021-04-06T09:10:47.458Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基于-llvm-实现活跃变量分析"><a href="#基于-llvm-实现活跃变量分析" class="headerlink" title="基于 llvm 实现活跃变量分析"></a>基于 llvm 实现活跃变量分析</h1><h2 id="活跃变量分析"><a href="#活跃变量分析" class="headerlink" title="活跃变量分析"></a>活跃变量分析</h2><p>活跃变量分析是最典型的数据流分析的算法之一，它的作用是确定变量在程序中的活跃性。</p><p>变量在某个程序点有两种状态，<code>live</code> 或 <code>dead</code>。对于变量 x 和程序点 p，判断 x 在点 p 上的值是否会在 CFG 中的某条从点 p 出发的路径中使用。如果是，就说 x 在 p 上 <code>live</code>；否则就说x在p上是 <code>dead</code>。</p><p>活跃变量分析主要作用</p><ol><li>寄存器分配</li><li>死代码删除</li></ol><h2 id="活跃变量计算算法"><a href="#活跃变量计算算法" class="headerlink" title="活跃变量计算算法"></a>活跃变量计算算法</h2><img src="/2021/04/06/LLVM-Liveness-Analysis/image-20210406154854014.png" class="" title="image-20210406154854014"><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><p>整体思路</p><ol><li>单独计算每个基本块的 $use_B$ 与 $def_B$ 集合 （是否可以先把基本块转为DAG形式？）</li><li>后序遍历分析函数的基本块，对每个基本块应用 TransferFunction</li><li>一直迭代，直到 IN 集合不再改变</li></ol><p>细节思路</p><ol><li>集合运算采用 llvm::BitVector 加速分析</li><li>$OUT[B] - def_B$ 位运算等价于 $OUT[B] \And Not(def_B)$</li></ol><h2 id="测试样例程序"><a href="#测试样例程序" class="headerlink" title="测试样例程序"></a>测试样例程序</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sum</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> i;<br>    <span class="hljs-keyword">int</span> res = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (i = a; i &lt; b; i++)<br>    &#123;<br>        res *= i;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> * argv[])</span> </span>&#123;<br>    sum(<span class="hljs-number">1</span>, <span class="hljs-number">100</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>只分析 sum 函数</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-keyword">define</span> <span class="hljs-type">i32</span> <span class="hljs-title">@_Z3sumii</span>(<span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>) <span class="hljs-variable">#0</span> &#123;<br>  <span class="hljs-variable">%3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">alloca</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">alloca</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%5</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">alloca</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%6</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">alloca</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%0</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%3</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%1</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%4</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%6</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%7</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%3</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%7</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%5</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-keyword">br</span> label <span class="hljs-variable">%8</span><br><br><span class="hljs-number">8</span>:                                                <span class="hljs-comment">; preds = %16, %2</span><br>  <span class="hljs-variable">%9</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%5</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%10</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%4</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%11</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">icmp</span> <span class="hljs-keyword">slt</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%9</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%10</span><br>  <span class="hljs-keyword">br</span> <span class="hljs-type">i1</span> <span class="hljs-variable">%11</span><span class="hljs-punctuation">,</span> label <span class="hljs-variable">%12</span><span class="hljs-punctuation">,</span> label <span class="hljs-variable">%19</span><br><br><span class="hljs-number">12</span>:                                               <span class="hljs-comment">; preds = %8</span><br>  <span class="hljs-variable">%test</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">alloca</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span>                     <span class="hljs-comment">; 用于测试活跃性手动添加</span><br>  <span class="hljs-variable">%13</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%5</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%14</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%6</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%15</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">mul</span> <span class="hljs-keyword">nsw</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%14</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%13</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%15</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%6</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-keyword">br</span> label <span class="hljs-variable">%16</span><br><br><span class="hljs-number">16</span>:                                               <span class="hljs-comment">; preds = %12</span><br>  <span class="hljs-variable">%test2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%test</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span>          <span class="hljs-comment">; 用于测试活跃性手动添加</span><br>  <span class="hljs-variable">%17</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%5</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%18</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">add</span> <span class="hljs-keyword">nsw</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%17</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%18</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%5</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-keyword">br</span> label <span class="hljs-variable">%8</span><br><br><span class="hljs-number">19</span>:                                               <span class="hljs-comment">; preds = %8</span><br>  <span class="hljs-variable">%20</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%6</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%aa</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%3</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span>                <span class="hljs-comment">; 用于测试活跃性手动添加</span><br>  <span class="hljs-keyword">ret</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%20</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="映射-BitVec-与定值的关系"><a href="#映射-BitVec-与定值的关系" class="headerlink" title="映射 BitVec 与定值的关系"></a>映射 BitVec 与定值的关系</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InitializeBitVector</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> allocaCounter = <span class="hljs-number">0</span>;<br>    errs() &lt;&lt; <span class="hljs-string">&quot;BitVec map:\n&quot;</span>;<br><br>    <span class="hljs-comment">// 处理函数的参数，给参数分配位向量</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> arg = targetFunc-&gt;arg_begin(); arg != targetFunc-&gt;arg_end(); arg++) &#123;<br>        Value * v = dyn_cast&lt;Value&gt;(arg);<br>        InstBitMap[v] = allocaCounter;<br>        errs() &lt;&lt; allocaCounter &lt;&lt; <span class="hljs-string">&quot;  &quot;</span>;<br>        allocaCounter++;<br>        v-&gt;dump();<br>    &#125;<br><span class="hljs-comment">// 处理所有定值指令</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> bb : <span class="hljs-keyword">this</span>-&gt;bbList) &#123;<br>        <span class="hljs-keyword">for</span>(BasicBlock::iterator insIter = bb-&gt;begin(); insIter != bb-&gt;end(); insIter++) &#123;<br>            Value * v = dyn_cast&lt;Value&gt;(insIter);<br>            <span class="hljs-keyword">if</span> (isDefFocusInst(v)) &#123;<br>                InstBitMap[v] = allocaCounter;<br>                errs() &lt;&lt; allocaCounter;<br>                allocaCounter++;<br>                v-&gt;dump();<br>            &#125;<br>        &#125;<br>    &#125;<br>    ......................<br>&#125;<br><br></code></pre></td></tr></table></figure><p>输出样本如下</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs llvm">BitVec map:<br><span class="hljs-number">0</span>  <span class="hljs-type">i32</span> <span class="hljs-variable">%0</span><br><span class="hljs-number">1</span>  <span class="hljs-type">i32</span> <span class="hljs-variable">%1</span><br><span class="hljs-number">2</span>  <span class="hljs-variable">%test2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%test</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br><span class="hljs-number">3</span>  <span class="hljs-variable">%17</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%5</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br><span class="hljs-number">4</span>  <span class="hljs-variable">%18</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">add</span> <span class="hljs-keyword">nsw</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%17</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><br><span class="hljs-number">5</span>  <span class="hljs-variable">%test</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">alloca</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br><span class="hljs-number">6</span>  <span class="hljs-variable">%13</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%5</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br><span class="hljs-number">7</span>  <span class="hljs-variable">%14</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%6</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br><span class="hljs-number">8</span>  <span class="hljs-variable">%15</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">mul</span> <span class="hljs-keyword">nsw</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%14</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%13</span><br><span class="hljs-number">9</span>  <span class="hljs-variable">%20</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%6</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br><span class="hljs-number">10</span>  <span class="hljs-variable">%aa</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%3</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br><span class="hljs-number">11</span>  <span class="hljs-variable">%9</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%5</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br><span class="hljs-number">12</span>  <span class="hljs-variable">%10</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%4</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br><span class="hljs-number">13</span>  <span class="hljs-variable">%11</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">icmp</span> <span class="hljs-keyword">slt</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%9</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%10</span><br><span class="hljs-number">14</span>  <span class="hljs-variable">%3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">alloca</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br><span class="hljs-number">15</span>  <span class="hljs-variable">%4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">alloca</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br><span class="hljs-number">16</span>  <span class="hljs-variable">%5</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">alloca</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br><span class="hljs-number">17</span>  <span class="hljs-variable">%6</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">alloca</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br><span class="hljs-number">18</span>  <span class="hljs-variable">%7</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%3</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p>测试样例一共有 19 个定值，每一个定值对应 BitVector 中的一个二进制位。</p><h2 id="use-与-def-的计算"><a href="#use-与-def-的计算" class="headerlink" title="use 与 def 的计算"></a>use 与 def 的计算</h2><p>有一种特殊情况，需要考虑，例如某个基本块如下</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">a</span> = <span class="hljs-number">1</span><br><span class="hljs-attr">b</span> = a<br><span class="hljs-attr">d</span> = c<br></code></pre></td></tr></table></figure><p>use = {c}, def = {a, b, d}</p><p>因为 <code>a</code> 的定值在当前基本块内且在引用之前，所以 use 集合中没有 <code>a</code></p><p>在 llvm 分析中，分析基本块 def 的时候应该去掉有“定值”作用的指令，例如 <code>BranchInst</code>, <code>StoreInst</code>, <code>ReturnInst</code>等….</p><p>分析 use 的时候，应该去掉对 <code>BranchInst</code>,<code>Contant</code> 等…</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">AnalysisDefAndUseSet</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> bb : <span class="hljs-keyword">this</span>-&gt;bbList) &#123;<br>        <span class="hljs-keyword">auto</span> &amp; defSets = <span class="hljs-keyword">this</span>-&gt;DefSet[bb];<br>        <span class="hljs-keyword">auto</span> &amp; useSets = <span class="hljs-keyword">this</span>-&gt;UseSet[bb];<br>        <span class="hljs-keyword">for</span>(BasicBlock::iterator insIter = bb-&gt;begin(); insIter != bb-&gt;end(); insIter++) &#123;<br>            Value * val = dyn_cast&lt;Value&gt;(insIter);<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp; op : insIter-&gt;operands()) &#123;<br>                Value * opValue = op.get();<br>                <span class="hljs-keyword">if</span> (<br>                    !dyn_cast&lt;Constant&gt;(opValue)<br>                    &amp;&amp; !dyn_cast&lt;BasicBlock&gt;(opValue)<br>                    &amp;&amp; InstBitMap.count(opValue) &gt;= <span class="hljs-number">1</span><br>                    &amp;&amp; !defSets[InstBitMap[opValue]]<br>                    &amp;&amp; !useSets[InstBitMap[opValue]]) &#123;<br>                    useSets[InstBitMap[opValue]] = <span class="hljs-literal">true</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>-&gt;isDefFocusInst(val)) &#123;<br>                defSets[InstBitMap[val]] = <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>        errs() &lt;&lt; <span class="hljs-string">&quot;defs:\n&quot;</span>;<br>        printSET(defSets);<br>        errs() &lt;&lt; <span class="hljs-string">&quot;uses:\n&quot;</span>;<br>        printSET(useSets);<br>        errs() &lt;&lt; <span class="hljs-string">&quot;================ \n&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试样例某基本块输出如下:</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-symbol">defs:</span><br><span class="hljs-number">0</span>   <span class="hljs-variable">%test2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%test</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br><span class="hljs-number">1</span>   <span class="hljs-variable">%17</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%5</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br><span class="hljs-number">2</span>   <span class="hljs-variable">%18</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">add</span> <span class="hljs-keyword">nsw</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%17</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">uses:</span><br><span class="hljs-number">3</span>   <span class="hljs-variable">%test</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">alloca</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br><span class="hljs-number">14</span>   <span class="hljs-variable">%5</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">alloca</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p>该基本块生成有 3个定值，引用外部两个定值  <code>%test2</code> 和 <code>%5</code> 均不在该基本块，因此属于 use 集合。</p><p>Entry 基本块的 use 集合只有参数，因为对于 Entry 来说，参数是外部的。</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-symbol">defs:</span><br><span class="hljs-number">14</span>   <span class="hljs-variable">%3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">alloca</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br><span class="hljs-number">15</span>   <span class="hljs-variable">%4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">alloca</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br><span class="hljs-number">16</span>   <span class="hljs-variable">%5</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">alloca</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br><span class="hljs-number">17</span>   <span class="hljs-variable">%6</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">alloca</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br><span class="hljs-number">18</span>   <span class="hljs-variable">%7</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%3</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br><span class="hljs-symbol">uses:</span><br><span class="hljs-number">0</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%0</span><br><span class="hljs-number">1</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%1</span><br></code></pre></td></tr></table></figure><h2 id="迭代计算活跃性"><a href="#迭代计算活跃性" class="headerlink" title="迭代计算活跃性"></a>迭代计算活跃性</h2><p>迭代计算，直到所有基本块的IN集合不再改变。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">TransferBB</span><span class="hljs-params">(BasicBlock * bb)</span> </span>&#123;<br>    <span class="hljs-keyword">bool</span> changed = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">for</span>( BasicBlock * succ: successors(bb))<br>        <span class="hljs-keyword">this</span>-&gt;BBOUTSet[bb] |= <span class="hljs-keyword">this</span>-&gt;BBINSet[succ];<br>    BitVector bv = <span class="hljs-keyword">this</span>-&gt;UseSet[bb];<br>    BitVector df = <span class="hljs-keyword">this</span>-&gt;DefSet[bb];<br>    df.flip();<br>    df &amp;= <span class="hljs-keyword">this</span>-&gt;BBOUTSet[bb];<br>    bv |= df;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>-&gt;BBINSet[bb] != bv)&#123;<br>        <span class="hljs-keyword">this</span>-&gt;BBINSet[bb] = bv;<br>        changed = <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> changed;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="数据样例"><a href="#数据样例" class="headerlink" title="数据样例"></a>数据样例</h3><p>第一次迭代16基本块：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs llvm">current bb:<br><span class="hljs-number">16</span>:                                               <span class="hljs-comment">; preds = %12</span><br>  <span class="hljs-variable">%test2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%test</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%17</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%5</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%18</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">add</span> <span class="hljs-keyword">nsw</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%17</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%18</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%5</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-keyword">br</span> label <span class="hljs-variable">%8</span><br><br>Before IN:<br><br>After IN:<br><span class="hljs-number">5</span> <span class="hljs-number">16</span> <br></code></pre></td></tr></table></figure><p>第二次迭代16基本块</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs llvm">current bb:<br><span class="hljs-number">16</span>:                                               <span class="hljs-comment">; preds = %12</span><br>  <span class="hljs-variable">%test2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%test</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%17</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%5</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%18</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">add</span> <span class="hljs-keyword">nsw</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%17</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%18</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%5</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-keyword">br</span> label <span class="hljs-variable">%8</span><br><br>Before IN:<br><span class="hljs-number">5</span> <span class="hljs-number">16</span> <br>After IN:<br><span class="hljs-number">5</span> <span class="hljs-number">14</span> <span class="hljs-number">15</span> <span class="hljs-number">16</span> <span class="hljs-number">17</span> <br></code></pre></td></tr></table></figure><p>第三次迭代16基本块</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-number">3</span> iteration:<br>current bb:<br><span class="hljs-number">16</span>:                                               <span class="hljs-comment">; preds = %12</span><br>  <span class="hljs-variable">%test2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%test</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%17</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%5</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%18</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">add</span> <span class="hljs-keyword">nsw</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%17</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%18</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%5</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-keyword">br</span> label <span class="hljs-variable">%8</span><br><br>Before IN:<br><span class="hljs-number">5</span> <span class="hljs-number">14</span> <span class="hljs-number">15</span> <span class="hljs-number">16</span> <span class="hljs-number">17</span> <br>After IN:<br><span class="hljs-number">5</span> <span class="hljs-number">14</span> <span class="hljs-number">15</span> <span class="hljs-number">16</span> <span class="hljs-number">17</span> <br></code></pre></td></tr></table></figure><p>集合不再发生变化.</p><p>最终所有全局活跃变量的并集</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs llvm">Live Variables:<br><span class="hljs-number">0</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%0</span><br><span class="hljs-number">1</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%1</span><br><span class="hljs-number">5</span>   <span class="hljs-variable">%test</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">alloca</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br><span class="hljs-number">14</span>   <span class="hljs-variable">%3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">alloca</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br><span class="hljs-number">15</span>   <span class="hljs-variable">%4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">alloca</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br><span class="hljs-number">16</span>   <span class="hljs-variable">%5</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">alloca</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br><span class="hljs-number">17</span>   <span class="hljs-variable">%6</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">alloca</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p> 这给死代码删除提供了一个思路，如果某一个变量全局不活跃，并且在基本块内无引用，则为死代码可以删掉。</p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LivenessAnalysis</span> &#123;</span><br>    <span class="hljs-keyword">private</span>:<br>        Function * targetFunc;<br>        <span class="hljs-keyword">typedef</span> BitVector  INSTSET;<br>        <span class="hljs-keyword">typedef</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">map</span>&lt;BasicBlock *, INSTSET&gt; BBSET;<br>        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">map</span>&lt;Value*, <span class="hljs-keyword">int</span>&gt; InstBitMap;<br>        BBSET DefSet;<br>        BBSET UseSet;<br>        BBSET BBINSet;<br>        BBSET BBOUTSet;<br><br>        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;BasicBlock *&gt; bbList;<br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PostOrderTraverse</span><span class="hljs-params">(<span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;BasicBlock *&gt; &amp; result, <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;BasicBlock *&gt; &amp; visited, BasicBlock * curBB)</span> </span>&#123;<br>            assert(targetFunc);<br>            visited.push_back(curBB);<br>            <span class="hljs-keyword">for</span> (BasicBlock * succ : successors(curBB)) &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">std</span>::find(visited.begin(), visited.end(), succ) == visited.end()) &#123;<br>                    PostOrderTraverse(result, visited, succ);<br>                &#125;<br>            &#125;<br><br>            result.push_back(curBB);<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">isDefFocusInst</span><span class="hljs-params">(Value * inst)</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> !dyn_cast&lt;BranchInst&gt;(inst) &amp;&amp; !dyn_cast&lt;StoreInst&gt;(inst) &amp;&amp; !dyn_cast&lt;ReturnInst&gt;(inst);<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InitializeBitVector</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">int</span> allocaCounter = <span class="hljs-number">0</span>;<br>            errs() &lt;&lt; <span class="hljs-string">&quot;BitVec map:\n&quot;</span>;<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> arg = targetFunc-&gt;arg_begin(); arg != targetFunc-&gt;arg_end(); arg++) &#123;<br>                Value * v = dyn_cast&lt;Value&gt;(arg);<br>                InstBitMap[v] = allocaCounter;<br>                errs() &lt;&lt; allocaCounter &lt;&lt; <span class="hljs-string">&quot;  &quot;</span>;<br>                allocaCounter++;<br>                v-&gt;dump();<br>            &#125;<br><br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> bb : <span class="hljs-keyword">this</span>-&gt;bbList) &#123;<br>                <span class="hljs-keyword">for</span>(BasicBlock::iterator insIter = bb-&gt;begin(); insIter != bb-&gt;end(); insIter++) &#123;<br>                    Value * v = dyn_cast&lt;Value&gt;(insIter);<br>                    <span class="hljs-keyword">if</span> (isDefFocusInst(v)) &#123;<br>                        InstBitMap[v] = allocaCounter;<br>                        errs() &lt;&lt; allocaCounter;<br>                        allocaCounter++;<br>                        v-&gt;dump();<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> bb : <span class="hljs-keyword">this</span>-&gt;bbList) &#123;<br>                DefSet[bb] = BitVector(allocaCounter);<br>                UseSet[bb] = BitVector(allocaCounter);<br>                BBINSet[bb] = BitVector(allocaCounter);<br>                BBOUTSet[bb] = BitVector(allocaCounter);<br>            &#125;<br>        &#125;<br><br><br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printSET</span><span class="hljs-params">(INSTSET &amp; <span class="hljs-built_in">set</span>)</span> </span>&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">set</span>.size(); i++) &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">set</span>[i]) &#123;<br>                    errs() &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span>  item : <span class="hljs-keyword">this</span>-&gt;InstBitMap) &#123;<br>                        <span class="hljs-keyword">if</span> (item.second == i) &#123;<br>                            item.first-&gt;dump();<br>                            <span class="hljs-keyword">break</span>;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printSET2</span><span class="hljs-params">(INSTSET &amp; <span class="hljs-built_in">set</span>)</span> </span>&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">set</span>.size(); i++) &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">set</span>[i])<br>                    errs() &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>            &#125;<br>            errs() &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">TransferBB</span><span class="hljs-params">(BasicBlock * bb)</span> </span>&#123;<br>            <span class="hljs-keyword">bool</span> changed = <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">for</span>( BasicBlock * succ: successors(bb))<br>                <span class="hljs-keyword">this</span>-&gt;BBOUTSet[bb] |= <span class="hljs-keyword">this</span>-&gt;BBINSet[succ];<br>            BitVector bv = <span class="hljs-keyword">this</span>-&gt;UseSet[bb];<br>            BitVector df = <span class="hljs-keyword">this</span>-&gt;DefSet[bb];<br>            df.flip();<br>            df &amp;= <span class="hljs-keyword">this</span>-&gt;BBOUTSet[bb];<br>            bv |= df;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>-&gt;BBINSet[bb] != bv)&#123;<br>                <span class="hljs-keyword">this</span>-&gt;BBINSet[bb] = bv;<br>                changed = <span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> changed;<br>        &#125;<br><br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">LivenessAnalysis</span><span class="hljs-params">(Function * targetFunction)</span> : <span class="hljs-title">targetFunc</span><span class="hljs-params">(targetFunction)</span> </span>&#123;<br>            <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;BasicBlock *&gt; tmp;<br>            <span class="hljs-keyword">this</span>-&gt;PostOrderTraverse(bbList, tmp, &amp;<span class="hljs-keyword">this</span>-&gt;targetFunc-&gt;getEntryBlock());<br>            errs() &lt;&lt; <span class="hljs-string">&quot;Baisc Block nums:&quot;</span> &lt;&lt; bbList.size() &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>            <span class="hljs-keyword">this</span>-&gt;InitializeBitVector();<br>            <span class="hljs-keyword">this</span>-&gt;AnalysisDefAndUseSet();<br>        &#125;;<br><br><br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">AnalysisDefAndUseSet</span><span class="hljs-params">()</span> </span>&#123;<br><br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> bb : <span class="hljs-keyword">this</span>-&gt;bbList) &#123;<br>                <span class="hljs-keyword">auto</span> &amp; defSets = <span class="hljs-keyword">this</span>-&gt;DefSet[bb];<br>                <span class="hljs-keyword">auto</span> &amp; useSets = <span class="hljs-keyword">this</span>-&gt;UseSet[bb];<br><br>                <span class="hljs-keyword">for</span>(BasicBlock::iterator insIter = bb-&gt;begin(); insIter != bb-&gt;end(); insIter++) &#123;<br>                    Value * val = dyn_cast&lt;Value&gt;(insIter);<br><br><br>                    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp; op : insIter-&gt;operands()) &#123;<br>                        Value * opValue = op.get();<br><br>                        <span class="hljs-keyword">if</span> (<br>                            !dyn_cast&lt;Constant&gt;(opValue)<br>                            &amp;&amp; !dyn_cast&lt;BasicBlock&gt;(opValue)<br>                            &amp;&amp; InstBitMap.count(opValue) &gt;= <span class="hljs-number">1</span><br>                            &amp;&amp; !defSets[InstBitMap[opValue]]<br>                            &amp;&amp; !useSets[InstBitMap[opValue]]) &#123;<br>                            useSets[InstBitMap[opValue]] = <span class="hljs-literal">true</span>;<br>                        &#125;<br>                    &#125;<br><br>                    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>-&gt;isDefFocusInst(val)) &#123;<br>                        defSets[InstBitMap[val]] = <span class="hljs-literal">true</span>;<br>                    &#125;<br>                &#125;<br>                errs() &lt;&lt; <span class="hljs-string">&quot;defs:\n&quot;</span>;<br>                printSET(defSets);<br>                errs() &lt;&lt; <span class="hljs-string">&quot;uses:\n&quot;</span>;<br>                printSET(useSets);<br>                errs() &lt;&lt; <span class="hljs-string">&quot;================ \n&quot;</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DoAnalysis</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">bool</span>  changed = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">int</span> count = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">while</span> (changed)<br>            &#123;<br>                changed = <span class="hljs-literal">false</span>;<br>                errs() &lt;&lt; count++ &lt;&lt; <span class="hljs-string">&quot; iteration:\n&quot;</span>;<br>                <span class="hljs-keyword">for</span>( BasicBlock * bb: <span class="hljs-keyword">this</span>-&gt;bbList) &#123;<br>                    errs() &lt;&lt; <span class="hljs-string">&quot;current bb:&quot;</span>;<br>                    bb-&gt;dump();<br><br>                    errs() &lt;&lt; <span class="hljs-string">&quot;Before IN:\n&quot;</span>;<br>                    printSET2(<span class="hljs-keyword">this</span>-&gt;BBINSet[bb]);<br>                    changed |= TransferBB(bb);<br>                    errs() &lt;&lt; <span class="hljs-string">&quot;After IN:\n&quot;</span>;<br>                    printSET2(<span class="hljs-keyword">this</span>-&gt;BBINSet[bb]);<br>                    errs() &lt;&lt; <span class="hljs-string">&quot;\n\n&quot;</span>;<br>                &#125;<br>            &#125;<br>            errs() &lt;&lt; <span class="hljs-string">&quot;================== result ================\n&quot;</span>;<br>            <span class="hljs-keyword">for</span>( BasicBlock * bb: <span class="hljs-keyword">this</span>-&gt;bbList) &#123;<br>                errs() &lt;&lt; <span class="hljs-string">&quot;Basic Block:&quot;</span>;<br>                bb-&gt;dump();<br>                errs() &lt;&lt; <span class="hljs-string">&quot;IN for bb:\n&quot;</span>;<br>                printSET2(<span class="hljs-keyword">this</span>-&gt;BBINSet[bb]);<br>            &#125;<br><br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">FindAllLiveVariables</span><span class="hljs-params">()</span> </span>&#123;<br>            INSTSET bitmap = BitVector(InstBitMap.size());<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> bb : bbList) &#123;<br>                bitmap |= BBINSet[bb];<br>            &#125;<br>            errs() &lt;&lt; <span class="hljs-string">&quot;Live Variables:\n&quot;</span>;<br>            printSET(bitmap);<br>        &#125;<br>    &#125;;<br></code></pre></td></tr></table></figure><p>调用代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">runOnFunction</span><span class="hljs-params">(Function &amp;F)</span> <span class="hljs-keyword">override</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (F.getName().compare(<span class="hljs-string">&quot;main&quot;</span>) == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">auto</span> * live = <span class="hljs-keyword">new</span> LivenessAnalysis(&amp;F);<br>    live-&gt;DoAnalysis();<br>    live-&gt;FindAllLiveVariables();<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://www.bilibili.com/video/BV19741197zA?t=2059">https://www.bilibili.com/video/BV19741197zA?t=2059</a> “南京大学《软件分析》课程04（Data Flow Analysis II）”</p><p>[2] <a href="https://panda0s.top/2021/02/20/Register-Allocation/">https://panda0s.top/2021/02/20/Register-Allocation/</a> “Register Allocation”</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基于-llvm-实现活跃变量分析&quot;&gt;&lt;a href=&quot;#基于-llvm-实现活跃变量分析&quot; class=&quot;headerlink&quot; title=&quot;基于 llvm 实现活跃变量分析&quot;&gt;&lt;/a&gt;基于 llvm 实现活跃变量分析&lt;/h1&gt;&lt;h2 id=&quot;活跃变量分析&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="compiler" scheme="https://panda0s.top/categories/compiler/"/>
    
    
    <category term="llvm" scheme="https://panda0s.top/tags/llvm/"/>
    
    <category term="DataFlow" scheme="https://panda0s.top/tags/DataFlow/"/>
    
  </entry>
  
  <entry>
    <title>gslab2021: PC Security</title>
    <link href="https://panda0s.top/2021/04/05/gslab2021-PC-Security/"/>
    <id>https://panda0s.top/2021/04/05/gslab2021-PC-Security/</id>
    <published>2021-04-05T00:58:29.000Z</published>
    <updated>2021-04-05T04:40:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2021腾讯游戏安全-初赛PC题"><a href="#2021腾讯游戏安全-初赛PC题" class="headerlink" title="2021腾讯游戏安全 初赛PC题"></a>2021腾讯游戏安全 初赛PC题</h1><p>flag:dogod<br>非常好的一道题，短短的一天时间内，已经简单入门 OpenGL </p><h2 id="1-vertex-shader"><a href="#1-vertex-shader" class="headerlink" title="1. vertex shader"></a>1. vertex shader</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#version 330 core</span><br>layout (location = <span class="hljs-number">0</span>) in vec3 aPos;<br>layout (location = <span class="hljs-number">1</span>) in vec2 aTexCoord;<br>out vec2 TexCoord;<br>uniform mat4 model;<br>uniform mat4 view;<br>uniform mat4 projection;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>gl_Position = projection * view * model * vec4(aPos, <span class="hljs-number">1.0f</span>);<br>TexCoord = vec2(aTexCoord.x, aTexCoord.y);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-fragment-shader"><a href="#2-fragment-shader" class="headerlink" title="2. fragment shader"></a>2. fragment shader</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#version 330 core</span><br>out vec4 FragColor;<br>in vec2 TexCoord;<br>uniform sampler2D texture1;<br>uniform sampler2D texture2;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>FragColor = mix(texture(texture1, TexCoord), texture(texture2, TexCoord), <span class="hljs-number">0.2</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-顶点的组成-x-y-z-Tx-Ty-理由如下"><a href="#3-顶点的组成-x-y-z-Tx-Ty-理由如下" class="headerlink" title="3. 顶点的组成: ((x,y,z), (Tx, Ty)) 理由如下"></a>3. 顶点的组成: ((x,y,z), (Tx, Ty)) 理由如下</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">VAO</span><br><span class="hljs-attribute">Att0</span>:<br><span class="hljs-attribute">glGenBuffers</span>(<span class="hljs-number">1</span>, &amp;VBO<span class="hljs-number">1</span>);<br><span class="hljs-attribute">glBindVertexArray</span>(VAO);<br><span class="hljs-attribute">glBindBuffer</span>(<span class="hljs-number">0</span>x<span class="hljs-number">8892</span>, VBO<span class="hljs-number">1</span>);<br><span class="hljs-attribute">glBufferData</span>(<span class="hljs-number">0</span>x<span class="hljs-number">8892</span>, <span class="hljs-number">720</span>, vertices, <span class="hljs-number">0</span>x<span class="hljs-number">88</span>E<span class="hljs-number">4</span>);<br><span class="hljs-attribute">glVertexAttribPointer</span>(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>x<span class="hljs-number">1406</span>, <span class="hljs-number">0</span>, <span class="hljs-number">20</span>, <span class="hljs-number">0</span>);// GL_FLOAT<br><span class="hljs-attribute">Att1</span>:<br><span class="hljs-attribute">glVertexAttribPointer</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>x<span class="hljs-number">1406</span>, <span class="hljs-number">0</span>, <span class="hljs-number">20</span>, <span class="hljs-number">12</span>);<br></code></pre></td></tr></table></figure><h2 id="4-立方体模型数据"><a href="#4-立方体模型数据" class="headerlink" title="4. 立方体模型数据"></a>4. 立方体模型数据</h2><p>glBufferData(0x8892, 720, vertices, 0x88E4);<br>来源于：<br><a href="https://learnopengl.com/code_viewer_gh.php?code=src/1.getting_started/6.3.coordinate_systems_multiple/coordinate_systems_multiple.cpp">https://learnopengl.com/code_viewer_gh.php?code=src/1.getting_started/6.3.coordinate_systems_multiple/coordinate_systems_multiple.cpp</a><br>简单对比了一下，发现大部分代码一致，模型数据也能对上。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">float</span> vertices[] = &#123;<br>    <span class="hljs-comment">//  坐标               纹理坐标</span><br>    <span class="hljs-number">-0.5f</span>, <span class="hljs-number">-0.5f</span>, <span class="hljs-number">-0.5f</span>,  <span class="hljs-number">0.0f</span>, <span class="hljs-number">0.0f</span>,<br>     <span class="hljs-number">0.5f</span>, <span class="hljs-number">-0.5f</span>, <span class="hljs-number">-0.5f</span>,  <span class="hljs-number">1.0f</span>, <span class="hljs-number">0.0f</span>,<br>     <span class="hljs-number">0.5f</span>,  <span class="hljs-number">0.5f</span>, <span class="hljs-number">-0.5f</span>,  <span class="hljs-number">1.0f</span>, <span class="hljs-number">1.0f</span>,<br>     <span class="hljs-number">0.5f</span>,  <span class="hljs-number">0.5f</span>, <span class="hljs-number">-0.5f</span>,  <span class="hljs-number">1.0f</span>, <span class="hljs-number">1.0f</span>,<br>    <span class="hljs-number">-0.5f</span>,  <span class="hljs-number">0.5f</span>, <span class="hljs-number">-0.5f</span>,  <span class="hljs-number">0.0f</span>, <span class="hljs-number">1.0f</span>,<br>    <span class="hljs-number">-0.5f</span>, <span class="hljs-number">-0.5f</span>, <span class="hljs-number">-0.5f</span>,  <span class="hljs-number">0.0f</span>, <span class="hljs-number">0.0f</span>,<br><br>    <span class="hljs-number">-0.5f</span>, <span class="hljs-number">-0.5f</span>,  <span class="hljs-number">0.5f</span>,  <span class="hljs-number">0.0f</span>, <span class="hljs-number">0.0f</span>,<br>     <span class="hljs-number">0.5f</span>, <span class="hljs-number">-0.5f</span>,  <span class="hljs-number">0.5f</span>,  <span class="hljs-number">1.0f</span>, <span class="hljs-number">0.0f</span>,<br>     <span class="hljs-number">0.5f</span>,  <span class="hljs-number">0.5f</span>,  <span class="hljs-number">0.5f</span>,  <span class="hljs-number">1.0f</span>, <span class="hljs-number">1.0f</span>,<br>     <span class="hljs-number">0.5f</span>,  <span class="hljs-number">0.5f</span>,  <span class="hljs-number">0.5f</span>,  <span class="hljs-number">1.0f</span>, <span class="hljs-number">1.0f</span>,<br>    <span class="hljs-number">-0.5f</span>,  <span class="hljs-number">0.5f</span>,  <span class="hljs-number">0.5f</span>,  <span class="hljs-number">0.0f</span>, <span class="hljs-number">1.0f</span>,<br>    <span class="hljs-number">-0.5f</span>, <span class="hljs-number">-0.5f</span>,  <span class="hljs-number">0.5f</span>,  <span class="hljs-number">0.0f</span>, <span class="hljs-number">0.0f</span>,<br><br>    <span class="hljs-number">-0.5f</span>,  <span class="hljs-number">0.5f</span>,  <span class="hljs-number">0.5f</span>,  <span class="hljs-number">1.0f</span>, <span class="hljs-number">0.0f</span>,<br>    <span class="hljs-number">-0.5f</span>,  <span class="hljs-number">0.5f</span>, <span class="hljs-number">-0.5f</span>,  <span class="hljs-number">1.0f</span>, <span class="hljs-number">1.0f</span>,<br>    <span class="hljs-number">-0.5f</span>, <span class="hljs-number">-0.5f</span>, <span class="hljs-number">-0.5f</span>,  <span class="hljs-number">0.0f</span>, <span class="hljs-number">1.0f</span>,<br>    <span class="hljs-number">-0.5f</span>, <span class="hljs-number">-0.5f</span>, <span class="hljs-number">-0.5f</span>,  <span class="hljs-number">0.0f</span>, <span class="hljs-number">1.0f</span>,<br>    <span class="hljs-number">-0.5f</span>, <span class="hljs-number">-0.5f</span>,  <span class="hljs-number">0.5f</span>,  <span class="hljs-number">0.0f</span>, <span class="hljs-number">0.0f</span>,<br>    <span class="hljs-number">-0.5f</span>,  <span class="hljs-number">0.5f</span>,  <span class="hljs-number">0.5f</span>,  <span class="hljs-number">1.0f</span>, <span class="hljs-number">0.0f</span>,<br><br>     <span class="hljs-number">0.5f</span>,  <span class="hljs-number">0.5f</span>,  <span class="hljs-number">0.5f</span>,  <span class="hljs-number">1.0f</span>, <span class="hljs-number">0.0f</span>,<br>     <span class="hljs-number">0.5f</span>,  <span class="hljs-number">0.5f</span>, <span class="hljs-number">-0.5f</span>,  <span class="hljs-number">1.0f</span>, <span class="hljs-number">1.0f</span>,<br>     <span class="hljs-number">0.5f</span>, <span class="hljs-number">-0.5f</span>, <span class="hljs-number">-0.5f</span>,  <span class="hljs-number">0.0f</span>, <span class="hljs-number">1.0f</span>,<br>     <span class="hljs-number">0.5f</span>, <span class="hljs-number">-0.5f</span>, <span class="hljs-number">-0.5f</span>,  <span class="hljs-number">0.0f</span>, <span class="hljs-number">1.0f</span>,<br>     <span class="hljs-number">0.5f</span>, <span class="hljs-number">-0.5f</span>,  <span class="hljs-number">0.5f</span>,  <span class="hljs-number">0.0f</span>, <span class="hljs-number">0.0f</span>,<br>     <span class="hljs-number">0.5f</span>,  <span class="hljs-number">0.5f</span>,  <span class="hljs-number">0.5f</span>,  <span class="hljs-number">1.0f</span>, <span class="hljs-number">0.0f</span>,<br><br>    <span class="hljs-number">-0.5f</span>, <span class="hljs-number">-0.5f</span>, <span class="hljs-number">-0.5f</span>,  <span class="hljs-number">0.0f</span>, <span class="hljs-number">1.0f</span>,<br>     <span class="hljs-number">0.5f</span>, <span class="hljs-number">-0.5f</span>, <span class="hljs-number">-0.5f</span>,  <span class="hljs-number">1.0f</span>, <span class="hljs-number">1.0f</span>,<br>     <span class="hljs-number">0.5f</span>, <span class="hljs-number">-0.5f</span>,  <span class="hljs-number">0.5f</span>,  <span class="hljs-number">1.0f</span>, <span class="hljs-number">0.0f</span>,<br>     <span class="hljs-number">0.5f</span>, <span class="hljs-number">-0.5f</span>,  <span class="hljs-number">0.5f</span>,  <span class="hljs-number">1.0f</span>, <span class="hljs-number">0.0f</span>,<br>    <span class="hljs-number">-0.5f</span>, <span class="hljs-number">-0.5f</span>,  <span class="hljs-number">0.5f</span>,  <span class="hljs-number">0.0f</span>, <span class="hljs-number">0.0f</span>,<br>    <span class="hljs-number">-0.5f</span>, <span class="hljs-number">-0.5f</span>, <span class="hljs-number">-0.5f</span>,  <span class="hljs-number">0.0f</span>, <span class="hljs-number">1.0f</span>,<br><br>    <span class="hljs-number">-0.5f</span>,  <span class="hljs-number">0.5f</span>, <span class="hljs-number">-0.5f</span>,  <span class="hljs-number">0.0f</span>, <span class="hljs-number">1.0f</span>,<br>     <span class="hljs-number">0.5f</span>,  <span class="hljs-number">0.5f</span>, <span class="hljs-number">-0.5f</span>,  <span class="hljs-number">1.0f</span>, <span class="hljs-number">1.0f</span>,<br>     <span class="hljs-number">0.5f</span>,  <span class="hljs-number">0.5f</span>,  <span class="hljs-number">0.5f</span>,  <span class="hljs-number">1.0f</span>, <span class="hljs-number">0.0f</span>,<br>     <span class="hljs-number">0.5f</span>,  <span class="hljs-number">0.5f</span>,  <span class="hljs-number">0.5f</span>,  <span class="hljs-number">1.0f</span>, <span class="hljs-number">0.0f</span>,<br>    <span class="hljs-number">-0.5f</span>,  <span class="hljs-number">0.5f</span>,  <span class="hljs-number">0.5f</span>,  <span class="hljs-number">0.0f</span>, <span class="hljs-number">0.0f</span>,<br>    <span class="hljs-number">-0.5f</span>,  <span class="hljs-number">0.5f</span>, <span class="hljs-number">-0.5f</span>,  <span class="hljs-number">0.0f</span>, <span class="hljs-number">1.0f</span><br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="5-纹理贴图"><a href="#5-纹理贴图" class="headerlink" title="5. 纹理贴图"></a>5. 纹理贴图</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp">glGenTextures(<span class="hljs-number">1</span>, &amp;v58);<br>glBindTexture(<span class="hljs-number">0xDE1</span>, v58);                    <span class="hljs-comment">// GL_TEXTURE_2D</span><br>glTexParameteri(<span class="hljs-number">0xDE1</span>, <span class="hljs-number">0x2802</span>, <span class="hljs-number">0x2901</span>);       <span class="hljs-comment">// GL_TEXTURE_WRAP_S   GL_REPEAT</span><br>glTexParameteri(<span class="hljs-number">0xDE1</span>, <span class="hljs-number">0x2803</span>, <span class="hljs-number">0x2901</span>);       <span class="hljs-comment">// GL_TEXTURE_WRAP_T</span><br>glTexParameteri(<span class="hljs-number">0xDE1</span>, <span class="hljs-number">0x2801</span>, <span class="hljs-number">0x2601</span>);       <span class="hljs-comment">// GL_TEXTURE_MIN_FILTER GL_LINEAR</span><br>glTexParameteri(<span class="hljs-number">0xDE1</span>, <span class="hljs-number">0x2800</span>, <span class="hljs-number">0x2601</span>);       <span class="hljs-comment">// GL_TEXTURE_MAG_FILTER</span><br>.......<br>  glTexImage2D(<span class="hljs-number">0xDE1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0x1907</span>, LODWORD(width), height, <span class="hljs-number">0</span>, <span class="hljs-number">0x1907</span>, <span class="hljs-number">0x1401</span>, data);<br>  glGenerateMipmap(<span class="hljs-number">0xDE1</span>);<br>.......<br></code></pre></td></tr></table></figure><h2 id="6-主循环用模型绘图"><a href="#6-主循环用模型绘图" class="headerlink" title="6. 主循环用模型绘图"></a>6. 主循环用模型绘图</h2><p>配置 view 、 model 、 projection 数据<br>view 矩阵源于鼠标坐标的一些变换</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 固定</span><br>loc_projection = glGetUniformLocation(v7, v13);<br>glUniformMatrix4fv(loc_projection, <span class="hljs-number">0</span>, mat_projection, v37);<br><br><span class="hljs-comment">// 鼠标数据计算而来</span><br>loc_view = glGetUniformLocation(v7, v17);<br>glUniformMatrix4fv(loc_view, <span class="hljs-number">0</span>, mat_view, v38);<br><br><span class="hljs-comment">// 坐标数组数据 3 * 1019 * sizeof(float)，内嵌循环处理</span><br>loc_model = glGetUniformLocation(v7, v29);<br>glUniformMatrix4fv(loc_model, <span class="hljs-number">0</span>, mat_model, v39);<br><br>....<br><br><span class="hljs-comment">// 画图</span><br>glDrawArrays(<span class="hljs-number">4</span>, <span class="hljs-number">0</span>, <span class="hljs-number">36</span>);               <span class="hljs-comment">// GL_TRIANGLES</span><br></code></pre></td></tr></table></figure><p>坐标数据<br>start:0xF0EF20<br>end: 0xF11EE4<br>size: 1019</p><p>数据提取如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br></pre></td><td class="code"><pre><code class="hljs python">data = [(<span class="hljs-number">37</span>, <span class="hljs-number">9</span>, -<span class="hljs-number">6.5</span>),<br>(<span class="hljs-number">38</span>, <span class="hljs-number">9</span>, -<span class="hljs-number">4.1</span>),<br>(<span class="hljs-number">39</span>, <span class="hljs-number">9</span>, -<span class="hljs-number">5.9</span>),<br>(<span class="hljs-number">40</span>, <span class="hljs-number">9</span>, -<span class="hljs-number">4.6</span>),<br>(<span class="hljs-number">41</span>, <span class="hljs-number">9</span>, -<span class="hljs-number">7</span>),<br>(<span class="hljs-number">73</span>, <span class="hljs-number">9</span>, -<span class="hljs-number">5.6</span>),<br>(<span class="hljs-number">74</span>, <span class="hljs-number">9</span>, -<span class="hljs-number">4.2</span>),<br>(<span class="hljs-number">75</span>, <span class="hljs-number">9</span>, -<span class="hljs-number">6.4</span>),<br>(<span class="hljs-number">76</span>, <span class="hljs-number">9</span>, -<span class="hljs-number">5.6</span>),<br>(<span class="hljs-number">77</span>, <span class="hljs-number">9</span>, -<span class="hljs-number">4</span>),<br>(<span class="hljs-number">36</span>, <span class="hljs-number">10</span>, -<span class="hljs-number">4.3</span>),<br>(<span class="hljs-number">37</span>, <span class="hljs-number">10</span>, -<span class="hljs-number">6.4</span>),<br>(<span class="hljs-number">38</span>, <span class="hljs-number">10</span>, -<span class="hljs-number">4.7</span>),<br>(<span class="hljs-number">41</span>, <span class="hljs-number">10</span>, -<span class="hljs-number">5</span>),<br>(<span class="hljs-number">42</span>, <span class="hljs-number">10</span>, -<span class="hljs-number">3.9</span>),<br>(<span class="hljs-number">43</span>, <span class="hljs-number">10</span>, -<span class="hljs-number">3.5</span>),<br>(<span class="hljs-number">72</span>, <span class="hljs-number">10</span>, -<span class="hljs-number">6</span>),<br>(<span class="hljs-number">73</span>, <span class="hljs-number">10</span>, -<span class="hljs-number">5.8</span>),<br>(<span class="hljs-number">74</span>, <span class="hljs-number">10</span>, -<span class="hljs-number">2.5</span>),<br>(<span class="hljs-number">77</span>, <span class="hljs-number">10</span>, -<span class="hljs-number">6.4</span>),<br>(<span class="hljs-number">78</span>, <span class="hljs-number">10</span>, -<span class="hljs-number">6</span>),<br>(<span class="hljs-number">79</span>, <span class="hljs-number">10</span>, -<span class="hljs-number">5.5</span>),<br>(<span class="hljs-number">12</span>, <span class="hljs-number">11</span>, -<span class="hljs-number">6.7</span>),<br>(<span class="hljs-number">13</span>, <span class="hljs-number">11</span>, -<span class="hljs-number">5.6</span>),<br>(<span class="hljs-number">21</span>, <span class="hljs-number">11</span>, -<span class="hljs-number">3.3</span>),<br>(<span class="hljs-number">22</span>, <span class="hljs-number">11</span>, -<span class="hljs-number">4.5</span>),<br>(<span class="hljs-number">29</span>, <span class="hljs-number">11</span>, -<span class="hljs-number">6.8</span>),<br>(<span class="hljs-number">30</span>, <span class="hljs-number">11</span>, -<span class="hljs-number">5.5</span>),<br>(<span class="hljs-number">31</span>, <span class="hljs-number">11</span>, -<span class="hljs-number">5.1</span>),<br>(<span class="hljs-number">32</span>, <span class="hljs-number">11</span>, -<span class="hljs-number">4.8</span>),<br>(<span class="hljs-number">33</span>, <span class="hljs-number">11</span>, -<span class="hljs-number">7</span>),<br>(<span class="hljs-number">34</span>, <span class="hljs-number">11</span>, -<span class="hljs-number">6.5</span>),<br>(<span class="hljs-number">37</span>, <span class="hljs-number">11</span>, -<span class="hljs-number">5.6</span>),<br>(<span class="hljs-number">38</span>, <span class="hljs-number">11</span>, -<span class="hljs-number">4.9</span>),<br>(<span class="hljs-number">41</span>, <span class="hljs-number">11</span>, -<span class="hljs-number">3.9</span>),<br>(<span class="hljs-number">42</span>, <span class="hljs-number">11</span>, -<span class="hljs-number">6.9</span>),<br>(<span class="hljs-number">43</span>, <span class="hljs-number">11</span>, -<span class="hljs-number">4.5</span>),<br>(<span class="hljs-number">48</span>, <span class="hljs-number">11</span>, -<span class="hljs-number">6.3</span>),<br>(<span class="hljs-number">49</span>, <span class="hljs-number">11</span>, -<span class="hljs-number">3</span>),<br>(<span class="hljs-number">56</span>, <span class="hljs-number">11</span>, -<span class="hljs-number">2.4</span>),<br>(<span class="hljs-number">57</span>, <span class="hljs-number">11</span>, -<span class="hljs-number">5</span>),<br>(<span class="hljs-number">58</span>, <span class="hljs-number">11</span>, -<span class="hljs-number">4.4</span>),<br>(<span class="hljs-number">59</span>, <span class="hljs-number">11</span>, -<span class="hljs-number">2.4</span>),<br>(<span class="hljs-number">60</span>, <span class="hljs-number">11</span>, -<span class="hljs-number">5</span>),<br>(<span class="hljs-number">61</span>, <span class="hljs-number">11</span>, -<span class="hljs-number">4.6</span>),<br>(<span class="hljs-number">65</span>, <span class="hljs-number">11</span>, -<span class="hljs-number">3.5</span>),<br>(<span class="hljs-number">66</span>, <span class="hljs-number">11</span>, -<span class="hljs-number">2.7</span>),<br>(<span class="hljs-number">67</span>, <span class="hljs-number">11</span>, -<span class="hljs-number">5.9</span>),<br>(<span class="hljs-number">68</span>, <span class="hljs-number">11</span>, -<span class="hljs-number">5</span>),<br>(<span class="hljs-number">73</span>, <span class="hljs-number">11</span>, -<span class="hljs-number">2.1</span>),<br>(<span class="hljs-number">74</span>, <span class="hljs-number">11</span>, -<span class="hljs-number">6.4</span>),<br>(<span class="hljs-number">77</span>, <span class="hljs-number">11</span>, -<span class="hljs-number">3.3</span>),<br>(<span class="hljs-number">78</span>, <span class="hljs-number">11</span>, -<span class="hljs-number">5.7</span>),<br>(<span class="hljs-number">79</span>, <span class="hljs-number">11</span>, -<span class="hljs-number">5.1</span>),<br>(<span class="hljs-number">83</span>, <span class="hljs-number">11</span>, -<span class="hljs-number">3.2</span>),<br>(<span class="hljs-number">84</span>, <span class="hljs-number">11</span>, -<span class="hljs-number">3.6</span>),<br>(<span class="hljs-number">85</span>, <span class="hljs-number">11</span>, -<span class="hljs-number">4.5</span>),<br>(<span class="hljs-number">86</span>, <span class="hljs-number">11</span>, -<span class="hljs-number">6.4</span>),<br>(<span class="hljs-number">92</span>, <span class="hljs-number">11</span>, -<span class="hljs-number">4.3</span>),<br>(<span class="hljs-number">93</span>, <span class="hljs-number">11</span>, -<span class="hljs-number">5.9</span>),<br>(<span class="hljs-number">94</span>, <span class="hljs-number">11</span>, -<span class="hljs-number">5.8</span>),<br>(<span class="hljs-number">95</span>, <span class="hljs-number">11</span>, -<span class="hljs-number">6.1</span>),<br>(<span class="hljs-number">96</span>, <span class="hljs-number">11</span>, -<span class="hljs-number">2.7</span>),<br>(<span class="hljs-number">97</span>, <span class="hljs-number">11</span>, -<span class="hljs-number">5.3</span>),<br>(<span class="hljs-number">12</span>, <span class="hljs-number">12</span>, -<span class="hljs-number">5.8</span>),<br>(<span class="hljs-number">13</span>, <span class="hljs-number">12</span>, -<span class="hljs-number">4.3</span>),<br>(<span class="hljs-number">22</span>, <span class="hljs-number">12</span>, -<span class="hljs-number">5.2</span>),<br>(<span class="hljs-number">23</span>, <span class="hljs-number">12</span>, -<span class="hljs-number">4</span>),<br>(<span class="hljs-number">28</span>, <span class="hljs-number">12</span>, -<span class="hljs-number">4.8</span>),<br>(<span class="hljs-number">29</span>, <span class="hljs-number">12</span>, -<span class="hljs-number">4.9</span>),<br>(<span class="hljs-number">30</span>, <span class="hljs-number">12</span>, -<span class="hljs-number">4.3</span>),<br>(<span class="hljs-number">32</span>, <span class="hljs-number">12</span>, -<span class="hljs-number">4.4</span>),<br>(<span class="hljs-number">33</span>, <span class="hljs-number">12</span>, -<span class="hljs-number">4</span>),<br>(<span class="hljs-number">34</span>, <span class="hljs-number">12</span>, -<span class="hljs-number">2.2</span>),<br>(<span class="hljs-number">38</span>, <span class="hljs-number">12</span>, -<span class="hljs-number">6.7</span>),<br>(<span class="hljs-number">39</span>, <span class="hljs-number">12</span>, -<span class="hljs-number">7</span>),<br>(<span class="hljs-number">40</span>, <span class="hljs-number">12</span>, -<span class="hljs-number">5.8</span>),<br>(<span class="hljs-number">41</span>, <span class="hljs-number">12</span>, -<span class="hljs-number">2.9</span>),<br>(<span class="hljs-number">42</span>, <span class="hljs-number">12</span>, -<span class="hljs-number">2.9</span>),<br>(<span class="hljs-number">48</span>, <span class="hljs-number">12</span>, -<span class="hljs-number">5.7</span>),<br>(<span class="hljs-number">49</span>, <span class="hljs-number">12</span>, -<span class="hljs-number">5.3</span>),<br>(<span class="hljs-number">50</span>, <span class="hljs-number">12</span>, -<span class="hljs-number">3.9</span>),<br>(<span class="hljs-number">56</span>, <span class="hljs-number">12</span>, -<span class="hljs-number">5.2</span>),<br>(<span class="hljs-number">57</span>, <span class="hljs-number">12</span>, -<span class="hljs-number">6</span>),<br>(<span class="hljs-number">59</span>, <span class="hljs-number">12</span>, -<span class="hljs-number">2.6</span>),<br>(<span class="hljs-number">60</span>, <span class="hljs-number">12</span>, -<span class="hljs-number">3.9</span>),<br>(<span class="hljs-number">61</span>, <span class="hljs-number">12</span>, -<span class="hljs-number">5.5</span>),<br>(<span class="hljs-number">65</span>, <span class="hljs-number">12</span>, -<span class="hljs-number">6.5</span>),<br>(<span class="hljs-number">66</span>, <span class="hljs-number">12</span>, -<span class="hljs-number">4.7</span>),<br>(<span class="hljs-number">68</span>, <span class="hljs-number">12</span>, -<span class="hljs-number">5.2</span>),<br>(<span class="hljs-number">69</span>, <span class="hljs-number">12</span>, -<span class="hljs-number">3.4</span>),<br>(<span class="hljs-number">70</span>, <span class="hljs-number">12</span>, -<span class="hljs-number">2.6</span>),<br>(<span class="hljs-number">74</span>, <span class="hljs-number">12</span>, -<span class="hljs-number">3.3</span>),<br>(<span class="hljs-number">75</span>, <span class="hljs-number">12</span>, -<span class="hljs-number">3.3</span>),<br>(<span class="hljs-number">76</span>, <span class="hljs-number">12</span>, -<span class="hljs-number">5.9</span>),<br>(<span class="hljs-number">77</span>, <span class="hljs-number">12</span>, -<span class="hljs-number">6.4</span>),<br>(<span class="hljs-number">78</span>, <span class="hljs-number">12</span>, -<span class="hljs-number">6.1</span>),<br>(<span class="hljs-number">83</span>, <span class="hljs-number">12</span>, -<span class="hljs-number">5.2</span>),<br>(<span class="hljs-number">84</span>, <span class="hljs-number">12</span>, -<span class="hljs-number">4.3</span>),<br>(<span class="hljs-number">86</span>, <span class="hljs-number">12</span>, -<span class="hljs-number">4.1</span>),<br>(<span class="hljs-number">87</span>, <span class="hljs-number">12</span>, -<span class="hljs-number">2.2</span>),<br>(<span class="hljs-number">88</span>, <span class="hljs-number">12</span>, -<span class="hljs-number">5.1</span>),<br>(<span class="hljs-number">92</span>, <span class="hljs-number">12</span>, -<span class="hljs-number">3.3</span>),<br>(<span class="hljs-number">93</span>, <span class="hljs-number">12</span>, -<span class="hljs-number">6.2</span>),<br>(<span class="hljs-number">95</span>, <span class="hljs-number">12</span>, -<span class="hljs-number">7</span>),<br>(<span class="hljs-number">96</span>, <span class="hljs-number">12</span>, -<span class="hljs-number">3.1</span>),<br>(<span class="hljs-number">97</span>, <span class="hljs-number">12</span>, -<span class="hljs-number">5</span>),<br>(<span class="hljs-number">12</span>, <span class="hljs-number">13</span>, -<span class="hljs-number">6.8</span>),<br>(<span class="hljs-number">13</span>, <span class="hljs-number">13</span>, -<span class="hljs-number">5.5</span>),<br>(<span class="hljs-number">14</span>, <span class="hljs-number">13</span>, -<span class="hljs-number">4.9</span>),<br>(<span class="hljs-number">22</span>, <span class="hljs-number">13</span>, -<span class="hljs-number">5.5</span>),<br>(<span class="hljs-number">23</span>, <span class="hljs-number">13</span>, -<span class="hljs-number">6.6</span>),<br>(<span class="hljs-number">29</span>, <span class="hljs-number">13</span>, -<span class="hljs-number">3</span>),<br>(<span class="hljs-number">30</span>, <span class="hljs-number">13</span>, -<span class="hljs-number">3.5</span>),<br>(<span class="hljs-number">33</span>, <span class="hljs-number">13</span>, -<span class="hljs-number">2.8</span>),<br>(<span class="hljs-number">34</span>, <span class="hljs-number">13</span>, -<span class="hljs-number">2.5</span>),<br>(<span class="hljs-number">38</span>, <span class="hljs-number">13</span>, -<span class="hljs-number">6.9</span>),<br>(<span class="hljs-number">39</span>, <span class="hljs-number">13</span>, -<span class="hljs-number">2.5</span>),<br>(<span class="hljs-number">40</span>, <span class="hljs-number">13</span>, -<span class="hljs-number">4.2</span>),<br>(<span class="hljs-number">41</span>, <span class="hljs-number">13</span>, -<span class="hljs-number">3.8</span>),<br>(<span class="hljs-number">55</span>, <span class="hljs-number">13</span>, -<span class="hljs-number">5.2</span>),<br>(<span class="hljs-number">56</span>, <span class="hljs-number">13</span>, -<span class="hljs-number">4.4</span>),<br>(<span class="hljs-number">57</span>, <span class="hljs-number">13</span>, -<span class="hljs-number">2.9</span>),<br>(<span class="hljs-number">60</span>, <span class="hljs-number">13</span>, -<span class="hljs-number">3.2</span>),<br>(<span class="hljs-number">61</span>, <span class="hljs-number">13</span>, -<span class="hljs-number">4.1</span>),<br>(<span class="hljs-number">65</span>, <span class="hljs-number">13</span>, -<span class="hljs-number">5.1</span>),<br>(<span class="hljs-number">66</span>, <span class="hljs-number">13</span>, -<span class="hljs-number">5.6</span>),<br>(<span class="hljs-number">69</span>, <span class="hljs-number">13</span>, -<span class="hljs-number">3</span>),<br>(<span class="hljs-number">70</span>, <span class="hljs-number">13</span>, -<span class="hljs-number">6.8</span>),<br>(<span class="hljs-number">71</span>, <span class="hljs-number">13</span>, -<span class="hljs-number">4.4</span>),<br>(<span class="hljs-number">74</span>, <span class="hljs-number">13</span>, -<span class="hljs-number">4.4</span>),<br>(<span class="hljs-number">75</span>, <span class="hljs-number">13</span>, -<span class="hljs-number">6.4</span>),<br>(<span class="hljs-number">76</span>, <span class="hljs-number">13</span>, -<span class="hljs-number">3.6</span>),<br>(<span class="hljs-number">77</span>, <span class="hljs-number">13</span>, -<span class="hljs-number">3</span>),<br>(<span class="hljs-number">83</span>, <span class="hljs-number">13</span>, -<span class="hljs-number">2.4</span>),<br>(<span class="hljs-number">84</span>, <span class="hljs-number">13</span>, -<span class="hljs-number">4.9</span>),<br>(<span class="hljs-number">87</span>, <span class="hljs-number">13</span>, -<span class="hljs-number">5</span>),<br>(<span class="hljs-number">88</span>, <span class="hljs-number">13</span>, -<span class="hljs-number">4.9</span>),<br>(<span class="hljs-number">89</span>, <span class="hljs-number">13</span>, -<span class="hljs-number">5.6</span>),<br>(<span class="hljs-number">91</span>, <span class="hljs-number">13</span>, -<span class="hljs-number">6.6</span>),<br>(<span class="hljs-number">92</span>, <span class="hljs-number">13</span>, -<span class="hljs-number">5.1</span>),<br>(<span class="hljs-number">93</span>, <span class="hljs-number">13</span>, -<span class="hljs-number">2.1</span>),<br>(<span class="hljs-number">96</span>, <span class="hljs-number">13</span>, -<span class="hljs-number">3.3</span>),<br>(<span class="hljs-number">97</span>, <span class="hljs-number">13</span>, -<span class="hljs-number">6</span>),<br>(<span class="hljs-number">13</span>, <span class="hljs-number">14</span>, -<span class="hljs-number">4.1</span>),<br>(<span class="hljs-number">14</span>, <span class="hljs-number">14</span>, -<span class="hljs-number">6.1</span>),<br>(<span class="hljs-number">22</span>, <span class="hljs-number">14</span>, -<span class="hljs-number">3.1</span>),<br>(<span class="hljs-number">23</span>, <span class="hljs-number">14</span>, -<span class="hljs-number">2.4</span>),<br>(<span class="hljs-number">30</span>, <span class="hljs-number">14</span>, -<span class="hljs-number">6</span>),<br>(<span class="hljs-number">31</span>, <span class="hljs-number">14</span>, -<span class="hljs-number">4.6</span>),<br>(<span class="hljs-number">32</span>, <span class="hljs-number">14</span>, -<span class="hljs-number">6.7</span>),<br>(<span class="hljs-number">33</span>, <span class="hljs-number">14</span>, -<span class="hljs-number">3.5</span>),<br>(<span class="hljs-number">34</span>, <span class="hljs-number">14</span>, -<span class="hljs-number">4.7</span>),<br>(<span class="hljs-number">39</span>, <span class="hljs-number">14</span>, -<span class="hljs-number">5.1</span>),<br>(<span class="hljs-number">40</span>, <span class="hljs-number">14</span>, -<span class="hljs-number">5.3</span>),<br>(<span class="hljs-number">41</span>, <span class="hljs-number">14</span>, -<span class="hljs-number">5.3</span>),<br>(<span class="hljs-number">42</span>, <span class="hljs-number">14</span>, -<span class="hljs-number">4.8</span>),<br>(<span class="hljs-number">43</span>, <span class="hljs-number">14</span>, -<span class="hljs-number">4.8</span>),<br>(<span class="hljs-number">56</span>, <span class="hljs-number">14</span>, -<span class="hljs-number">6.5</span>),<br>(<span class="hljs-number">57</span>, <span class="hljs-number">14</span>, -<span class="hljs-number">6.3</span>),<br>(<span class="hljs-number">60</span>, <span class="hljs-number">14</span>, -<span class="hljs-number">4.2</span>),<br>(<span class="hljs-number">61</span>, <span class="hljs-number">14</span>, -<span class="hljs-number">4.8</span>),<br>(<span class="hljs-number">62</span>, <span class="hljs-number">14</span>, -<span class="hljs-number">4.3</span>),<br>(<span class="hljs-number">65</span>, <span class="hljs-number">14</span>, -<span class="hljs-number">4.1</span>),<br>(<span class="hljs-number">66</span>, <span class="hljs-number">14</span>, -<span class="hljs-number">6</span>),<br>(<span class="hljs-number">70</span>, <span class="hljs-number">14</span>, -<span class="hljs-number">2.4</span>),<br>(<span class="hljs-number">71</span>, <span class="hljs-number">14</span>, -<span class="hljs-number">4.3</span>),<br>(<span class="hljs-number">75</span>, <span class="hljs-number">14</span>, -<span class="hljs-number">4.5</span>),<br>(<span class="hljs-number">76</span>, <span class="hljs-number">14</span>, -<span class="hljs-number">5.3</span>),<br>(<span class="hljs-number">77</span>, <span class="hljs-number">14</span>, -<span class="hljs-number">6.9</span>),<br>(<span class="hljs-number">78</span>, <span class="hljs-number">14</span>, -<span class="hljs-number">4.1</span>),<br>(<span class="hljs-number">79</span>, <span class="hljs-number">14</span>, -<span class="hljs-number">4.4</span>),<br>(<span class="hljs-number">83</span>, <span class="hljs-number">14</span>, -<span class="hljs-number">4.3</span>),<br>(<span class="hljs-number">84</span>, <span class="hljs-number">14</span>, -<span class="hljs-number">6.6</span>),<br>(<span class="hljs-number">88</span>, <span class="hljs-number">14</span>, -<span class="hljs-number">6.1</span>),<br>(<span class="hljs-number">89</span>, <span class="hljs-number">14</span>, -<span class="hljs-number">4.3</span>),<br>(<span class="hljs-number">92</span>, <span class="hljs-number">14</span>, -<span class="hljs-number">4.1</span>),<br>(<span class="hljs-number">93</span>, <span class="hljs-number">14</span>, -<span class="hljs-number">4.1</span>),<br>(<span class="hljs-number">96</span>, <span class="hljs-number">14</span>, -<span class="hljs-number">3.1</span>),<br>(<span class="hljs-number">97</span>, <span class="hljs-number">14</span>, -<span class="hljs-number">5.4</span>),<br>(<span class="hljs-number">98</span>, <span class="hljs-number">14</span>, -<span class="hljs-number">3</span>),<br>(<span class="hljs-number">13</span>, <span class="hljs-number">15</span>, -<span class="hljs-number">4.2</span>),<br>(<span class="hljs-number">14</span>, <span class="hljs-number">15</span>, -<span class="hljs-number">2.8</span>),<br>(<span class="hljs-number">23</span>, <span class="hljs-number">15</span>, -<span class="hljs-number">5.5</span>),<br>(<span class="hljs-number">24</span>, <span class="hljs-number">15</span>, -<span class="hljs-number">2.7</span>),<br>(<span class="hljs-number">33</span>, <span class="hljs-number">15</span>, -<span class="hljs-number">5.9</span>),<br>(<span class="hljs-number">34</span>, <span class="hljs-number">15</span>, -<span class="hljs-number">4.3</span>),<br>(<span class="hljs-number">35</span>, <span class="hljs-number">15</span>, -<span class="hljs-number">3.3</span>),<br>(<span class="hljs-number">39</span>, <span class="hljs-number">15</span>, -<span class="hljs-number">4.8</span>),<br>(<span class="hljs-number">40</span>, <span class="hljs-number">15</span>, -<span class="hljs-number">4.5</span>),<br>(<span class="hljs-number">42</span>, <span class="hljs-number">15</span>, -<span class="hljs-number">2.5</span>),<br>(<span class="hljs-number">43</span>, <span class="hljs-number">15</span>, -<span class="hljs-number">3</span>),<br>(<span class="hljs-number">56</span>, <span class="hljs-number">15</span>, -<span class="hljs-number">4.5</span>),<br>(<span class="hljs-number">57</span>, <span class="hljs-number">15</span>, -<span class="hljs-number">5.5</span>),<br>(<span class="hljs-number">61</span>, <span class="hljs-number">15</span>, -<span class="hljs-number">2.9</span>),<br>(<span class="hljs-number">62</span>, <span class="hljs-number">15</span>, -<span class="hljs-number">6.8</span>),<br>(<span class="hljs-number">65</span>, <span class="hljs-number">15</span>, -<span class="hljs-number">2.4</span>),<br>(<span class="hljs-number">66</span>, <span class="hljs-number">15</span>, -<span class="hljs-number">3.1</span>),<br>(<span class="hljs-number">70</span>, <span class="hljs-number">15</span>, -<span class="hljs-number">4.1</span>),<br>(<span class="hljs-number">71</span>, <span class="hljs-number">15</span>, -<span class="hljs-number">2.5</span>),<br>(<span class="hljs-number">75</span>, <span class="hljs-number">15</span>, -<span class="hljs-number">4.8</span>),<br>(<span class="hljs-number">76</span>, <span class="hljs-number">15</span>, -<span class="hljs-number">7</span>),<br>(<span class="hljs-number">78</span>, <span class="hljs-number">15</span>, -<span class="hljs-number">6.2</span>),<br>(<span class="hljs-number">79</span>, <span class="hljs-number">15</span>, -<span class="hljs-number">4.2</span>),<br>(<span class="hljs-number">83</span>, <span class="hljs-number">15</span>, -<span class="hljs-number">2.5</span>),<br>(<span class="hljs-number">84</span>, <span class="hljs-number">15</span>, -<span class="hljs-number">4.4</span>),<br>(<span class="hljs-number">88</span>, <span class="hljs-number">15</span>, -<span class="hljs-number">3.3</span>),<br>(<span class="hljs-number">89</span>, <span class="hljs-number">15</span>, -<span class="hljs-number">4.2</span>),<br>(<span class="hljs-number">92</span>, <span class="hljs-number">15</span>, -<span class="hljs-number">4.8</span>),<br>(<span class="hljs-number">93</span>, <span class="hljs-number">15</span>, -<span class="hljs-number">2.5</span>),<br>(<span class="hljs-number">97</span>, <span class="hljs-number">15</span>, -<span class="hljs-number">2.8</span>),<br>(<span class="hljs-number">98</span>, <span class="hljs-number">15</span>, -<span class="hljs-number">3.1</span>),<br>(<span class="hljs-number">14</span>, <span class="hljs-number">16</span>, -<span class="hljs-number">4.4</span>),<br>(<span class="hljs-number">15</span>, <span class="hljs-number">16</span>, -<span class="hljs-number">6.3</span>),<br>(<span class="hljs-number">23</span>, <span class="hljs-number">16</span>, -<span class="hljs-number">2.9</span>),<br>(<span class="hljs-number">24</span>, <span class="hljs-number">16</span>, -<span class="hljs-number">4.8</span>),<br>(<span class="hljs-number">30</span>, <span class="hljs-number">16</span>, -<span class="hljs-number">5.1</span>),<br>(<span class="hljs-number">31</span>, <span class="hljs-number">16</span>, -<span class="hljs-number">4.7</span>),<br>(<span class="hljs-number">34</span>, <span class="hljs-number">16</span>, -<span class="hljs-number">5</span>),<br>(<span class="hljs-number">35</span>, <span class="hljs-number">16</span>, -<span class="hljs-number">4.8</span>),<br>(<span class="hljs-number">39</span>, <span class="hljs-number">16</span>, -<span class="hljs-number">4.9</span>),<br>(<span class="hljs-number">40</span>, <span class="hljs-number">16</span>, -<span class="hljs-number">4.5</span>),<br>(<span class="hljs-number">42</span>, <span class="hljs-number">16</span>, -<span class="hljs-number">2.8</span>),<br>(<span class="hljs-number">43</span>, <span class="hljs-number">16</span>, -<span class="hljs-number">6.4</span>),<br>(<span class="hljs-number">44</span>, <span class="hljs-number">16</span>, -<span class="hljs-number">3.7</span>),<br>(<span class="hljs-number">57</span>, <span class="hljs-number">16</span>, -<span class="hljs-number">5.9</span>),<br>(<span class="hljs-number">58</span>, <span class="hljs-number">16</span>, -<span class="hljs-number">3.4</span>),<br>(<span class="hljs-number">61</span>, <span class="hljs-number">16</span>, -<span class="hljs-number">6.2</span>),<br>(<span class="hljs-number">62</span>, <span class="hljs-number">16</span>, -<span class="hljs-number">2.3</span>),<br>(<span class="hljs-number">66</span>, <span class="hljs-number">16</span>, -<span class="hljs-number">2.4</span>),<br>(<span class="hljs-number">67</span>, <span class="hljs-number">16</span>, -<span class="hljs-number">5.8</span>),<br>(<span class="hljs-number">70</span>, <span class="hljs-number">16</span>, -<span class="hljs-number">4.4</span>),<br>(<span class="hljs-number">71</span>, <span class="hljs-number">16</span>, -<span class="hljs-number">3.5</span>),<br>(<span class="hljs-number">75</span>, <span class="hljs-number">16</span>, -<span class="hljs-number">6.5</span>),<br>(<span class="hljs-number">76</span>, <span class="hljs-number">16</span>, -<span class="hljs-number">5.6</span>),<br>(<span class="hljs-number">78</span>, <span class="hljs-number">16</span>, -<span class="hljs-number">5.7</span>),<br>(<span class="hljs-number">79</span>, <span class="hljs-number">16</span>, -<span class="hljs-number">3.7</span>),<br>(<span class="hljs-number">80</span>, <span class="hljs-number">16</span>, -<span class="hljs-number">6.2</span>),<br>(<span class="hljs-number">84</span>, <span class="hljs-number">16</span>, -<span class="hljs-number">3.9</span>),<br>(<span class="hljs-number">85</span>, <span class="hljs-number">16</span>, -<span class="hljs-number">6.4</span>),<br>(<span class="hljs-number">88</span>, <span class="hljs-number">16</span>, -<span class="hljs-number">4.6</span>),<br>(<span class="hljs-number">89</span>, <span class="hljs-number">16</span>, -<span class="hljs-number">6</span>),<br>(<span class="hljs-number">93</span>, <span class="hljs-number">16</span>, -<span class="hljs-number">3</span>),<br>(<span class="hljs-number">94</span>, <span class="hljs-number">16</span>, -<span class="hljs-number">2.1</span>),<br>(<span class="hljs-number">97</span>, <span class="hljs-number">16</span>, -<span class="hljs-number">4.2</span>),<br>(<span class="hljs-number">98</span>, <span class="hljs-number">16</span>, -<span class="hljs-number">3.9</span>),<br>(<span class="hljs-number">12</span>, <span class="hljs-number">17</span>, -<span class="hljs-number">6</span>),<br>(<span class="hljs-number">13</span>, <span class="hljs-number">17</span>, -<span class="hljs-number">6.2</span>),<br>(<span class="hljs-number">14</span>, <span class="hljs-number">17</span>, -<span class="hljs-number">2.7</span>),<br>(<span class="hljs-number">15</span>, <span class="hljs-number">17</span>, -<span class="hljs-number">5.3</span>),<br>(<span class="hljs-number">16</span>, <span class="hljs-number">17</span>, -<span class="hljs-number">7</span>),<br>(<span class="hljs-number">17</span>, <span class="hljs-number">17</span>, -<span class="hljs-number">5.9</span>),<br>(<span class="hljs-number">23</span>, <span class="hljs-number">17</span>, -<span class="hljs-number">2.4</span>),<br>(<span class="hljs-number">24</span>, <span class="hljs-number">17</span>, -<span class="hljs-number">3.9</span>),<br>(<span class="hljs-number">31</span>, <span class="hljs-number">17</span>, -<span class="hljs-number">7</span>),<br>(<span class="hljs-number">32</span>, <span class="hljs-number">17</span>, -<span class="hljs-number">6.5</span>),<br>(<span class="hljs-number">33</span>, <span class="hljs-number">17</span>, -<span class="hljs-number">4.1</span>),<br>(<span class="hljs-number">34</span>, <span class="hljs-number">17</span>, -<span class="hljs-number">2.3</span>),<br>(<span class="hljs-number">35</span>, <span class="hljs-number">17</span>, -<span class="hljs-number">4.8</span>),<br>(<span class="hljs-number">40</span>, <span class="hljs-number">17</span>, -<span class="hljs-number">5.7</span>),<br>(<span class="hljs-number">41</span>, <span class="hljs-number">17</span>, -<span class="hljs-number">6.7</span>),<br>(<span class="hljs-number">42</span>, <span class="hljs-number">17</span>, -<span class="hljs-number">6.7</span>),<br>(<span class="hljs-number">43</span>, <span class="hljs-number">17</span>, -<span class="hljs-number">5.1</span>),<br>(<span class="hljs-number">44</span>, <span class="hljs-number">17</span>, -<span class="hljs-number">6.6</span>),<br>(<span class="hljs-number">45</span>, <span class="hljs-number">17</span>, -<span class="hljs-number">4.4</span>),<br>(<span class="hljs-number">50</span>, <span class="hljs-number">17</span>, -<span class="hljs-number">3.5</span>),<br>(<span class="hljs-number">51</span>, <span class="hljs-number">17</span>, -<span class="hljs-number">2.5</span>),<br>(<span class="hljs-number">58</span>, <span class="hljs-number">17</span>, -<span class="hljs-number">6.7</span>),<br>(<span class="hljs-number">59</span>, <span class="hljs-number">17</span>, -<span class="hljs-number">4.8</span>),<br>(<span class="hljs-number">60</span>, <span class="hljs-number">17</span>, -<span class="hljs-number">6.4</span>),<br>(<span class="hljs-number">61</span>, <span class="hljs-number">17</span>, -<span class="hljs-number">3</span>),<br>(<span class="hljs-number">62</span>, <span class="hljs-number">17</span>, -<span class="hljs-number">6.9</span>),<br>(<span class="hljs-number">63</span>, <span class="hljs-number">17</span>, -<span class="hljs-number">4.6</span>),<br>(<span class="hljs-number">67</span>, <span class="hljs-number">17</span>, -<span class="hljs-number">6.5</span>),<br>(<span class="hljs-number">68</span>, <span class="hljs-number">17</span>, -<span class="hljs-number">5.2</span>),<br>(<span class="hljs-number">69</span>, <span class="hljs-number">17</span>, -<span class="hljs-number">3.9</span>),<br>(<span class="hljs-number">70</span>, <span class="hljs-number">17</span>, -<span class="hljs-number">6.8</span>),<br>(<span class="hljs-number">71</span>, <span class="hljs-number">17</span>, -<span class="hljs-number">4.2</span>),<br>(<span class="hljs-number">76</span>, <span class="hljs-number">17</span>, -<span class="hljs-number">3.5</span>),<br>(<span class="hljs-number">77</span>, <span class="hljs-number">17</span>, -<span class="hljs-number">6.9</span>),<br>(<span class="hljs-number">78</span>, <span class="hljs-number">17</span>, -<span class="hljs-number">5.7</span>),<br>(<span class="hljs-number">79</span>, <span class="hljs-number">17</span>, -<span class="hljs-number">6</span>),<br>(<span class="hljs-number">80</span>, <span class="hljs-number">17</span>, -<span class="hljs-number">3.3</span>),<br>(<span class="hljs-number">81</span>, <span class="hljs-number">17</span>, -<span class="hljs-number">3.4</span>),<br>(<span class="hljs-number">85</span>, <span class="hljs-number">17</span>, -<span class="hljs-number">2.5</span>),<br>(<span class="hljs-number">86</span>, <span class="hljs-number">17</span>, -<span class="hljs-number">6.3</span>),<br>(<span class="hljs-number">87</span>, <span class="hljs-number">17</span>, -<span class="hljs-number">3.6</span>),<br>(<span class="hljs-number">88</span>, <span class="hljs-number">17</span>, -<span class="hljs-number">7</span>),<br>(<span class="hljs-number">89</span>, <span class="hljs-number">17</span>, -<span class="hljs-number">2.5</span>),<br>(<span class="hljs-number">94</span>, <span class="hljs-number">17</span>, -<span class="hljs-number">4.3</span>),<br>(<span class="hljs-number">95</span>, <span class="hljs-number">17</span>, -<span class="hljs-number">4.1</span>),<br>(<span class="hljs-number">96</span>, <span class="hljs-number">17</span>, -<span class="hljs-number">6.9</span>),<br>(<span class="hljs-number">97</span>, <span class="hljs-number">17</span>, -<span class="hljs-number">2.6</span>),<br>(<span class="hljs-number">98</span>, <span class="hljs-number">17</span>, -<span class="hljs-number">3.7</span>),<br>(<span class="hljs-number">99</span>, <span class="hljs-number">17</span>, -<span class="hljs-number">2.3</span>),<br>(<span class="hljs-number">14</span>, <span class="hljs-number">18</span>, -<span class="hljs-number">3.1</span>),<br>(<span class="hljs-number">15</span>, <span class="hljs-number">18</span>, -<span class="hljs-number">3.5</span>),<br>(<span class="hljs-number">24</span>, <span class="hljs-number">18</span>, -<span class="hljs-number">5.9</span>),<br>(<span class="hljs-number">25</span>, <span class="hljs-number">18</span>, -<span class="hljs-number">4.4</span>),<br>(<span class="hljs-number">62</span>, <span class="hljs-number">18</span>, -<span class="hljs-number">2.2</span>),<br>(<span class="hljs-number">63</span>, <span class="hljs-number">18</span>, -<span class="hljs-number">6.1</span>),<br>(<span class="hljs-number">98</span>, <span class="hljs-number">18</span>, -<span class="hljs-number">4.2</span>),<br>(<span class="hljs-number">99</span>, <span class="hljs-number">18</span>, -<span class="hljs-number">4.5</span>),<br>(<span class="hljs-number">15</span>, <span class="hljs-number">19</span>, -<span class="hljs-number">5</span>),<br>(<span class="hljs-number">16</span>, <span class="hljs-number">19</span>, -<span class="hljs-number">5.8</span>),<br>(<span class="hljs-number">24</span>, <span class="hljs-number">19</span>, -<span class="hljs-number">2.1</span>),<br>(<span class="hljs-number">25</span>, <span class="hljs-number">19</span>, -<span class="hljs-number">6.4</span>),<br>(<span class="hljs-number">62</span>, <span class="hljs-number">19</span>, -<span class="hljs-number">5.7</span>),<br>(<span class="hljs-number">63</span>, <span class="hljs-number">19</span>, -<span class="hljs-number">2.2</span>),<br>(<span class="hljs-number">98</span>, <span class="hljs-number">19</span>, -<span class="hljs-number">6.5</span>),<br>(<span class="hljs-number">99</span>, <span class="hljs-number">19</span>, -<span class="hljs-number">2.4</span>),<br>(<span class="hljs-number">15</span>, <span class="hljs-number">20</span>, -<span class="hljs-number">5.3</span>),<br>(<span class="hljs-number">16</span>, <span class="hljs-number">20</span>, -<span class="hljs-number">5.9</span>),<br>(<span class="hljs-number">17</span>, <span class="hljs-number">20</span>, -<span class="hljs-number">2.2</span>),<br>(<span class="hljs-number">18</span>, <span class="hljs-number">20</span>, -<span class="hljs-number">5.9</span>),<br>(<span class="hljs-number">19</span>, <span class="hljs-number">20</span>, -<span class="hljs-number">6.5</span>),<br>(<span class="hljs-number">24</span>, <span class="hljs-number">20</span>, -<span class="hljs-number">5</span>),<br>(<span class="hljs-number">25</span>, <span class="hljs-number">20</span>, -<span class="hljs-number">4.4</span>),<br>(<span class="hljs-number">26</span>, <span class="hljs-number">20</span>, -<span class="hljs-number">4.9</span>),<br>(<span class="hljs-number">63</span>, <span class="hljs-number">20</span>, -<span class="hljs-number">6.3</span>),<br>(<span class="hljs-number">64</span>, <span class="hljs-number">20</span>, -<span class="hljs-number">2.3</span>),<br>(<span class="hljs-number">99</span>, <span class="hljs-number">20</span>, -<span class="hljs-number">4.6</span>),<br>(<span class="hljs-number">100</span>, <span class="hljs-number">20</span>, -<span class="hljs-number">4.6</span>),<br>(-<span class="hljs-number">7</span>, -<span class="hljs-number">22</span>, -<span class="hljs-number">69.8</span>),<br>(-<span class="hljs-number">6</span>, -<span class="hljs-number">22</span>, -<span class="hljs-number">66.8</span>),<br>(-<span class="hljs-number">5</span>, -<span class="hljs-number">22</span>, -<span class="hljs-number">66.5</span>),<br>(-<span class="hljs-number">8</span>, -<span class="hljs-number">21</span>, -<span class="hljs-number">67.4</span>),<br>(-<span class="hljs-number">7</span>, -<span class="hljs-number">21</span>, -<span class="hljs-number">70</span>),<br>(-<span class="hljs-number">6</span>, -<span class="hljs-number">21</span>, -<span class="hljs-number">69.7</span>),<br>(-<span class="hljs-number">5</span>, -<span class="hljs-number">21</span>, -<span class="hljs-number">65.4</span>),<br>(-<span class="hljs-number">4</span>, -<span class="hljs-number">21</span>, -<span class="hljs-number">65.8</span>),<br>(-<span class="hljs-number">9</span>, -<span class="hljs-number">20</span>, -<span class="hljs-number">68</span>),<br>(-<span class="hljs-number">8</span>, -<span class="hljs-number">20</span>, -<span class="hljs-number">68.4</span>),<br>(-<span class="hljs-number">7</span>, -<span class="hljs-number">20</span>, -<span class="hljs-number">66</span>),<br>(-<span class="hljs-number">6</span>, -<span class="hljs-number">20</span>, -<span class="hljs-number">65.5</span>),<br>(-<span class="hljs-number">5</span>, -<span class="hljs-number">20</span>, -<span class="hljs-number">66.7</span>),<br>(-<span class="hljs-number">4</span>, -<span class="hljs-number">20</span>, -<span class="hljs-number">65.2</span>),<br>(-<span class="hljs-number">3</span>, -<span class="hljs-number">20</span>, -<span class="hljs-number">67.9</span>),<br>(-<span class="hljs-number">10</span>, -<span class="hljs-number">19</span>, -<span class="hljs-number">66.8</span>),<br>(-<span class="hljs-number">9</span>, -<span class="hljs-number">19</span>, -<span class="hljs-number">68.7</span>),<br>(-<span class="hljs-number">8</span>, -<span class="hljs-number">19</span>, -<span class="hljs-number">68.9</span>),<br>(-<span class="hljs-number">7</span>, -<span class="hljs-number">19</span>, -<span class="hljs-number">68.1</span>),<br>(-<span class="hljs-number">6</span>, -<span class="hljs-number">19</span>, -<span class="hljs-number">69.5</span>),<br>(-<span class="hljs-number">5</span>, -<span class="hljs-number">19</span>, -<span class="hljs-number">66.5</span>),<br>(-<span class="hljs-number">4</span>, -<span class="hljs-number">19</span>, -<span class="hljs-number">69.4</span>),<br>(-<span class="hljs-number">3</span>, -<span class="hljs-number">19</span>, -<span class="hljs-number">67</span>),<br>(-<span class="hljs-number">2</span>, -<span class="hljs-number">19</span>, -<span class="hljs-number">65.6</span>),<br>(-<span class="hljs-number">11</span>, -<span class="hljs-number">18</span>, -<span class="hljs-number">68.6</span>),<br>(-<span class="hljs-number">10</span>, -<span class="hljs-number">18</span>, -<span class="hljs-number">69.2</span>),<br>(-<span class="hljs-number">9</span>, -<span class="hljs-number">18</span>, -<span class="hljs-number">66.8</span>),<br>(-<span class="hljs-number">8</span>, -<span class="hljs-number">18</span>, -<span class="hljs-number">65.4</span>),<br>(-<span class="hljs-number">7</span>, -<span class="hljs-number">18</span>, -<span class="hljs-number">69.6</span>),<br>(-<span class="hljs-number">6</span>, -<span class="hljs-number">18</span>, -<span class="hljs-number">66.1</span>),<br>(-<span class="hljs-number">5</span>, -<span class="hljs-number">18</span>, -<span class="hljs-number">66.4</span>),<br>(-<span class="hljs-number">4</span>, -<span class="hljs-number">18</span>, -<span class="hljs-number">65.8</span>),<br>(-<span class="hljs-number">3</span>, -<span class="hljs-number">18</span>, -<span class="hljs-number">68.6</span>),<br>(-<span class="hljs-number">2</span>, -<span class="hljs-number">18</span>, -<span class="hljs-number">66.4</span>),<br>(-<span class="hljs-number">1</span>, -<span class="hljs-number">18</span>, -<span class="hljs-number">68.4</span>),<br>(-<span class="hljs-number">12</span>, -<span class="hljs-number">17</span>, -<span class="hljs-number">65.3</span>),<br>(-<span class="hljs-number">11</span>, -<span class="hljs-number">17</span>, -<span class="hljs-number">67.4</span>),<br>(-<span class="hljs-number">10</span>, -<span class="hljs-number">17</span>, -<span class="hljs-number">68.8</span>),<br>(-<span class="hljs-number">9</span>, -<span class="hljs-number">17</span>, -<span class="hljs-number">67.2</span>),<br>(-<span class="hljs-number">8</span>, -<span class="hljs-number">17</span>, -<span class="hljs-number">69.4</span>),<br>(-<span class="hljs-number">7</span>, -<span class="hljs-number">17</span>, -<span class="hljs-number">69.9</span>),<br>(-<span class="hljs-number">6</span>, -<span class="hljs-number">17</span>, -<span class="hljs-number">65.3</span>),<br>(-<span class="hljs-number">5</span>, -<span class="hljs-number">17</span>, -<span class="hljs-number">69.9</span>),<br>(-<span class="hljs-number">4</span>, -<span class="hljs-number">17</span>, -<span class="hljs-number">65.2</span>),<br>(-<span class="hljs-number">3</span>, -<span class="hljs-number">17</span>, -<span class="hljs-number">65.6</span>),<br>(-<span class="hljs-number">2</span>, -<span class="hljs-number">17</span>, -<span class="hljs-number">67.1</span>),<br>(-<span class="hljs-number">1</span>, -<span class="hljs-number">17</span>, -<span class="hljs-number">67.9</span>),<br>(<span class="hljs-number">0</span>, -<span class="hljs-number">17</span>, -<span class="hljs-number">68.5</span>),<br>(-<span class="hljs-number">13</span>, -<span class="hljs-number">16</span>, -<span class="hljs-number">69.1</span>),<br>(-<span class="hljs-number">12</span>, -<span class="hljs-number">16</span>, -<span class="hljs-number">67.2</span>),<br>(-<span class="hljs-number">11</span>, -<span class="hljs-number">16</span>, -<span class="hljs-number">69.3</span>),<br>(-<span class="hljs-number">10</span>, -<span class="hljs-number">16</span>, -<span class="hljs-number">66.8</span>),<br>(-<span class="hljs-number">9</span>, -<span class="hljs-number">16</span>, -<span class="hljs-number">68.2</span>),<br>(-<span class="hljs-number">8</span>, -<span class="hljs-number">16</span>, -<span class="hljs-number">67.9</span>),<br>(-<span class="hljs-number">7</span>, -<span class="hljs-number">16</span>, -<span class="hljs-number">67.1</span>),<br>(-<span class="hljs-number">5</span>, -<span class="hljs-number">16</span>, -<span class="hljs-number">65.8</span>),<br>(-<span class="hljs-number">4</span>, -<span class="hljs-number">16</span>, -<span class="hljs-number">66.5</span>),<br>(-<span class="hljs-number">3</span>, -<span class="hljs-number">16</span>, -<span class="hljs-number">65.1</span>),<br>(-<span class="hljs-number">2</span>, -<span class="hljs-number">16</span>, -<span class="hljs-number">68.7</span>),<br>(-<span class="hljs-number">1</span>, -<span class="hljs-number">16</span>, -<span class="hljs-number">69</span>),<br>(<span class="hljs-number">0</span>, -<span class="hljs-number">16</span>, -<span class="hljs-number">69.7</span>),<br>(<span class="hljs-number">1</span>, -<span class="hljs-number">16</span>, -<span class="hljs-number">65.6</span>),<br>(<span class="hljs-number">17</span>, -<span class="hljs-number">16</span>, -<span class="hljs-number">70</span>),<br>(<span class="hljs-number">18</span>, -<span class="hljs-number">16</span>, -<span class="hljs-number">69.5</span>),<br>(<span class="hljs-number">19</span>, -<span class="hljs-number">16</span>, -<span class="hljs-number">65.1</span>),<br>(-<span class="hljs-number">14</span>, -<span class="hljs-number">15</span>, -<span class="hljs-number">69.1</span>),<br>(-<span class="hljs-number">13</span>, -<span class="hljs-number">15</span>, -<span class="hljs-number">66.3</span>),<br>(-<span class="hljs-number">12</span>, -<span class="hljs-number">15</span>, -<span class="hljs-number">67.3</span>),<br>(-<span class="hljs-number">11</span>, -<span class="hljs-number">15</span>, -<span class="hljs-number">69.7</span>),<br>(-<span class="hljs-number">10</span>, -<span class="hljs-number">15</span>, -<span class="hljs-number">69</span>),<br>(-<span class="hljs-number">9</span>, -<span class="hljs-number">15</span>, -<span class="hljs-number">66.6</span>),<br>(-<span class="hljs-number">8</span>, -<span class="hljs-number">15</span>, -<span class="hljs-number">65.6</span>),<br>(-<span class="hljs-number">4</span>, -<span class="hljs-number">15</span>, -<span class="hljs-number">65.9</span>),<br>(-<span class="hljs-number">3</span>, -<span class="hljs-number">15</span>, -<span class="hljs-number">65.5</span>),<br>(-<span class="hljs-number">2</span>, -<span class="hljs-number">15</span>, -<span class="hljs-number">68.9</span>),<br>(-<span class="hljs-number">1</span>, -<span class="hljs-number">15</span>, -<span class="hljs-number">70</span>),<br>(<span class="hljs-number">0</span>, -<span class="hljs-number">15</span>, -<span class="hljs-number">67.7</span>),<br>(<span class="hljs-number">1</span>, -<span class="hljs-number">15</span>, -<span class="hljs-number">67.9</span>),<br>(<span class="hljs-number">2</span>, -<span class="hljs-number">15</span>, -<span class="hljs-number">69.1</span>),<br>(<span class="hljs-number">16</span>, -<span class="hljs-number">15</span>, -<span class="hljs-number">66.2</span>),<br>(<span class="hljs-number">17</span>, -<span class="hljs-number">15</span>, -<span class="hljs-number">65.3</span>),<br>(<span class="hljs-number">18</span>, -<span class="hljs-number">15</span>, -<span class="hljs-number">66</span>),<br>(<span class="hljs-number">19</span>, -<span class="hljs-number">15</span>, -<span class="hljs-number">67.1</span>),<br>(<span class="hljs-number">20</span>, -<span class="hljs-number">15</span>, -<span class="hljs-number">65.9</span>),<br>(-<span class="hljs-number">14</span>, -<span class="hljs-number">14</span>, -<span class="hljs-number">67.4</span>),<br>(-<span class="hljs-number">13</span>, -<span class="hljs-number">14</span>, -<span class="hljs-number">65.2</span>),<br>(-<span class="hljs-number">12</span>, -<span class="hljs-number">14</span>, -<span class="hljs-number">68.9</span>),<br>(-<span class="hljs-number">11</span>, -<span class="hljs-number">14</span>, -<span class="hljs-number">66.5</span>),<br>(-<span class="hljs-number">10</span>, -<span class="hljs-number">14</span>, -<span class="hljs-number">68.6</span>),<br>(-<span class="hljs-number">9</span>, -<span class="hljs-number">14</span>, -<span class="hljs-number">69.6</span>),<br>(-<span class="hljs-number">3</span>, -<span class="hljs-number">14</span>, -<span class="hljs-number">68.8</span>),<br>(-<span class="hljs-number">2</span>, -<span class="hljs-number">14</span>, -<span class="hljs-number">67.9</span>),<br>(-<span class="hljs-number">1</span>, -<span class="hljs-number">14</span>, -<span class="hljs-number">68.6</span>),<br>(<span class="hljs-number">0</span>, -<span class="hljs-number">14</span>, -<span class="hljs-number">67.8</span>),<br>(<span class="hljs-number">1</span>, -<span class="hljs-number">14</span>, -<span class="hljs-number">68.7</span>),<br>(<span class="hljs-number">2</span>, -<span class="hljs-number">14</span>, -<span class="hljs-number">66.2</span>),<br>(<span class="hljs-number">3</span>, -<span class="hljs-number">14</span>, -<span class="hljs-number">69.9</span>),<br>(<span class="hljs-number">15</span>, -<span class="hljs-number">14</span>, -<span class="hljs-number">67.5</span>),<br>(<span class="hljs-number">16</span>, -<span class="hljs-number">14</span>, -<span class="hljs-number">67.9</span>),<br>(<span class="hljs-number">17</span>, -<span class="hljs-number">14</span>, -<span class="hljs-number">67</span>),<br>(<span class="hljs-number">18</span>, -<span class="hljs-number">14</span>, -<span class="hljs-number">66.6</span>),<br>(<span class="hljs-number">19</span>, -<span class="hljs-number">14</span>, -<span class="hljs-number">68.6</span>),<br>(<span class="hljs-number">20</span>, -<span class="hljs-number">14</span>, -<span class="hljs-number">68.5</span>),<br>(-<span class="hljs-number">15</span>, -<span class="hljs-number">13</span>, -<span class="hljs-number">66</span>),<br>(-<span class="hljs-number">14</span>, -<span class="hljs-number">13</span>, -<span class="hljs-number">67.8</span>),<br>(-<span class="hljs-number">13</span>, -<span class="hljs-number">13</span>, -<span class="hljs-number">66.2</span>),<br>(-<span class="hljs-number">12</span>, -<span class="hljs-number">13</span>, -<span class="hljs-number">69.4</span>),<br>(-<span class="hljs-number">11</span>, -<span class="hljs-number">13</span>, -<span class="hljs-number">67.6</span>),<br>(-<span class="hljs-number">10</span>, -<span class="hljs-number">13</span>, -<span class="hljs-number">66.2</span>),<br>(-<span class="hljs-number">2</span>, -<span class="hljs-number">13</span>, -<span class="hljs-number">67.2</span>),<br>(-<span class="hljs-number">1</span>, -<span class="hljs-number">13</span>, -<span class="hljs-number">70</span>),<br>(<span class="hljs-number">0</span>, -<span class="hljs-number">13</span>, -<span class="hljs-number">68.9</span>),<br>(<span class="hljs-number">1</span>, -<span class="hljs-number">13</span>, -<span class="hljs-number">68</span>),<br>(<span class="hljs-number">2</span>, -<span class="hljs-number">13</span>, -<span class="hljs-number">68</span>),<br>(<span class="hljs-number">3</span>, -<span class="hljs-number">13</span>, -<span class="hljs-number">68.6</span>),<br>(<span class="hljs-number">4</span>, -<span class="hljs-number">13</span>, -<span class="hljs-number">65.4</span>),<br>(<span class="hljs-number">14</span>, -<span class="hljs-number">13</span>, -<span class="hljs-number">66.4</span>),<br>(<span class="hljs-number">15</span>, -<span class="hljs-number">13</span>, -<span class="hljs-number">68.3</span>),<br>(<span class="hljs-number">16</span>, -<span class="hljs-number">13</span>, -<span class="hljs-number">68.7</span>),<br>(<span class="hljs-number">17</span>, -<span class="hljs-number">13</span>, -<span class="hljs-number">68.7</span>),<br>(<span class="hljs-number">18</span>, -<span class="hljs-number">13</span>, -<span class="hljs-number">69.9</span>),<br>(<span class="hljs-number">19</span>, -<span class="hljs-number">13</span>, -<span class="hljs-number">66.3</span>),<br>(<span class="hljs-number">20</span>, -<span class="hljs-number">13</span>, -<span class="hljs-number">65.2</span>),<br>(-<span class="hljs-number">16</span>, -<span class="hljs-number">12</span>, -<span class="hljs-number">69.9</span>),<br>(-<span class="hljs-number">15</span>, -<span class="hljs-number">12</span>, -<span class="hljs-number">66.9</span>),<br>(-<span class="hljs-number">14</span>, -<span class="hljs-number">12</span>, -<span class="hljs-number">69.7</span>),<br>(-<span class="hljs-number">13</span>, -<span class="hljs-number">12</span>, -<span class="hljs-number">67.2</span>),<br>(-<span class="hljs-number">12</span>, -<span class="hljs-number">12</span>, -<span class="hljs-number">69.6</span>),<br>(-<span class="hljs-number">11</span>, -<span class="hljs-number">12</span>, -<span class="hljs-number">70</span>),<br>(-<span class="hljs-number">10</span>, -<span class="hljs-number">12</span>, -<span class="hljs-number">68.8</span>),<br>(-<span class="hljs-number">1</span>, -<span class="hljs-number">12</span>, -<span class="hljs-number">65.5</span>),<br>(<span class="hljs-number">0</span>, -<span class="hljs-number">12</span>, -<span class="hljs-number">67</span>),<br>(<span class="hljs-number">1</span>, -<span class="hljs-number">12</span>, -<span class="hljs-number">69.7</span>),<br>(<span class="hljs-number">2</span>, -<span class="hljs-number">12</span>, -<span class="hljs-number">66.9</span>),<br>(<span class="hljs-number">3</span>, -<span class="hljs-number">12</span>, -<span class="hljs-number">66.8</span>),<br>(<span class="hljs-number">4</span>, -<span class="hljs-number">12</span>, -<span class="hljs-number">65.5</span>),<br>(<span class="hljs-number">5</span>, -<span class="hljs-number">12</span>, -<span class="hljs-number">65.6</span>),<br>(<span class="hljs-number">13</span>, -<span class="hljs-number">12</span>, -<span class="hljs-number">69.2</span>),<br>(<span class="hljs-number">14</span>, -<span class="hljs-number">12</span>, -<span class="hljs-number">69.8</span>),<br>(<span class="hljs-number">15</span>, -<span class="hljs-number">12</span>, -<span class="hljs-number">67.7</span>),<br>(<span class="hljs-number">16</span>, -<span class="hljs-number">12</span>, -<span class="hljs-number">67.7</span>),<br>(<span class="hljs-number">17</span>, -<span class="hljs-number">12</span>, -<span class="hljs-number">69.5</span>),<br>(<span class="hljs-number">18</span>, -<span class="hljs-number">12</span>, -<span class="hljs-number">69.8</span>),<br>(<span class="hljs-number">19</span>, -<span class="hljs-number">12</span>, -<span class="hljs-number">68</span>),<br>(<span class="hljs-number">20</span>, -<span class="hljs-number">12</span>, -<span class="hljs-number">66.1</span>),<br>(-<span class="hljs-number">17</span>, -<span class="hljs-number">11</span>, -<span class="hljs-number">65.2</span>),<br>(-<span class="hljs-number">16</span>, -<span class="hljs-number">11</span>, -<span class="hljs-number">67.9</span>),<br>(-<span class="hljs-number">15</span>, -<span class="hljs-number">11</span>, -<span class="hljs-number">70</span>),<br>(-<span class="hljs-number">14</span>, -<span class="hljs-number">11</span>, -<span class="hljs-number">69.4</span>),<br>(-<span class="hljs-number">13</span>, -<span class="hljs-number">11</span>, -<span class="hljs-number">65.8</span>),<br>(-<span class="hljs-number">12</span>, -<span class="hljs-number">11</span>, -<span class="hljs-number">65.1</span>),<br>(-<span class="hljs-number">11</span>, -<span class="hljs-number">11</span>, -<span class="hljs-number">66.8</span>),<br>(<span class="hljs-number">0</span>, -<span class="hljs-number">11</span>, -<span class="hljs-number">67.5</span>),<br>(<span class="hljs-number">1</span>, -<span class="hljs-number">11</span>, -<span class="hljs-number">65.2</span>),<br>(<span class="hljs-number">2</span>, -<span class="hljs-number">11</span>, -<span class="hljs-number">67.3</span>),<br>(<span class="hljs-number">3</span>, -<span class="hljs-number">11</span>, -<span class="hljs-number">66.3</span>),<br>(<span class="hljs-number">4</span>, -<span class="hljs-number">11</span>, -<span class="hljs-number">65.4</span>),<br>(<span class="hljs-number">5</span>, -<span class="hljs-number">11</span>, -<span class="hljs-number">68.3</span>),<br>(<span class="hljs-number">6</span>, -<span class="hljs-number">11</span>, -<span class="hljs-number">69.6</span>),<br>(<span class="hljs-number">12</span>, -<span class="hljs-number">11</span>, -<span class="hljs-number">68.5</span>),<br>(<span class="hljs-number">13</span>, -<span class="hljs-number">11</span>, -<span class="hljs-number">66.4</span>),<br>(<span class="hljs-number">14</span>, -<span class="hljs-number">11</span>, -<span class="hljs-number">65.2</span>),<br>(<span class="hljs-number">15</span>, -<span class="hljs-number">11</span>, -<span class="hljs-number">65.5</span>),<br>(<span class="hljs-number">16</span>, -<span class="hljs-number">11</span>, -<span class="hljs-number">65.2</span>),<br>(<span class="hljs-number">17</span>, -<span class="hljs-number">11</span>, -<span class="hljs-number">65.8</span>),<br>(<span class="hljs-number">18</span>, -<span class="hljs-number">11</span>, -<span class="hljs-number">66.3</span>),<br>(<span class="hljs-number">19</span>, -<span class="hljs-number">11</span>, -<span class="hljs-number">68.4</span>),<br>(<span class="hljs-number">20</span>, -<span class="hljs-number">11</span>, -<span class="hljs-number">66.6</span>),<br>(-<span class="hljs-number">18</span>, -<span class="hljs-number">10</span>, -<span class="hljs-number">66.4</span>),<br>(-<span class="hljs-number">17</span>, -<span class="hljs-number">10</span>, -<span class="hljs-number">65.9</span>),<br>(-<span class="hljs-number">16</span>, -<span class="hljs-number">10</span>, -<span class="hljs-number">66.6</span>),<br>(-<span class="hljs-number">15</span>, -<span class="hljs-number">10</span>, -<span class="hljs-number">68.8</span>),<br>(-<span class="hljs-number">14</span>, -<span class="hljs-number">10</span>, -<span class="hljs-number">65.3</span>),<br>(-<span class="hljs-number">13</span>, -<span class="hljs-number">10</span>, -<span class="hljs-number">68.8</span>),<br>(-<span class="hljs-number">12</span>, -<span class="hljs-number">10</span>, -<span class="hljs-number">65.6</span>),<br>(<span class="hljs-number">1</span>, -<span class="hljs-number">10</span>, -<span class="hljs-number">66.4</span>),<br>(<span class="hljs-number">2</span>, -<span class="hljs-number">10</span>, -<span class="hljs-number">68.6</span>),<br>(<span class="hljs-number">3</span>, -<span class="hljs-number">10</span>, -<span class="hljs-number">66.4</span>),<br>(<span class="hljs-number">4</span>, -<span class="hljs-number">10</span>, -<span class="hljs-number">68.7</span>),<br>(<span class="hljs-number">5</span>, -<span class="hljs-number">10</span>, -<span class="hljs-number">69.6</span>),<br>(<span class="hljs-number">6</span>, -<span class="hljs-number">10</span>, -<span class="hljs-number">67.2</span>),<br>(<span class="hljs-number">7</span>, -<span class="hljs-number">10</span>, -<span class="hljs-number">65.8</span>),<br>(<span class="hljs-number">11</span>, -<span class="hljs-number">10</span>, -<span class="hljs-number">69.4</span>),<br>(<span class="hljs-number">12</span>, -<span class="hljs-number">10</span>, -<span class="hljs-number">66.1</span>),<br>(<span class="hljs-number">13</span>, -<span class="hljs-number">10</span>, -<span class="hljs-number">66.6</span>),<br>(<span class="hljs-number">14</span>, -<span class="hljs-number">10</span>, -<span class="hljs-number">67.8</span>),<br>(<span class="hljs-number">15</span>, -<span class="hljs-number">10</span>, -<span class="hljs-number">65.1</span>),<br>(<span class="hljs-number">16</span>, -<span class="hljs-number">10</span>, -<span class="hljs-number">69.8</span>),<br>(<span class="hljs-number">17</span>, -<span class="hljs-number">10</span>, -<span class="hljs-number">70</span>),<br>(<span class="hljs-number">18</span>, -<span class="hljs-number">10</span>, -<span class="hljs-number">68</span>),<br>(<span class="hljs-number">19</span>, -<span class="hljs-number">10</span>, -<span class="hljs-number">68.9</span>),<br>(-<span class="hljs-number">19</span>, -<span class="hljs-number">9</span>, -<span class="hljs-number">67.2</span>),<br>(-<span class="hljs-number">18</span>, -<span class="hljs-number">9</span>, -<span class="hljs-number">66.4</span>),<br>(-<span class="hljs-number">17</span>, -<span class="hljs-number">9</span>, -<span class="hljs-number">70</span>),<br>(-<span class="hljs-number">16</span>, -<span class="hljs-number">9</span>, -<span class="hljs-number">68.8</span>),<br>(-<span class="hljs-number">15</span>, -<span class="hljs-number">9</span>, -<span class="hljs-number">68.7</span>),<br>(-<span class="hljs-number">14</span>, -<span class="hljs-number">9</span>, -<span class="hljs-number">68.3</span>),<br>(-<span class="hljs-number">13</span>, -<span class="hljs-number">9</span>, -<span class="hljs-number">65.8</span>),<br>(<span class="hljs-number">2</span>, -<span class="hljs-number">9</span>, -<span class="hljs-number">69.2</span>),<br>(<span class="hljs-number">3</span>, -<span class="hljs-number">9</span>, -<span class="hljs-number">67.3</span>),<br>(<span class="hljs-number">4</span>, -<span class="hljs-number">9</span>, -<span class="hljs-number">67.6</span>),<br>(<span class="hljs-number">5</span>, -<span class="hljs-number">9</span>, -<span class="hljs-number">67.8</span>),<br>(<span class="hljs-number">6</span>, -<span class="hljs-number">9</span>, -<span class="hljs-number">67</span>),<br>(<span class="hljs-number">7</span>, -<span class="hljs-number">9</span>, -<span class="hljs-number">68.7</span>),<br>(<span class="hljs-number">8</span>, -<span class="hljs-number">9</span>, -<span class="hljs-number">66.2</span>),<br>(<span class="hljs-number">10</span>, -<span class="hljs-number">9</span>, -<span class="hljs-number">69</span>),<br>(<span class="hljs-number">11</span>, -<span class="hljs-number">9</span>, -<span class="hljs-number">68.5</span>),<br>(<span class="hljs-number">12</span>, -<span class="hljs-number">9</span>, -<span class="hljs-number">68.2</span>),<br>(<span class="hljs-number">13</span>, -<span class="hljs-number">9</span>, -<span class="hljs-number">66.6</span>),<br>(<span class="hljs-number">14</span>, -<span class="hljs-number">9</span>, -<span class="hljs-number">67.9</span>),<br>(<span class="hljs-number">15</span>, -<span class="hljs-number">9</span>, -<span class="hljs-number">68.9</span>),<br>(<span class="hljs-number">16</span>, -<span class="hljs-number">9</span>, -<span class="hljs-number">69.7</span>),<br>(<span class="hljs-number">17</span>, -<span class="hljs-number">9</span>, -<span class="hljs-number">67.6</span>),<br>(<span class="hljs-number">18</span>, -<span class="hljs-number">9</span>, -<span class="hljs-number">69.5</span>),<br>(<span class="hljs-number">19</span>, -<span class="hljs-number">9</span>, -<span class="hljs-number">67.2</span>),<br>(-<span class="hljs-number">20</span>, -<span class="hljs-number">8</span>, -<span class="hljs-number">65.5</span>),<br>(-<span class="hljs-number">19</span>, -<span class="hljs-number">8</span>, -<span class="hljs-number">67.8</span>),<br>(-<span class="hljs-number">18</span>, -<span class="hljs-number">8</span>, -<span class="hljs-number">66.7</span>),<br>(-<span class="hljs-number">17</span>, -<span class="hljs-number">8</span>, -<span class="hljs-number">66.1</span>),<br>(-<span class="hljs-number">16</span>, -<span class="hljs-number">8</span>, -<span class="hljs-number">69.3</span>),<br>(-<span class="hljs-number">15</span>, -<span class="hljs-number">8</span>, -<span class="hljs-number">65.3</span>),<br>(-<span class="hljs-number">14</span>, -<span class="hljs-number">8</span>, -<span class="hljs-number">68.3</span>),<br>(<span class="hljs-number">3</span>, -<span class="hljs-number">8</span>, -<span class="hljs-number">66</span>),<br>(<span class="hljs-number">4</span>, -<span class="hljs-number">8</span>, -<span class="hljs-number">67.7</span>),<br>(<span class="hljs-number">5</span>, -<span class="hljs-number">8</span>, -<span class="hljs-number">69.4</span>),<br>(<span class="hljs-number">6</span>, -<span class="hljs-number">8</span>, -<span class="hljs-number">66.2</span>),<br>(<span class="hljs-number">7</span>, -<span class="hljs-number">8</span>, -<span class="hljs-number">68.7</span>),<br>(<span class="hljs-number">8</span>, -<span class="hljs-number">8</span>, -<span class="hljs-number">68</span>),<br>(<span class="hljs-number">9</span>, -<span class="hljs-number">8</span>, -<span class="hljs-number">69</span>),<br>(<span class="hljs-number">10</span>, -<span class="hljs-number">8</span>, -<span class="hljs-number">68.8</span>),<br>(<span class="hljs-number">11</span>, -<span class="hljs-number">8</span>, -<span class="hljs-number">67.7</span>),<br>(<span class="hljs-number">12</span>, -<span class="hljs-number">8</span>, -<span class="hljs-number">69.3</span>),<br>(<span class="hljs-number">13</span>, -<span class="hljs-number">8</span>, -<span class="hljs-number">67.7</span>),<br>(<span class="hljs-number">14</span>, -<span class="hljs-number">8</span>, -<span class="hljs-number">67.2</span>),<br>(<span class="hljs-number">15</span>, -<span class="hljs-number">8</span>, -<span class="hljs-number">67.4</span>),<br>(<span class="hljs-number">16</span>, -<span class="hljs-number">8</span>, -<span class="hljs-number">68.3</span>),<br>(<span class="hljs-number">17</span>, -<span class="hljs-number">8</span>, -<span class="hljs-number">68.9</span>),<br>(<span class="hljs-number">18</span>, -<span class="hljs-number">8</span>, -<span class="hljs-number">66.7</span>),<br>(<span class="hljs-number">19</span>, -<span class="hljs-number">8</span>, -<span class="hljs-number">65.8</span>),<br>(-<span class="hljs-number">20</span>, -<span class="hljs-number">7</span>, -<span class="hljs-number">67.9</span>),<br>(-<span class="hljs-number">19</span>, -<span class="hljs-number">7</span>, -<span class="hljs-number">67.5</span>),<br>(-<span class="hljs-number">18</span>, -<span class="hljs-number">7</span>, -<span class="hljs-number">67.6</span>),<br>(-<span class="hljs-number">17</span>, -<span class="hljs-number">7</span>, -<span class="hljs-number">67.3</span>),<br>(-<span class="hljs-number">16</span>, -<span class="hljs-number">7</span>, -<span class="hljs-number">69.7</span>),<br>(-<span class="hljs-number">15</span>, -<span class="hljs-number">7</span>, -<span class="hljs-number">68.2</span>),<br>(-<span class="hljs-number">14</span>, -<span class="hljs-number">7</span>, -<span class="hljs-number">67.9</span>),<br>(<span class="hljs-number">4</span>, -<span class="hljs-number">7</span>, -<span class="hljs-number">67</span>),<br>(<span class="hljs-number">5</span>, -<span class="hljs-number">7</span>, -<span class="hljs-number">67.9</span>),<br>(<span class="hljs-number">6</span>, -<span class="hljs-number">7</span>, -<span class="hljs-number">68.5</span>),<br>(<span class="hljs-number">7</span>, -<span class="hljs-number">7</span>, -<span class="hljs-number">67.8</span>),<br>(<span class="hljs-number">8</span>, -<span class="hljs-number">7</span>, -<span class="hljs-number">65.9</span>),<br>(<span class="hljs-number">9</span>, -<span class="hljs-number">7</span>, -<span class="hljs-number">65.2</span>),<br>(<span class="hljs-number">10</span>, -<span class="hljs-number">7</span>, -<span class="hljs-number">67.2</span>),<br>(<span class="hljs-number">11</span>, -<span class="hljs-number">7</span>, -<span class="hljs-number">68.5</span>),<br>(<span class="hljs-number">12</span>, -<span class="hljs-number">7</span>, -<span class="hljs-number">66.3</span>),<br>(<span class="hljs-number">13</span>, -<span class="hljs-number">7</span>, -<span class="hljs-number">66.7</span>),<br>(<span class="hljs-number">14</span>, -<span class="hljs-number">7</span>, -<span class="hljs-number">68</span>),<br>(<span class="hljs-number">15</span>, -<span class="hljs-number">7</span>, -<span class="hljs-number">68.2</span>),<br>(<span class="hljs-number">16</span>, -<span class="hljs-number">7</span>, -<span class="hljs-number">69.5</span>),<br>(<span class="hljs-number">17</span>, -<span class="hljs-number">7</span>, -<span class="hljs-number">69.6</span>),<br>(<span class="hljs-number">18</span>, -<span class="hljs-number">7</span>, -<span class="hljs-number">66.7</span>),<br>(<span class="hljs-number">19</span>, -<span class="hljs-number">7</span>, -<span class="hljs-number">68.5</span>),<br>(-<span class="hljs-number">20</span>, -<span class="hljs-number">6</span>, -<span class="hljs-number">68.6</span>),<br>(-<span class="hljs-number">19</span>, -<span class="hljs-number">6</span>, -<span class="hljs-number">66.5</span>),<br>(-<span class="hljs-number">18</span>, -<span class="hljs-number">6</span>, -<span class="hljs-number">67.4</span>),<br>(-<span class="hljs-number">17</span>, -<span class="hljs-number">6</span>, -<span class="hljs-number">67.9</span>),<br>(-<span class="hljs-number">16</span>, -<span class="hljs-number">6</span>, -<span class="hljs-number">68.6</span>),<br>(-<span class="hljs-number">15</span>, -<span class="hljs-number">6</span>, -<span class="hljs-number">66.3</span>),<br>(-<span class="hljs-number">14</span>, -<span class="hljs-number">6</span>, -<span class="hljs-number">66.7</span>),<br>(-<span class="hljs-number">13</span>, -<span class="hljs-number">6</span>, -<span class="hljs-number">65.1</span>),<br>(<span class="hljs-number">5</span>, -<span class="hljs-number">6</span>, -<span class="hljs-number">67</span>),<br>(<span class="hljs-number">6</span>, -<span class="hljs-number">6</span>, -<span class="hljs-number">68.6</span>),<br>(<span class="hljs-number">7</span>, -<span class="hljs-number">6</span>, -<span class="hljs-number">67.7</span>),<br>(<span class="hljs-number">8</span>, -<span class="hljs-number">6</span>, -<span class="hljs-number">69.9</span>),<br>(<span class="hljs-number">9</span>, -<span class="hljs-number">6</span>, -<span class="hljs-number">68.6</span>),<br>(<span class="hljs-number">10</span>, -<span class="hljs-number">6</span>, -<span class="hljs-number">66.2</span>),<br>(<span class="hljs-number">11</span>, -<span class="hljs-number">6</span>, -<span class="hljs-number">66.8</span>),<br>(<span class="hljs-number">12</span>, -<span class="hljs-number">6</span>, -<span class="hljs-number">69.7</span>),<br>(<span class="hljs-number">13</span>, -<span class="hljs-number">6</span>, -<span class="hljs-number">65.9</span>),<br>(<span class="hljs-number">15</span>, -<span class="hljs-number">6</span>, -<span class="hljs-number">66.7</span>),<br>(<span class="hljs-number">16</span>, -<span class="hljs-number">6</span>, -<span class="hljs-number">65.7</span>),<br>(<span class="hljs-number">17</span>, -<span class="hljs-number">6</span>, -<span class="hljs-number">69.5</span>),<br>(<span class="hljs-number">18</span>, -<span class="hljs-number">6</span>, -<span class="hljs-number">65.6</span>),<br>(<span class="hljs-number">19</span>, -<span class="hljs-number">6</span>, -<span class="hljs-number">67.5</span>),<br>(-<span class="hljs-number">19</span>, -<span class="hljs-number">5</span>, -<span class="hljs-number">68.6</span>),<br>(-<span class="hljs-number">18</span>, -<span class="hljs-number">5</span>, -<span class="hljs-number">65.7</span>),<br>(-<span class="hljs-number">17</span>, -<span class="hljs-number">5</span>, -<span class="hljs-number">68.8</span>),<br>(-<span class="hljs-number">16</span>, -<span class="hljs-number">5</span>, -<span class="hljs-number">68.9</span>),<br>(-<span class="hljs-number">15</span>, -<span class="hljs-number">5</span>, -<span class="hljs-number">68.4</span>),<br>(-<span class="hljs-number">14</span>, -<span class="hljs-number">5</span>, -<span class="hljs-number">65.2</span>),<br>(-<span class="hljs-number">13</span>, -<span class="hljs-number">5</span>, -<span class="hljs-number">69.7</span>),<br>(-<span class="hljs-number">12</span>, -<span class="hljs-number">5</span>, -<span class="hljs-number">65.3</span>),<br>(-<span class="hljs-number">11</span>, -<span class="hljs-number">5</span>, -<span class="hljs-number">70</span>),<br>(<span class="hljs-number">6</span>, -<span class="hljs-number">5</span>, -<span class="hljs-number">68.1</span>),<br>(<span class="hljs-number">7</span>, -<span class="hljs-number">5</span>, -<span class="hljs-number">68.7</span>),<br>(<span class="hljs-number">8</span>, -<span class="hljs-number">5</span>, -<span class="hljs-number">65.1</span>),<br>(<span class="hljs-number">9</span>, -<span class="hljs-number">5</span>, -<span class="hljs-number">67.7</span>),<br>(<span class="hljs-number">10</span>, -<span class="hljs-number">5</span>, -<span class="hljs-number">65.5</span>),<br>(<span class="hljs-number">11</span>, -<span class="hljs-number">5</span>, -<span class="hljs-number">65.9</span>),<br>(<span class="hljs-number">12</span>, -<span class="hljs-number">5</span>, -<span class="hljs-number">66.7</span>),<br>(<span class="hljs-number">15</span>, -<span class="hljs-number">5</span>, -<span class="hljs-number">65.6</span>),<br>(<span class="hljs-number">16</span>, -<span class="hljs-number">5</span>, -<span class="hljs-number">68.7</span>),<br>(<span class="hljs-number">17</span>, -<span class="hljs-number">5</span>, -<span class="hljs-number">69.5</span>),<br>(<span class="hljs-number">18</span>, -<span class="hljs-number">5</span>, -<span class="hljs-number">65.7</span>),<br>(<span class="hljs-number">19</span>, -<span class="hljs-number">5</span>, -<span class="hljs-number">66.4</span>),<br>(-<span class="hljs-number">18</span>, -<span class="hljs-number">4</span>, -<span class="hljs-number">65.2</span>),<br>(-<span class="hljs-number">17</span>, -<span class="hljs-number">4</span>, -<span class="hljs-number">65.4</span>),<br>(-<span class="hljs-number">16</span>, -<span class="hljs-number">4</span>, -<span class="hljs-number">69.3</span>),<br>(-<span class="hljs-number">15</span>, -<span class="hljs-number">4</span>, -<span class="hljs-number">69.9</span>),<br>(-<span class="hljs-number">14</span>, -<span class="hljs-number">4</span>, -<span class="hljs-number">68.6</span>),<br>(-<span class="hljs-number">13</span>, -<span class="hljs-number">4</span>, -<span class="hljs-number">65.8</span>),<br>(-<span class="hljs-number">12</span>, -<span class="hljs-number">4</span>, -<span class="hljs-number">69.1</span>),<br>(-<span class="hljs-number">11</span>, -<span class="hljs-number">4</span>, -<span class="hljs-number">67.2</span>),<br>(-<span class="hljs-number">10</span>, -<span class="hljs-number">4</span>, -<span class="hljs-number">68.8</span>),<br>(<span class="hljs-number">7</span>, -<span class="hljs-number">4</span>, -<span class="hljs-number">67.3</span>),<br>(<span class="hljs-number">8</span>, -<span class="hljs-number">4</span>, -<span class="hljs-number">69</span>),<br>(<span class="hljs-number">9</span>, -<span class="hljs-number">4</span>, -<span class="hljs-number">67.5</span>),<br>(<span class="hljs-number">10</span>, -<span class="hljs-number">4</span>, -<span class="hljs-number">68.3</span>),<br>(<span class="hljs-number">11</span>, -<span class="hljs-number">4</span>, -<span class="hljs-number">67.6</span>),<br>(<span class="hljs-number">15</span>, -<span class="hljs-number">4</span>, -<span class="hljs-number">69.1</span>),<br>(<span class="hljs-number">16</span>, -<span class="hljs-number">4</span>, -<span class="hljs-number">66.8</span>),<br>(<span class="hljs-number">17</span>, -<span class="hljs-number">4</span>, -<span class="hljs-number">67.6</span>),<br>(<span class="hljs-number">18</span>, -<span class="hljs-number">4</span>, -<span class="hljs-number">65.6</span>),<br>(<span class="hljs-number">19</span>, -<span class="hljs-number">4</span>, -<span class="hljs-number">67.3</span>),<br>(-<span class="hljs-number">16</span>, -<span class="hljs-number">3</span>, -<span class="hljs-number">67.6</span>),<br>(-<span class="hljs-number">15</span>, -<span class="hljs-number">3</span>, -<span class="hljs-number">68.2</span>),<br>(-<span class="hljs-number">14</span>, -<span class="hljs-number">3</span>, -<span class="hljs-number">68.1</span>),<br>(-<span class="hljs-number">13</span>, -<span class="hljs-number">3</span>, -<span class="hljs-number">70</span>),<br>(-<span class="hljs-number">12</span>, -<span class="hljs-number">3</span>, -<span class="hljs-number">67.4</span>),<br>(-<span class="hljs-number">11</span>, -<span class="hljs-number">3</span>, -<span class="hljs-number">68</span>),<br>(-<span class="hljs-number">10</span>, -<span class="hljs-number">3</span>, -<span class="hljs-number">66.7</span>),<br>(-<span class="hljs-number">9</span>, -<span class="hljs-number">3</span>, -<span class="hljs-number">67.4</span>),<br>(<span class="hljs-number">8</span>, -<span class="hljs-number">3</span>, -<span class="hljs-number">65.6</span>),<br>(<span class="hljs-number">9</span>, -<span class="hljs-number">3</span>, -<span class="hljs-number">65.1</span>),<br>(<span class="hljs-number">10</span>, -<span class="hljs-number">3</span>, -<span class="hljs-number">66.8</span>),<br>(<span class="hljs-number">14</span>, -<span class="hljs-number">3</span>, -<span class="hljs-number">68.8</span>),<br>(<span class="hljs-number">15</span>, -<span class="hljs-number">3</span>, -<span class="hljs-number">66.8</span>),<br>(<span class="hljs-number">16</span>, -<span class="hljs-number">3</span>, -<span class="hljs-number">67.2</span>),<br>(<span class="hljs-number">17</span>, -<span class="hljs-number">3</span>, -<span class="hljs-number">67.3</span>),<br>(<span class="hljs-number">18</span>, -<span class="hljs-number">3</span>, -<span class="hljs-number">68.7</span>),<br>(<span class="hljs-number">19</span>, -<span class="hljs-number">3</span>, -<span class="hljs-number">67.3</span>),<br>(-<span class="hljs-number">15</span>, -<span class="hljs-number">2</span>, -<span class="hljs-number">67.8</span>),<br>(-<span class="hljs-number">14</span>, -<span class="hljs-number">2</span>, -<span class="hljs-number">66.2</span>),<br>(-<span class="hljs-number">13</span>, -<span class="hljs-number">2</span>, -<span class="hljs-number">67.8</span>),<br>(-<span class="hljs-number">12</span>, -<span class="hljs-number">2</span>, -<span class="hljs-number">65.4</span>),<br>(-<span class="hljs-number">11</span>, -<span class="hljs-number">2</span>, -<span class="hljs-number">68.8</span>),<br>(-<span class="hljs-number">10</span>, -<span class="hljs-number">2</span>, -<span class="hljs-number">67.7</span>),<br>(-<span class="hljs-number">9</span>, -<span class="hljs-number">2</span>, -<span class="hljs-number">69.5</span>),<br>(-<span class="hljs-number">8</span>, -<span class="hljs-number">2</span>, -<span class="hljs-number">67.1</span>),<br>(-<span class="hljs-number">7</span>, -<span class="hljs-number">2</span>, -<span class="hljs-number">69.5</span>),<br>(<span class="hljs-number">14</span>, -<span class="hljs-number">2</span>, -<span class="hljs-number">66.8</span>),<br>(<span class="hljs-number">15</span>, -<span class="hljs-number">2</span>, -<span class="hljs-number">67.6</span>),<br>(<span class="hljs-number">16</span>, -<span class="hljs-number">2</span>, -<span class="hljs-number">69.8</span>),<br>(<span class="hljs-number">17</span>, -<span class="hljs-number">2</span>, -<span class="hljs-number">65.3</span>),<br>(<span class="hljs-number">18</span>, -<span class="hljs-number">2</span>, -<span class="hljs-number">65.9</span>),<br>(-<span class="hljs-number">13</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">65.3</span>),<br>(-<span class="hljs-number">12</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">65.5</span>),<br>(-<span class="hljs-number">11</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">69.6</span>),<br>(-<span class="hljs-number">10</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">65.6</span>),<br>(-<span class="hljs-number">9</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">66.9</span>),<br>(-<span class="hljs-number">8</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">66</span>),<br>(-<span class="hljs-number">7</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">68.5</span>),<br>(-<span class="hljs-number">6</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">69.5</span>),<br>(<span class="hljs-number">14</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">65.2</span>),<br>(<span class="hljs-number">15</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">69.5</span>),<br>(<span class="hljs-number">16</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">66.4</span>),<br>(<span class="hljs-number">17</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">69.7</span>),<br>(<span class="hljs-number">18</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">69</span>),<br>(-<span class="hljs-number">12</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">68.5</span>),<br>(-<span class="hljs-number">11</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">69.3</span>),<br>(-<span class="hljs-number">10</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">65.6</span>),<br>(-<span class="hljs-number">9</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">67.2</span>),<br>(-<span class="hljs-number">8</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">68.7</span>),<br>(-<span class="hljs-number">7</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">67.1</span>),<br>(-<span class="hljs-number">6</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">65.5</span>),<br>(-<span class="hljs-number">5</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">69.5</span>),<br>(<span class="hljs-number">14</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">66.3</span>),<br>(<span class="hljs-number">15</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">67.3</span>),<br>(<span class="hljs-number">16</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">69.1</span>),<br>(<span class="hljs-number">17</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">66</span>),<br>(<span class="hljs-number">18</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">68.9</span>),<br>(-<span class="hljs-number">11</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">67.4</span>),<br>(-<span class="hljs-number">10</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">68.9</span>),<br>(-<span class="hljs-number">9</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">66.9</span>),<br>(-<span class="hljs-number">8</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">70</span>),<br>(-<span class="hljs-number">7</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">66.8</span>),<br>(-<span class="hljs-number">6</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">65.3</span>),<br>(-<span class="hljs-number">5</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">67.4</span>),<br>(-<span class="hljs-number">4</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">65.9</span>),<br>(-<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">67.5</span>),<br>(<span class="hljs-number">14</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">69.4</span>),<br>(<span class="hljs-number">15</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">68.4</span>),<br>(<span class="hljs-number">16</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">69.7</span>),<br>(<span class="hljs-number">17</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">66.2</span>),<br>(<span class="hljs-number">18</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">69.1</span>),<br>(-<span class="hljs-number">9</span>, <span class="hljs-number">2</span>, -<span class="hljs-number">65.5</span>),<br>(-<span class="hljs-number">8</span>, <span class="hljs-number">2</span>, -<span class="hljs-number">67.7</span>),<br>(-<span class="hljs-number">7</span>, <span class="hljs-number">2</span>, -<span class="hljs-number">67.8</span>),<br>(-<span class="hljs-number">6</span>, <span class="hljs-number">2</span>, -<span class="hljs-number">69.9</span>),<br>(-<span class="hljs-number">5</span>, <span class="hljs-number">2</span>, -<span class="hljs-number">66.8</span>),<br>(-<span class="hljs-number">4</span>, <span class="hljs-number">2</span>, -<span class="hljs-number">69.6</span>),<br>(-<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, -<span class="hljs-number">67.7</span>),<br>(-<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, -<span class="hljs-number">66.8</span>),<br>(<span class="hljs-number">14</span>, <span class="hljs-number">2</span>, -<span class="hljs-number">65.1</span>),<br>(<span class="hljs-number">15</span>, <span class="hljs-number">2</span>, -<span class="hljs-number">67.2</span>),<br>(<span class="hljs-number">16</span>, <span class="hljs-number">2</span>, -<span class="hljs-number">67.2</span>),<br>(<span class="hljs-number">17</span>, <span class="hljs-number">2</span>, -<span class="hljs-number">66.8</span>),<br>(<span class="hljs-number">18</span>, <span class="hljs-number">2</span>, -<span class="hljs-number">69.5</span>),<br>(-<span class="hljs-number">8</span>, <span class="hljs-number">3</span>, -<span class="hljs-number">67.7</span>),<br>(-<span class="hljs-number">7</span>, <span class="hljs-number">3</span>, -<span class="hljs-number">68.5</span>),<br>(-<span class="hljs-number">6</span>, <span class="hljs-number">3</span>, -<span class="hljs-number">69.8</span>),<br>(-<span class="hljs-number">5</span>, <span class="hljs-number">3</span>, -<span class="hljs-number">67.6</span>),<br>(-<span class="hljs-number">4</span>, <span class="hljs-number">3</span>, -<span class="hljs-number">67.8</span>),<br>(-<span class="hljs-number">3</span>, <span class="hljs-number">3</span>, -<span class="hljs-number">69.2</span>),<br>(-<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, -<span class="hljs-number">68.6</span>),<br>(-<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, -<span class="hljs-number">68.6</span>),<br>(<span class="hljs-number">14</span>, <span class="hljs-number">3</span>, -<span class="hljs-number">69.3</span>),<br>(<span class="hljs-number">15</span>, <span class="hljs-number">3</span>, -<span class="hljs-number">66.4</span>),<br>(<span class="hljs-number">16</span>, <span class="hljs-number">3</span>, -<span class="hljs-number">67.6</span>),<br>(<span class="hljs-number">17</span>, <span class="hljs-number">3</span>, -<span class="hljs-number">67.8</span>),<br>(<span class="hljs-number">18</span>, <span class="hljs-number">3</span>, -<span class="hljs-number">68</span>),<br>(-<span class="hljs-number">7</span>, <span class="hljs-number">4</span>, -<span class="hljs-number">66.9</span>),<br>(-<span class="hljs-number">6</span>, <span class="hljs-number">4</span>, -<span class="hljs-number">65.6</span>),<br>(-<span class="hljs-number">5</span>, <span class="hljs-number">4</span>, -<span class="hljs-number">67.6</span>),<br>(-<span class="hljs-number">4</span>, <span class="hljs-number">4</span>, -<span class="hljs-number">66.2</span>),<br>(-<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, -<span class="hljs-number">65.3</span>),<br>(-<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, -<span class="hljs-number">65.8</span>),<br>(-<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, -<span class="hljs-number">69.4</span>),<br>(<span class="hljs-number">14</span>, <span class="hljs-number">4</span>, -<span class="hljs-number">67.9</span>),<br>(<span class="hljs-number">15</span>, <span class="hljs-number">4</span>, -<span class="hljs-number">69.3</span>),<br>(<span class="hljs-number">16</span>, <span class="hljs-number">4</span>, -<span class="hljs-number">67</span>),<br>(<span class="hljs-number">17</span>, <span class="hljs-number">4</span>, -<span class="hljs-number">66.3</span>),<br>(<span class="hljs-number">18</span>, <span class="hljs-number">4</span>, -<span class="hljs-number">68.5</span>),<br>(-<span class="hljs-number">6</span>, <span class="hljs-number">5</span>, -<span class="hljs-number">66.9</span>),<br>(-<span class="hljs-number">5</span>, <span class="hljs-number">5</span>, -<span class="hljs-number">67.4</span>),<br>(-<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, -<span class="hljs-number">68.3</span>),<br>(-<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, -<span class="hljs-number">70</span>),<br>(-<span class="hljs-number">2</span>, <span class="hljs-number">5</span>, -<span class="hljs-number">67.3</span>),<br>(-<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, -<span class="hljs-number">65.5</span>),<br>(<span class="hljs-number">13</span>, <span class="hljs-number">5</span>, -<span class="hljs-number">65.7</span>),<br>(<span class="hljs-number">14</span>, <span class="hljs-number">5</span>, -<span class="hljs-number">69.1</span>),<br>(<span class="hljs-number">15</span>, <span class="hljs-number">5</span>, -<span class="hljs-number">66.3</span>),<br>(<span class="hljs-number">16</span>, <span class="hljs-number">5</span>, -<span class="hljs-number">67.3</span>),<br>(<span class="hljs-number">17</span>, <span class="hljs-number">5</span>, -<span class="hljs-number">65.8</span>),<br>(-<span class="hljs-number">7</span>, <span class="hljs-number">6</span>, -<span class="hljs-number">69</span>),<br>(-<span class="hljs-number">6</span>, <span class="hljs-number">6</span>, -<span class="hljs-number">69.1</span>),<br>(-<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, -<span class="hljs-number">66.7</span>),<br>(-<span class="hljs-number">4</span>, <span class="hljs-number">6</span>, -<span class="hljs-number">66.3</span>),<br>(-<span class="hljs-number">3</span>, <span class="hljs-number">6</span>, -<span class="hljs-number">67.7</span>),<br>(-<span class="hljs-number">2</span>, <span class="hljs-number">6</span>, -<span class="hljs-number">66.7</span>),<br>(<span class="hljs-number">13</span>, <span class="hljs-number">6</span>, -<span class="hljs-number">66.5</span>),<br>(<span class="hljs-number">14</span>, <span class="hljs-number">6</span>, -<span class="hljs-number">65.6</span>),<br>(<span class="hljs-number">15</span>, <span class="hljs-number">6</span>, -<span class="hljs-number">69.4</span>),<br>(<span class="hljs-number">16</span>, <span class="hljs-number">6</span>, -<span class="hljs-number">69.1</span>),<br>(<span class="hljs-number">17</span>, <span class="hljs-number">6</span>, -<span class="hljs-number">65.7</span>),<br>(-<span class="hljs-number">8</span>, <span class="hljs-number">7</span>, -<span class="hljs-number">68.4</span>),<br>(-<span class="hljs-number">7</span>, <span class="hljs-number">7</span>, -<span class="hljs-number">68.3</span>),<br>(-<span class="hljs-number">6</span>, <span class="hljs-number">7</span>, -<span class="hljs-number">66.1</span>),<br>(-<span class="hljs-number">5</span>, <span class="hljs-number">7</span>, -<span class="hljs-number">69.5</span>),<br>(-<span class="hljs-number">4</span>, <span class="hljs-number">7</span>, -<span class="hljs-number">65.3</span>),<br>(-<span class="hljs-number">3</span>, <span class="hljs-number">7</span>, -<span class="hljs-number">66.1</span>),<br>(<span class="hljs-number">13</span>, <span class="hljs-number">7</span>, -<span class="hljs-number">67.2</span>),<br>(<span class="hljs-number">14</span>, <span class="hljs-number">7</span>, -<span class="hljs-number">66.3</span>),<br>(<span class="hljs-number">15</span>, <span class="hljs-number">7</span>, -<span class="hljs-number">67.5</span>),<br>(<span class="hljs-number">16</span>, <span class="hljs-number">7</span>, -<span class="hljs-number">68.7</span>),<br>(<span class="hljs-number">17</span>, <span class="hljs-number">7</span>, -<span class="hljs-number">68.9</span>),<br>(-<span class="hljs-number">8</span>, <span class="hljs-number">8</span>, -<span class="hljs-number">67.3</span>),<br>(-<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, -<span class="hljs-number">69.8</span>),<br>(-<span class="hljs-number">6</span>, <span class="hljs-number">8</span>, -<span class="hljs-number">65.1</span>),<br>(-<span class="hljs-number">5</span>, <span class="hljs-number">8</span>, -<span class="hljs-number">69.2</span>),<br>(-<span class="hljs-number">4</span>, <span class="hljs-number">8</span>, -<span class="hljs-number">69.7</span>),<br>(-<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, -<span class="hljs-number">67.9</span>),<br>(<span class="hljs-number">13</span>, <span class="hljs-number">8</span>, -<span class="hljs-number">67.1</span>),<br>(<span class="hljs-number">14</span>, <span class="hljs-number">8</span>, -<span class="hljs-number">65.8</span>),<br>(<span class="hljs-number">15</span>, <span class="hljs-number">8</span>, -<span class="hljs-number">68.6</span>),<br>(<span class="hljs-number">16</span>, <span class="hljs-number">8</span>, -<span class="hljs-number">67.3</span>),<br>(<span class="hljs-number">17</span>, <span class="hljs-number">8</span>, -<span class="hljs-number">69.2</span>),<br>(-<span class="hljs-number">9</span>, <span class="hljs-number">9</span>, -<span class="hljs-number">69</span>),<br>(-<span class="hljs-number">8</span>, <span class="hljs-number">9</span>, -<span class="hljs-number">69.8</span>),<br>(-<span class="hljs-number">7</span>, <span class="hljs-number">9</span>, -<span class="hljs-number">69.1</span>),<br>(-<span class="hljs-number">6</span>, <span class="hljs-number">9</span>, -<span class="hljs-number">65.2</span>),<br>(-<span class="hljs-number">5</span>, <span class="hljs-number">9</span>, -<span class="hljs-number">68.1</span>),<br>(-<span class="hljs-number">4</span>, <span class="hljs-number">9</span>, -<span class="hljs-number">69.2</span>),<br>(<span class="hljs-number">13</span>, <span class="hljs-number">9</span>, -<span class="hljs-number">67.7</span>),<br>(<span class="hljs-number">14</span>, <span class="hljs-number">9</span>, -<span class="hljs-number">67.9</span>),<br>(<span class="hljs-number">15</span>, <span class="hljs-number">9</span>, -<span class="hljs-number">68.6</span>),<br>(<span class="hljs-number">16</span>, <span class="hljs-number">9</span>, -<span class="hljs-number">67.7</span>),<br>(<span class="hljs-number">17</span>, <span class="hljs-number">9</span>, -<span class="hljs-number">68.4</span>),<br>(-<span class="hljs-number">10</span>, <span class="hljs-number">10</span>, -<span class="hljs-number">69.1</span>),<br>(-<span class="hljs-number">9</span>, <span class="hljs-number">10</span>, -<span class="hljs-number">68.7</span>),<br>(-<span class="hljs-number">8</span>, <span class="hljs-number">10</span>, -<span class="hljs-number">65.7</span>),<br>(-<span class="hljs-number">7</span>, <span class="hljs-number">10</span>, -<span class="hljs-number">68.6</span>),<br>(-<span class="hljs-number">6</span>, <span class="hljs-number">10</span>, -<span class="hljs-number">69.9</span>),<br>(-<span class="hljs-number">5</span>, <span class="hljs-number">10</span>, -<span class="hljs-number">65.5</span>),<br>(<span class="hljs-number">13</span>, <span class="hljs-number">10</span>, -<span class="hljs-number">65.7</span>),<br>(<span class="hljs-number">14</span>, <span class="hljs-number">10</span>, -<span class="hljs-number">67</span>),<br>(<span class="hljs-number">15</span>, <span class="hljs-number">10</span>, -<span class="hljs-number">68.3</span>),<br>(<span class="hljs-number">16</span>, <span class="hljs-number">10</span>, -<span class="hljs-number">67.9</span>),<br>(<span class="hljs-number">17</span>, <span class="hljs-number">10</span>, -<span class="hljs-number">69.9</span>),<br>(-<span class="hljs-number">11</span>, <span class="hljs-number">11</span>, -<span class="hljs-number">69.7</span>),<br>(-<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, -<span class="hljs-number">66.4</span>),<br>(-<span class="hljs-number">9</span>, <span class="hljs-number">11</span>, -<span class="hljs-number">69.9</span>),<br>(-<span class="hljs-number">8</span>, <span class="hljs-number">11</span>, -<span class="hljs-number">66.8</span>),<br>(-<span class="hljs-number">7</span>, <span class="hljs-number">11</span>, -<span class="hljs-number">67.9</span>),<br>(-<span class="hljs-number">6</span>, <span class="hljs-number">11</span>, -<span class="hljs-number">69.4</span>),<br>(-<span class="hljs-number">5</span>, <span class="hljs-number">11</span>, -<span class="hljs-number">68.5</span>),<br>(<span class="hljs-number">13</span>, <span class="hljs-number">11</span>, -<span class="hljs-number">69.8</span>),<br>(<span class="hljs-number">14</span>, <span class="hljs-number">11</span>, -<span class="hljs-number">69.5</span>),<br>(<span class="hljs-number">15</span>, <span class="hljs-number">11</span>, -<span class="hljs-number">65.6</span>),<br>(<span class="hljs-number">16</span>, <span class="hljs-number">11</span>, -<span class="hljs-number">68.9</span>),<br>(<span class="hljs-number">17</span>, <span class="hljs-number">11</span>, -<span class="hljs-number">69</span>),<br>(-<span class="hljs-number">11</span>, <span class="hljs-number">12</span>, -<span class="hljs-number">66.4</span>),<br>(-<span class="hljs-number">10</span>, <span class="hljs-number">12</span>, -<span class="hljs-number">68.6</span>),<br>(-<span class="hljs-number">9</span>, <span class="hljs-number">12</span>, -<span class="hljs-number">66</span>),<br>(-<span class="hljs-number">8</span>, <span class="hljs-number">12</span>, -<span class="hljs-number">65.7</span>),<br>(-<span class="hljs-number">7</span>, <span class="hljs-number">12</span>, -<span class="hljs-number">67.7</span>),<br>(-<span class="hljs-number">6</span>, <span class="hljs-number">12</span>, -<span class="hljs-number">67.9</span>),<br>(<span class="hljs-number">12</span>, <span class="hljs-number">12</span>, -<span class="hljs-number">67.6</span>),<br>(<span class="hljs-number">13</span>, <span class="hljs-number">12</span>, -<span class="hljs-number">68.5</span>),<br>(<span class="hljs-number">14</span>, <span class="hljs-number">12</span>, -<span class="hljs-number">69</span>),<br>(<span class="hljs-number">15</span>, <span class="hljs-number">12</span>, -<span class="hljs-number">65.2</span>),<br>(<span class="hljs-number">16</span>, <span class="hljs-number">12</span>, -<span class="hljs-number">69.3</span>),<br>(-<span class="hljs-number">12</span>, <span class="hljs-number">13</span>, -<span class="hljs-number">65.9</span>),<br>(-<span class="hljs-number">11</span>, <span class="hljs-number">13</span>, -<span class="hljs-number">68.7</span>),<br>(-<span class="hljs-number">10</span>, <span class="hljs-number">13</span>, -<span class="hljs-number">65.8</span>),<br>(-<span class="hljs-number">9</span>, <span class="hljs-number">13</span>, -<span class="hljs-number">65.2</span>),<br>(-<span class="hljs-number">8</span>, <span class="hljs-number">13</span>, -<span class="hljs-number">66</span>),<br>(-<span class="hljs-number">7</span>, <span class="hljs-number">13</span>, -<span class="hljs-number">67.2</span>),<br>(<span class="hljs-number">10</span>, <span class="hljs-number">13</span>, -<span class="hljs-number">69.7</span>),<br>(<span class="hljs-number">11</span>, <span class="hljs-number">13</span>, -<span class="hljs-number">68.8</span>),<br>(<span class="hljs-number">12</span>, <span class="hljs-number">13</span>, -<span class="hljs-number">67.4</span>),<br>(<span class="hljs-number">13</span>, <span class="hljs-number">13</span>, -<span class="hljs-number">65.5</span>),<br>(<span class="hljs-number">14</span>, <span class="hljs-number">13</span>, -<span class="hljs-number">69.4</span>),<br>(<span class="hljs-number">15</span>, <span class="hljs-number">13</span>, -<span class="hljs-number">67.3</span>),<br>(<span class="hljs-number">16</span>, <span class="hljs-number">13</span>, -<span class="hljs-number">68.5</span>),<br>(-<span class="hljs-number">13</span>, <span class="hljs-number">14</span>, -<span class="hljs-number">65.2</span>),<br>(-<span class="hljs-number">12</span>, <span class="hljs-number">14</span>, -<span class="hljs-number">67.7</span>),<br>(-<span class="hljs-number">11</span>, <span class="hljs-number">14</span>, -<span class="hljs-number">65.8</span>),<br>(-<span class="hljs-number">10</span>, <span class="hljs-number">14</span>, -<span class="hljs-number">68</span>),<br>(-<span class="hljs-number">9</span>, <span class="hljs-number">14</span>, -<span class="hljs-number">65.5</span>),<br>(-<span class="hljs-number">8</span>, <span class="hljs-number">14</span>, -<span class="hljs-number">66.6</span>),<br>(<span class="hljs-number">1</span>, <span class="hljs-number">14</span>, -<span class="hljs-number">68.3</span>),<br>(<span class="hljs-number">2</span>, <span class="hljs-number">14</span>, -<span class="hljs-number">69.3</span>),<br>(<span class="hljs-number">3</span>, <span class="hljs-number">14</span>, -<span class="hljs-number">68.8</span>),<br>(<span class="hljs-number">4</span>, <span class="hljs-number">14</span>, -<span class="hljs-number">65.1</span>),<br>(<span class="hljs-number">5</span>, <span class="hljs-number">14</span>, -<span class="hljs-number">68.7</span>),<br>(<span class="hljs-number">6</span>, <span class="hljs-number">14</span>, -<span class="hljs-number">69.1</span>),<br>(<span class="hljs-number">7</span>, <span class="hljs-number">14</span>, -<span class="hljs-number">68.1</span>),<br>(<span class="hljs-number">8</span>, <span class="hljs-number">14</span>, -<span class="hljs-number">68.9</span>),<br>(<span class="hljs-number">9</span>, <span class="hljs-number">14</span>, -<span class="hljs-number">68.5</span>),<br>(<span class="hljs-number">10</span>, <span class="hljs-number">14</span>, -<span class="hljs-number">67.7</span>),<br>(<span class="hljs-number">11</span>, <span class="hljs-number">14</span>, -<span class="hljs-number">68.9</span>),<br>(<span class="hljs-number">12</span>, <span class="hljs-number">14</span>, -<span class="hljs-number">66.4</span>),<br>(<span class="hljs-number">13</span>, <span class="hljs-number">14</span>, -<span class="hljs-number">65.9</span>),<br>(<span class="hljs-number">14</span>, <span class="hljs-number">14</span>, -<span class="hljs-number">68</span>),<br>(<span class="hljs-number">15</span>, <span class="hljs-number">14</span>, -<span class="hljs-number">67.1</span>),<br>(<span class="hljs-number">16</span>, <span class="hljs-number">14</span>, -<span class="hljs-number">68</span>),<br>(-<span class="hljs-number">13</span>, <span class="hljs-number">15</span>, -<span class="hljs-number">66.4</span>),<br>(-<span class="hljs-number">12</span>, <span class="hljs-number">15</span>, -<span class="hljs-number">65.2</span>),<br>(-<span class="hljs-number">11</span>, <span class="hljs-number">15</span>, -<span class="hljs-number">66.3</span>),<br>(-<span class="hljs-number">10</span>, <span class="hljs-number">15</span>, -<span class="hljs-number">69.5</span>),<br>(-<span class="hljs-number">9</span>, <span class="hljs-number">15</span>, -<span class="hljs-number">68</span>),<br>(-<span class="hljs-number">8</span>, <span class="hljs-number">15</span>, -<span class="hljs-number">69.5</span>),<br>(-<span class="hljs-number">7</span>, <span class="hljs-number">15</span>, -<span class="hljs-number">66.8</span>),<br>(-<span class="hljs-number">6</span>, <span class="hljs-number">15</span>, -<span class="hljs-number">69.1</span>),<br>(-<span class="hljs-number">5</span>, <span class="hljs-number">15</span>, -<span class="hljs-number">67.5</span>),<br>(-<span class="hljs-number">4</span>, <span class="hljs-number">15</span>, -<span class="hljs-number">67.3</span>),<br>(-<span class="hljs-number">3</span>, <span class="hljs-number">15</span>, -<span class="hljs-number">69.3</span>),<br>(-<span class="hljs-number">2</span>, <span class="hljs-number">15</span>, -<span class="hljs-number">65.3</span>),<br>(-<span class="hljs-number">1</span>, <span class="hljs-number">15</span>, -<span class="hljs-number">67.1</span>),<br>(<span class="hljs-number">0</span>, <span class="hljs-number">15</span>, -<span class="hljs-number">66.3</span>),<br>(<span class="hljs-number">1</span>, <span class="hljs-number">15</span>, -<span class="hljs-number">68.7</span>),<br>(<span class="hljs-number">2</span>, <span class="hljs-number">15</span>, -<span class="hljs-number">68</span>),<br>(<span class="hljs-number">3</span>, <span class="hljs-number">15</span>, -<span class="hljs-number">69.8</span>),<br>(<span class="hljs-number">4</span>, <span class="hljs-number">15</span>, -<span class="hljs-number">68.6</span>),<br>(<span class="hljs-number">5</span>, <span class="hljs-number">15</span>, -<span class="hljs-number">66.7</span>),<br>(<span class="hljs-number">6</span>, <span class="hljs-number">15</span>, -<span class="hljs-number">68.3</span>),<br>(<span class="hljs-number">7</span>, <span class="hljs-number">15</span>, -<span class="hljs-number">65.7</span>),<br>(<span class="hljs-number">8</span>, <span class="hljs-number">15</span>, -<span class="hljs-number">69.5</span>),<br>(<span class="hljs-number">9</span>, <span class="hljs-number">15</span>, -<span class="hljs-number">67.4</span>),<br>(<span class="hljs-number">10</span>, <span class="hljs-number">15</span>, -<span class="hljs-number">67.4</span>),<br>(<span class="hljs-number">11</span>, <span class="hljs-number">15</span>, -<span class="hljs-number">66</span>),<br>(<span class="hljs-number">12</span>, <span class="hljs-number">15</span>, -<span class="hljs-number">69.4</span>),<br>(<span class="hljs-number">13</span>, <span class="hljs-number">15</span>, -<span class="hljs-number">67.2</span>),<br>(<span class="hljs-number">14</span>, <span class="hljs-number">15</span>, -<span class="hljs-number">66.1</span>),<br>(<span class="hljs-number">15</span>, <span class="hljs-number">15</span>, -<span class="hljs-number">65.8</span>),<br>(<span class="hljs-number">16</span>, <span class="hljs-number">15</span>, -<span class="hljs-number">68.7</span>),<br>(-<span class="hljs-number">14</span>, <span class="hljs-number">16</span>, -<span class="hljs-number">69.1</span>),<br>(-<span class="hljs-number">13</span>, <span class="hljs-number">16</span>, -<span class="hljs-number">69.7</span>),<br>(-<span class="hljs-number">12</span>, <span class="hljs-number">16</span>, -<span class="hljs-number">66</span>),<br>(-<span class="hljs-number">11</span>, <span class="hljs-number">16</span>, -<span class="hljs-number">67.6</span>),<br>(-<span class="hljs-number">10</span>, <span class="hljs-number">16</span>, -<span class="hljs-number">69.1</span>),<br>(-<span class="hljs-number">9</span>, <span class="hljs-number">16</span>, -<span class="hljs-number">65.1</span>),<br>(-<span class="hljs-number">8</span>, <span class="hljs-number">16</span>, -<span class="hljs-number">66.6</span>),<br>(-<span class="hljs-number">7</span>, <span class="hljs-number">16</span>, -<span class="hljs-number">65.4</span>),<br>(-<span class="hljs-number">6</span>, <span class="hljs-number">16</span>, -<span class="hljs-number">68.5</span>),<br>(-<span class="hljs-number">5</span>, <span class="hljs-number">16</span>, -<span class="hljs-number">68.2</span>),<br>(-<span class="hljs-number">4</span>, <span class="hljs-number">16</span>, -<span class="hljs-number">67.9</span>),<br>(-<span class="hljs-number">3</span>, <span class="hljs-number">16</span>, -<span class="hljs-number">66.8</span>),<br>(-<span class="hljs-number">2</span>, <span class="hljs-number">16</span>, -<span class="hljs-number">65.6</span>),<br>(-<span class="hljs-number">1</span>, <span class="hljs-number">16</span>, -<span class="hljs-number">69.1</span>),<br>(<span class="hljs-number">0</span>, <span class="hljs-number">16</span>, -<span class="hljs-number">67.6</span>),<br>(<span class="hljs-number">1</span>, <span class="hljs-number">16</span>, -<span class="hljs-number">68.4</span>),<br>(<span class="hljs-number">2</span>, <span class="hljs-number">16</span>, -<span class="hljs-number">69.6</span>),<br>(<span class="hljs-number">3</span>, <span class="hljs-number">16</span>, -<span class="hljs-number">68.6</span>),<br>(<span class="hljs-number">4</span>, <span class="hljs-number">16</span>, -<span class="hljs-number">69.4</span>),<br>(<span class="hljs-number">5</span>, <span class="hljs-number">16</span>, -<span class="hljs-number">67.4</span>),<br>(<span class="hljs-number">6</span>, <span class="hljs-number">16</span>, -<span class="hljs-number">68.2</span>),<br>(<span class="hljs-number">7</span>, <span class="hljs-number">16</span>, -<span class="hljs-number">68.6</span>),<br>(<span class="hljs-number">8</span>, <span class="hljs-number">16</span>, -<span class="hljs-number">68</span>),<br>(<span class="hljs-number">9</span>, <span class="hljs-number">16</span>, -<span class="hljs-number">68.3</span>),<br>(<span class="hljs-number">10</span>, <span class="hljs-number">16</span>, -<span class="hljs-number">69</span>),<br>(<span class="hljs-number">11</span>, <span class="hljs-number">16</span>, -<span class="hljs-number">69.8</span>),<br>(<span class="hljs-number">12</span>, <span class="hljs-number">16</span>, -<span class="hljs-number">65.1</span>),<br>(<span class="hljs-number">13</span>, <span class="hljs-number">16</span>, -<span class="hljs-number">69.8</span>),<br>(<span class="hljs-number">14</span>, <span class="hljs-number">16</span>, -<span class="hljs-number">68.4</span>),<br>(<span class="hljs-number">15</span>, <span class="hljs-number">16</span>, -<span class="hljs-number">69.5</span>),<br>(<span class="hljs-number">16</span>, <span class="hljs-number">16</span>, -<span class="hljs-number">67.8</span>),<br>(-<span class="hljs-number">15</span>, <span class="hljs-number">17</span>, -<span class="hljs-number">68.8</span>),<br>(-<span class="hljs-number">14</span>, <span class="hljs-number">17</span>, -<span class="hljs-number">67.5</span>),<br>(-<span class="hljs-number">13</span>, <span class="hljs-number">17</span>, -<span class="hljs-number">69.1</span>),<br>(-<span class="hljs-number">12</span>, <span class="hljs-number">17</span>, -<span class="hljs-number">66.7</span>),<br>(-<span class="hljs-number">11</span>, <span class="hljs-number">17</span>, -<span class="hljs-number">66.4</span>),<br>(-<span class="hljs-number">10</span>, <span class="hljs-number">17</span>, -<span class="hljs-number">68</span>),<br>(-<span class="hljs-number">9</span>, <span class="hljs-number">17</span>, -<span class="hljs-number">68.5</span>),<br>(-<span class="hljs-number">8</span>, <span class="hljs-number">17</span>, -<span class="hljs-number">65.4</span>),<br>(-<span class="hljs-number">7</span>, <span class="hljs-number">17</span>, -<span class="hljs-number">65.2</span>),<br>(-<span class="hljs-number">6</span>, <span class="hljs-number">17</span>, -<span class="hljs-number">68</span>),<br>(-<span class="hljs-number">5</span>, <span class="hljs-number">17</span>, -<span class="hljs-number">68.7</span>),<br>(-<span class="hljs-number">4</span>, <span class="hljs-number">17</span>, -<span class="hljs-number">65.7</span>),<br>(-<span class="hljs-number">3</span>, <span class="hljs-number">17</span>, -<span class="hljs-number">68.1</span>),<br>(-<span class="hljs-number">2</span>, <span class="hljs-number">17</span>, -<span class="hljs-number">66.5</span>),<br>(-<span class="hljs-number">1</span>, <span class="hljs-number">17</span>, -<span class="hljs-number">68.9</span>),<br>(<span class="hljs-number">0</span>, <span class="hljs-number">17</span>, -<span class="hljs-number">69.7</span>),<br>(<span class="hljs-number">1</span>, <span class="hljs-number">17</span>, -<span class="hljs-number">66.2</span>),<br>(<span class="hljs-number">2</span>, <span class="hljs-number">17</span>, -<span class="hljs-number">67.9</span>),<br>(<span class="hljs-number">3</span>, <span class="hljs-number">17</span>, -<span class="hljs-number">69.2</span>),<br>(<span class="hljs-number">4</span>, <span class="hljs-number">17</span>, -<span class="hljs-number">69</span>),<br>(<span class="hljs-number">5</span>, <span class="hljs-number">17</span>, -<span class="hljs-number">68.7</span>),<br>(<span class="hljs-number">6</span>, <span class="hljs-number">17</span>, -<span class="hljs-number">68.3</span>),<br>(<span class="hljs-number">7</span>, <span class="hljs-number">17</span>, -<span class="hljs-number">66.8</span>),<br>(<span class="hljs-number">8</span>, <span class="hljs-number">17</span>, -<span class="hljs-number">66.2</span>),<br>(<span class="hljs-number">9</span>, <span class="hljs-number">17</span>, -<span class="hljs-number">69.2</span>),<br>(<span class="hljs-number">10</span>, <span class="hljs-number">17</span>, -<span class="hljs-number">65.7</span>),<br>(<span class="hljs-number">11</span>, <span class="hljs-number">17</span>, -<span class="hljs-number">69.4</span>),<br>(<span class="hljs-number">12</span>, <span class="hljs-number">17</span>, -<span class="hljs-number">68.4</span>),<br>(<span class="hljs-number">13</span>, <span class="hljs-number">17</span>, -<span class="hljs-number">69.8</span>),<br>(<span class="hljs-number">14</span>, <span class="hljs-number">17</span>, -<span class="hljs-number">66.4</span>),<br>(<span class="hljs-number">15</span>, <span class="hljs-number">17</span>, -<span class="hljs-number">69.9</span>),<br>(-<span class="hljs-number">15</span>, <span class="hljs-number">18</span>, -<span class="hljs-number">67.1</span>),<br>(-<span class="hljs-number">14</span>, <span class="hljs-number">18</span>, -<span class="hljs-number">65.8</span>),<br>(-<span class="hljs-number">13</span>, <span class="hljs-number">18</span>, -<span class="hljs-number">70</span>),<br>(-<span class="hljs-number">12</span>, <span class="hljs-number">18</span>, -<span class="hljs-number">66.1</span>),<br>(-<span class="hljs-number">11</span>, <span class="hljs-number">18</span>, -<span class="hljs-number">68.1</span>),<br>(-<span class="hljs-number">10</span>, <span class="hljs-number">18</span>, -<span class="hljs-number">65.9</span>),<br>(-<span class="hljs-number">9</span>, <span class="hljs-number">18</span>, -<span class="hljs-number">66.2</span>),<br>(-<span class="hljs-number">8</span>, <span class="hljs-number">18</span>, -<span class="hljs-number">65.6</span>),<br>(-<span class="hljs-number">7</span>, <span class="hljs-number">18</span>, -<span class="hljs-number">66.6</span>),<br>(-<span class="hljs-number">6</span>, <span class="hljs-number">18</span>, -<span class="hljs-number">70</span>),<br>(-<span class="hljs-number">5</span>, <span class="hljs-number">18</span>, -<span class="hljs-number">68</span>),<br>(-<span class="hljs-number">4</span>, <span class="hljs-number">18</span>, -<span class="hljs-number">70</span>),<br>(-<span class="hljs-number">3</span>, <span class="hljs-number">18</span>, -<span class="hljs-number">69.3</span>),<br>(-<span class="hljs-number">2</span>, <span class="hljs-number">18</span>, -<span class="hljs-number">70</span>),<br>(-<span class="hljs-number">1</span>, <span class="hljs-number">18</span>, -<span class="hljs-number">69.9</span>),<br>(<span class="hljs-number">0</span>, <span class="hljs-number">18</span>, -<span class="hljs-number">67</span>),<br>(<span class="hljs-number">1</span>, <span class="hljs-number">18</span>, -<span class="hljs-number">66.5</span>),<br>(<span class="hljs-number">2</span>, <span class="hljs-number">18</span>, -<span class="hljs-number">68.6</span>),<br>(<span class="hljs-number">3</span>, <span class="hljs-number">18</span>, -<span class="hljs-number">66.8</span>),<br>(<span class="hljs-number">4</span>, <span class="hljs-number">18</span>, -<span class="hljs-number">65.4</span>),<br>(<span class="hljs-number">5</span>, <span class="hljs-number">18</span>, -<span class="hljs-number">68.6</span>),<br>(<span class="hljs-number">6</span>, <span class="hljs-number">18</span>, -<span class="hljs-number">69.9</span>),<br>(<span class="hljs-number">7</span>, <span class="hljs-number">18</span>, -<span class="hljs-number">65.7</span>),<br>(<span class="hljs-number">8</span>, <span class="hljs-number">18</span>, -<span class="hljs-number">66.9</span>),<br>(<span class="hljs-number">9</span>, <span class="hljs-number">18</span>, -<span class="hljs-number">67.3</span>),<br>(-<span class="hljs-number">15</span>, <span class="hljs-number">19</span>, -<span class="hljs-number">65.6</span>),<br>(-<span class="hljs-number">14</span>, <span class="hljs-number">19</span>, -<span class="hljs-number">65.2</span>),<br>(-<span class="hljs-number">13</span>, <span class="hljs-number">19</span>, -<span class="hljs-number">67.8</span>),<br>(-<span class="hljs-number">12</span>, <span class="hljs-number">19</span>, -<span class="hljs-number">66.9</span>),<br>(-<span class="hljs-number">11</span>, <span class="hljs-number">19</span>, -<span class="hljs-number">66.1</span>),<br>(-<span class="hljs-number">10</span>, <span class="hljs-number">19</span>, -<span class="hljs-number">68.4</span>),<br>(-<span class="hljs-number">9</span>, <span class="hljs-number">19</span>, -<span class="hljs-number">66.3</span>),<br>(-<span class="hljs-number">8</span>, <span class="hljs-number">19</span>, -<span class="hljs-number">65.3</span>),<br>(-<span class="hljs-number">7</span>, <span class="hljs-number">19</span>, -<span class="hljs-number">65.6</span>),<br>(-<span class="hljs-number">6</span>, <span class="hljs-number">19</span>, -<span class="hljs-number">67.1</span>),<br>(-<span class="hljs-number">5</span>, <span class="hljs-number">19</span>, -<span class="hljs-number">69.1</span>),<br>(-<span class="hljs-number">4</span>, <span class="hljs-number">19</span>, -<span class="hljs-number">69.4</span>),<br>(-<span class="hljs-number">3</span>, <span class="hljs-number">19</span>, -<span class="hljs-number">68.4</span>),<br>(-<span class="hljs-number">2</span>, <span class="hljs-number">19</span>, -<span class="hljs-number">69.9</span>),<br>(-<span class="hljs-number">1</span>, <span class="hljs-number">19</span>, -<span class="hljs-number">68.6</span>),<br>(<span class="hljs-number">0</span>, <span class="hljs-number">19</span>, -<span class="hljs-number">67.1</span>),<br>(-<span class="hljs-number">14</span>, <span class="hljs-number">20</span>, -<span class="hljs-number">68.3</span>),<br>(-<span class="hljs-number">13</span>, <span class="hljs-number">20</span>, -<span class="hljs-number">65.4</span>),<br>(-<span class="hljs-number">12</span>, <span class="hljs-number">20</span>, -<span class="hljs-number">67.7</span>),<br>(-<span class="hljs-number">11</span>, <span class="hljs-number">20</span>, -<span class="hljs-number">67</span>),<br>(-<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, -<span class="hljs-number">65.4</span>),<br>(-<span class="hljs-number">9</span>, <span class="hljs-number">20</span>, -<span class="hljs-number">67.6</span>)]<br></code></pre></td></tr></table></figure><p>matplotlib 尝试绘制 xy， 忽略z</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> matplotlib <span class="hljs-keyword">import</span> pyplot <span class="hljs-keyword">as</span> plt<br>x = []<br>y = []<br><span class="hljs-keyword">for</span> point <span class="hljs-keyword">in</span> data:<br>    x.append(point[<span class="hljs-number">0</span>])<br>    y.append(point[<span class="hljs-number">1</span>])<br><br>plt.scatter(x, y)<br>plt.show()<br></code></pre></td></tr></table></figure><img src="/2021/04/05/gslab2021-PC-Security/image-20210404022740104.png" class="" title="image-20210404022740104"><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://learnopengl-cn.github.io/01%20Getting%20started/08%20Coordinate%20Systems/">https://learnopengl-cn.github.io/01%20Getting%20started/08%20Coordinate%20Systems/</a></li><li><a href="https://learnopengl-cn.github.io/01%20Getting%20started/01%20OpenGL/">https://learnopengl-cn.github.io/01%20Getting%20started/01%20OpenGL/</a></li><li><a href="http://www.opengl-tutorial.org/cn/beginners-tutorials/tutorial-3-matrices/#%E6%A8%A1%E5%9E%8Bmodel%E8%A7%82%E5%AF%9Fview%E5%92%8C%E6%8A%95%E5%BD%B1projection%E7%9F%A9%E9%98%B5">http://www.opengl-tutorial.org/cn/beginners-tutorials/tutorial-3-matrices/#%E6%A8%A1%E5%9E%8Bmodel%E8%A7%82%E5%AF%9Fview%E5%92%8C%E6%8A%95%E5%BD%B1projection%E7%9F%A9%E9%98%B5</a></li><li><a href="https://www.jianshu.com/p/eedc41051bd9">https://www.jianshu.com/p/eedc41051bd9</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2021腾讯游戏安全-初赛PC题&quot;&gt;&lt;a href=&quot;#2021腾讯游戏安全-初赛PC题&quot; class=&quot;headerlink&quot; title=&quot;2021腾讯游戏安全 初赛PC题&quot;&gt;&lt;/a&gt;2021腾讯游戏安全 初赛PC题&lt;/h1&gt;&lt;p&gt;flag:dogod&lt;br&gt;</summary>
      
    
    
    
    <category term="CTF" scheme="https://panda0s.top/categories/CTF/"/>
    
    
    <category term="Reverse" scheme="https://panda0s.top/tags/Reverse/"/>
    
    <category term="Windows" scheme="https://panda0s.top/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>NN &amp; BP Algorithm</title>
    <link href="https://panda0s.top/2021/03/29/NN-BP-Algorithm/"/>
    <id>https://panda0s.top/2021/03/29/NN-BP-Algorithm/</id>
    <published>2021-03-29T12:42:01.000Z</published>
    <updated>2021-03-29T12:52:49.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="神经网络-amp-反向传播算法"><a href="#神经网络-amp-反向传播算法" class="headerlink" title="神经网络 &amp; 反向传播算法"></a>神经网络 &amp; 反向传播算法</h1><p>神经网络基本的表示方法网上有许多资料，我就不再赘述了。对我来说最难的部分是反向传播算法，我花了许多时间去理解反向传播算法。</p><h2 id="链式求导"><a href="#链式求导" class="headerlink" title="链式求导"></a>链式求导</h2><p>反向传播算法就是复合函数链式求导的一个应用，什么是链式求导呢？</p><p>以求 $ e=(a+b)*(b+1) $ 的偏导数为例子</p><img src="/2021/03/29/NN-BP-Algorithm/ee59254c9432b47cfcc3b11eab3e5984_1440w.jpg" class="" title="img"><p>根据链式法制,  </p><p>$\frac{\delta e}{\delta a} = \frac{\delta e}{\delta c} \frac{\delta c}{\delta a}$</p><p>$\frac{\delta e}{\delta b} = \frac{\delta e}{\delta c} \frac{\delta c}{\delta b} + \frac{\delta e}{\delta d} \frac{\delta d}{\delta b}$</p><p>不难发现， $\frac{\delta e}{\delta a}$ 和 $\frac{\delta e}{\delta b}$ 的计算路径有重复项，反向传播算法避免了重复计算，有点类似动态规划的思想。反向传播算法反向逐层计算偏导数，实现只通过一次计算，得出代价函数对所有参数的梯度。</p><h2 id="反向传播算法过程"><a href="#反向传播算法过程" class="headerlink" title="反向传播算法过程"></a>反向传播算法过程</h2><p> 编程作业4给的神经网络模型如下</p><img src="/2021/03/29/NN-BP-Algorithm/image-20210329171546567.png" class="" title="image-20210329171546567"><p>如何利用反向传播算法求 $\theta^{(1)}$ 和 $\theta^{(2)}$ 呢？</p><p>首先假设代价函数的符号为 E，并且有如下表达式</p><img src="/2021/03/29/NN-BP-Algorithm/image-20210329171956835.png" class="" title="image-20210329171956835"><p>下面内容就是我自己根据链式求导法则推的，因为很多文章直接引入一个叫“误差项”的概念，非常难理解。</p><p>根据链式求导法则，可以得出:</p><p>$\frac{\delta E}{\delta \theta^{(2)}} = \frac{\delta E}{\delta a^{(3)}} \frac{\delta a^{(3)}}{\delta z^{(3)}} \frac{\delta z^{(3)}}{\delta \theta^{(2)}}$</p><p>$\frac{\delta E}{\delta \theta^{(1)}} = \frac{\delta E}{\delta a^{(3)}} \frac{\delta a^{(3)}}{\delta z^{(3)}} \frac{\delta z^{(3)}}{\delta a^{(2)}} \frac{\delta a^{(2)}}{\delta z^{(2)}} \frac{\delta a^{(2)}}{\delta \theta^{(1)}}$</p><p>令</p><p>$\delta^{(3)} = \frac{\delta E}{\delta a^{(3)}}\frac{\delta a^{(3)}}{\delta z^{(3)}} = a^{(3)} - y$</p><p>$\delta^{(2)} = \frac{\delta E}{\delta a^{(3)}} \frac{\delta a^{(3)}}{\delta z^{(3)}} \frac{\delta z^{(3)}}{\delta a^{(2)}} \frac{\delta a^{(2)}}{\delta z^{(2)}} = (\theta^{(2)})^T\delta^{(3)}g’(z^{(2)})$</p><p>代入偏导数公式合并</p><p>$\frac{\delta E}{\delta \theta^{(2)}} = \delta^{(3)}g’(z^{3})$</p><p>$\frac{\delta E}{\delta \theta^{(1)}} = \delta^{(2)}g’(z^{2})$</p><p>用上面这两个公式就可以算梯度了，每一轮迭代算出所有训练集的梯度和，最后用平均梯度来代替当前次迭代的梯度。</p><p> $\delta^{(3)}$ 的求导可以看参考文献[4]，交叉商的求导。看起来很像平方误差的导数….其实并不是。</p><h2 id="lab4-代码"><a href="#lab4-代码" class="headerlink" title="lab4 代码"></a>lab4 代码</h2><p>向量化实现 nnCostFunction 代码如下</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">[J grad]</span> = <span class="hljs-title">nnCostFunction</span><span class="hljs-params">(nn_params, ...</span></span><br><span class="hljs-function"><span class="hljs-params">                                   input_layer_size, ...</span></span><br><span class="hljs-function"><span class="hljs-params">                                   hidden_layer_size, ...</span></span><br><span class="hljs-function"><span class="hljs-params">                                   num_labels, ...</span></span><br><span class="hljs-function"><span class="hljs-params">                                   X, y, lambda)</span></span><br><span class="hljs-comment">%NNCOSTFUNCTION Implements the neural network cost function for a two layer</span><br><span class="hljs-comment">%neural network which performs classification</span><br><span class="hljs-comment">%   [J grad] = NNCOSTFUNCTON(nn_params, hidden_layer_size, num_labels, ...</span><br><span class="hljs-comment">%   X, y, lambda) computes the cost and gradient of the neural network. The</span><br><span class="hljs-comment">%   parameters for the neural network are &quot;unrolled&quot; into the vector</span><br><span class="hljs-comment">%   nn_params and need to be converted back into the weight matrices. </span><br><span class="hljs-comment">% </span><br><span class="hljs-comment">%   The returned parameter grad should be a &quot;unrolled&quot; vector of the</span><br><span class="hljs-comment">%   partial derivatives of the neural network.</span><br><span class="hljs-comment">%</span><br><br><span class="hljs-comment">% Reshape nn_params back into the parameters Theta1 and Theta2, the weight matrices</span><br><span class="hljs-comment">% for our 2 layer neural network</span><br>Theta1 = <span class="hljs-built_in">reshape</span>(nn_params(<span class="hljs-number">1</span>:hidden_layer_size * (input_layer_size + <span class="hljs-number">1</span>)), ...<br>                 hidden_layer_size, (input_layer_size + <span class="hljs-number">1</span>));<br><br>Theta2 = <span class="hljs-built_in">reshape</span>(nn_params((<span class="hljs-number">1</span> + (hidden_layer_size * (input_layer_size + <span class="hljs-number">1</span>))):<span class="hljs-keyword">end</span>), ...<br>                 num_labels, (hidden_layer_size + <span class="hljs-number">1</span>));<br><br><span class="hljs-comment">% Setup some useful variables</span><br>m = <span class="hljs-built_in">size</span>(X, <span class="hljs-number">1</span>);<br>         <br><span class="hljs-comment">% You need to return the following variables correctly </span><br>J = <span class="hljs-number">0</span>;<br>Theta1_grad = <span class="hljs-built_in">zeros</span>(<span class="hljs-built_in">size</span>(Theta1));<br>Theta2_grad = <span class="hljs-built_in">zeros</span>(<span class="hljs-built_in">size</span>(Theta2));<br><br><span class="hljs-comment">% ====================== YOUR CODE HERE ======================</span><br><span class="hljs-comment">% Instructions: You should complete the code by working through the</span><br><span class="hljs-comment">%               following parts.</span><br><span class="hljs-comment">%</span><br><span class="hljs-comment">% Part 1: Feedforward the neural network and return the cost in the</span><br><span class="hljs-comment">%         variable J. After implementing Part 1, you can verify that your</span><br><span class="hljs-comment">%         cost function computation is correct by verifying the cost</span><br><span class="hljs-comment">%         computed in ex4.m</span><br><span class="hljs-comment">%</span><br><br><span class="hljs-comment">% reshape y</span><br>y_ = <span class="hljs-built_in">zeros</span>(m, num_labels);<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span> = <span class="hljs-number">1</span>:m<br>    y_(<span class="hljs-built_in">i</span>, y(<span class="hljs-built_in">i</span>)) = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">end</span><br>a1 = [<span class="hljs-built_in">ones</span>(m, <span class="hljs-number">1</span>) X];<br><br><span class="hljs-comment">% hiden layer</span><br>z2 = a1 * Theta1&#x27;;<br>a2 = [<span class="hljs-built_in">ones</span>(m, <span class="hljs-number">1</span>) sigmoid(z2)];<br><br><span class="hljs-comment">% output layer</span><br>z3 = a2 * Theta2&#x27;;<br>a3 = sigmoid(z3);<br><br><br>t = -y_ .* <span class="hljs-built_in">log</span>(a3) - (<span class="hljs-number">1</span> - y_) .* <span class="hljs-built_in">log</span>(<span class="hljs-number">1</span> - (a3));<br><br><br>tmpJ = (<span class="hljs-number">1</span> / m) * sum(sum(t));<br><br><br><span class="hljs-comment">% Regularized cost function</span><br>T1 = Theta1(:, <span class="hljs-number">2</span>:<span class="hljs-keyword">end</span>).^<span class="hljs-number">2</span>;<br>T2 = Theta2(:, <span class="hljs-number">2</span>:<span class="hljs-keyword">end</span>).^<span class="hljs-number">2</span>;<br>rr = sum(sum(T1)) + sum(sum(T2));<br>rr = (lambda / (<span class="hljs-number">2</span> * m)) * rr;<br>J = tmpJ + rr;<br><br><br><span class="hljs-comment">% Part 2: Implement the backpropagation algorithm to compute the gradients</span><br><span class="hljs-comment">%         Theta1_grad and Theta2_grad. You should return the partial derivatives of</span><br><span class="hljs-comment">%         the cost function with respect to Theta1 and Theta2 in Theta1_grad and</span><br><span class="hljs-comment">%         Theta2_grad, respectively. After implementing Part 2, you can check</span><br><span class="hljs-comment">%         that your implementation is correct by running checkNNGradients</span><br><span class="hljs-comment">%</span><br><span class="hljs-comment">%         Note: The vector y passed into the function is a vector of labels</span><br><span class="hljs-comment">%               containing values from 1..K. You need to map this vector into a </span><br><span class="hljs-comment">%               binary vector of 1&#x27;s and 0&#x27;s to be used with the neural network</span><br><span class="hljs-comment">%               cost function.</span><br><span class="hljs-comment">%</span><br><span class="hljs-comment">%         Hint: We recommend implementing backpropagation using a for-loop</span><br><span class="hljs-comment">%               over the training examples if you are implementing it for the </span><br><span class="hljs-comment">%               first time.</span><br><br><span class="hljs-comment">% h1: 5000 * 25</span><br><span class="hljs-comment">% h2: 5000 * 10</span><br>sum_Theta2 = <span class="hljs-built_in">zeros</span>(<span class="hljs-built_in">size</span>(Theta2));<br>sum_Theta1 = <span class="hljs-built_in">zeros</span>(<span class="hljs-built_in">size</span>(Theta1));<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>  = <span class="hljs-number">1</span>:m<br>    d3 = (a3(<span class="hljs-built_in">i</span>, :) - y_(<span class="hljs-built_in">i</span>, :))&#x27;; <span class="hljs-comment">% 10 X 1</span><br>    d2 = (Theta2&#x27; * d3 .* sigmoidGradient([<span class="hljs-number">1</span> z2(<span class="hljs-built_in">i</span>, :)])&#x27;); <br>    d2 = d2(<span class="hljs-number">2</span>:<span class="hljs-keyword">end</span>, <span class="hljs-number">1</span>); <span class="hljs-comment">% 25 X 1</span><br>    <br>    sum_Theta2 = sum_Theta2 + (d3 * a2(<span class="hljs-built_in">i</span>, :));<br>    sum_Theta1 = sum_Theta1 + (d2 * a1(<span class="hljs-built_in">i</span>, :));<br><span class="hljs-keyword">end</span><br>term1 = lambda .* Theta1;<br>term2 = lambda .* Theta2;<br><br><span class="hljs-comment">% Part 3: Implement regularization with the cost function and gradients.</span><br><span class="hljs-comment">%</span><br><span class="hljs-comment">%         Hint: You can implement this around the code for</span><br><span class="hljs-comment">%               backpropagation. That is, you can compute the gradients for</span><br><span class="hljs-comment">%               the regularization separately and then add them to Theta1_grad</span><br><span class="hljs-comment">%               and Theta2_grad from Part 2.</span><br><span class="hljs-comment">%</span><br><br><span class="hljs-comment">% -------------------------------------------------------------</span><br><br><span class="hljs-comment">% =========================================================================</span><br><br><span class="hljs-comment">% Unroll gradients</span><br>Theta1_grad = (sum_Theta1 + term1) ./ m;<br>Theta2_grad = (sum_Theta2 + term2) ./ m;<br>grad = [Theta1_grad(:) ; Theta2_grad(:)];<br><br><span class="hljs-keyword">end</span><br><br></code></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>[1] <a href="https://zhuanlan.zhihu.com/p/40378224">https://zhuanlan.zhihu.com/p/40378224</a>    “Back Propagation（梯度反向传播）实例讲解”<br>[2] <a href="https://www.zhihu.com/question/27239198/answer/89853077">https://www.zhihu.com/question/27239198/answer/89853077</a>    “如何直观地解释 backpropagation 算法？”<br>[3] <a href="http://neuralnetworksanddeeplearning.com/chap2.html">http://neuralnetworksanddeeplearning.com/chap2.html</a>    “How the backpropagation algorithm works”<br>[4] <a href="https://blog.csdn.net/Jerry_Lu_ruc/article/details/107974072">https://blog.csdn.net/Jerry_Lu_ruc/article/details/107974072</a>    “关于交叉熵下softmax和sigmoid的求导”</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;神经网络-amp-反向传播算法&quot;&gt;&lt;a href=&quot;#神经网络-amp-反向传播算法&quot; class=&quot;headerlink&quot; title=&quot;神经网络 &amp;amp; 反向传播算法&quot;&gt;&lt;/a&gt;神经网络 &amp;amp; 反向传播算法&lt;/h1&gt;&lt;p&gt;神经网络基本的表示方法网上有</summary>
      
    
    
    
    <category term="ml" scheme="https://panda0s.top/categories/ml/"/>
    
    
    <category term="note" scheme="https://panda0s.top/tags/note/"/>
    
    <category term="ml" scheme="https://panda0s.top/tags/ml/"/>
    
    <category term="NN" scheme="https://panda0s.top/tags/NN/"/>
    
  </entry>
  
  <entry>
    <title>EasyRunning</title>
    <link href="https://panda0s.top/2021/03/16/EasyRunning/"/>
    <id>https://panda0s.top/2021/03/16/EasyRunning/</id>
    <published>2021-03-16T13:41:17.000Z</published>
    <updated>2021-04-22T13:02:57.303Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="fc19a3b60249b62f21e06c8ecaefd3f44241a4de27a4b8fdd656a5cfb9b0f2e0">bb9a1ef8fdb616e7a4a38c31a84e5d3cce65a310bbbf75c02798b0e53794b6900b4e76b7ee97a5023cdb738329b3289430075240e3515ae9f2977c73661a11c365041cfb04e7ec759c37fbb1c0578417164f67fd86682a564e00cb5cf48a39a46621ae2f71853f0a6e3180a23b1a6b8094cbb9dd42ce73f4392d1ab0fbfd02d1e6f15f90ee1729a89ce0b03206ff471b9c563eb7e6c48ecc112658a7252f9794bad06fbf5f03233319a301a902f586396224856d091bb47ca684e845a6b3aef6f62f1396db6170ac4f782a0250121d5dbb96cc5b5a43d49380ea801cac1ae2738fc950f74ceec89104b9605ed902103e7df538b8b2ab8186bd6b4c3aebffaed67e2d909136ae89c5dfa1943abeb4b047841a9bedafbd2cc0c888fdd59779047cccf919ab9d7a4ec5cb0545ef86e4d45fe3cdc807530437d84f406b6dc79247dac7b9e6ec633b09215539c9fc777efb2a6d1540a0f128a62c545cd91980b7b3fe4fc4529305b900141a5190f07a70c3c516215198a99854d79cf26402bad7652f1fe9c28a3ac51a00dcf8d6c13b7ccc110fdfe06161878f5acf283952d48ccde248f981b3e2134688ac540bcb3d18fbd6b85db33f9664cb3a49a46e446e549b9dcab82c5b1171fd0ca8de13d7e158fd7cf825cf5cc4138fb56e81c12c23e314708bc0d9e819ce202afd0c841e6bc8db02002ece2bce260d99bcba191e8bb2cc3a5084804b9b8fa1038893b4c69be642d524095b459c04bc384aa262336e6c8baa01f516e1634b0aa37c989e1ef3eddbb546ac4107f1db7fb35164efc624b01e162cd414dd48b651b9a4b7c58ed938d91b1dac39435e0862fff417b81bc4e585ed67c67465acd4a676676030f78e6155bee2e92f938c748acc013bcfff8abe5fef5a18e20d655d5b88f9459cf11654e88f0f07b939cdbd374bbb0069cb32e7b398237b29526bdb2ad7bf6c9399250c7f3d7e0de305f944ac2aab790df75914b1e1b6a128b94071b66c788e99b409039d9ea67387a1dda59906759be30b6aff982f20b33825bbd9d9f056508ef1c82b21ccce02550279dce0fd57dce0ade26ff6f52988139ff1357b952ecb150d3bbd9134fd18add425c2bb8cde5e3a1d2b3282c90d65b42f858b79282658fe506b3d85e7b371f7506714fd2e6570ecd4f7eed9f4d241ce0ea8f90c1575a4dd39c2630843ffd513e998442e1446abc64de4476f0cab46caf7e47381b78cd5134e9152c9f0a951fd4bdf89dff207158c862cd68112f38fd80605a556046518ddba61c9b935ec202b3c59b2dbbf7ec06841ec5ba7ff17ba94c575d5e0a723555b1ab0322e25cca53a883b498e157b43198c72b8a2b90dee665888b3eebaee516d16ebb5c876174b4a59b6b5cdfd307addc5e6cc3bce8d9a85953bba39a0c8921c02275b2776a72371df3fcae567559a8d5e71a09074f7779a204a6d92544d6092ef76f677edfd0b72d797671e0d253f3c7860240f8fb582448cfe4406ec518750a293b9ea29bdac0b58fc4e1ce002e2572e76c618403829f8bf700ab33b6a6844cd45ef667dfccc2f399990a82c11419004ec5d455057f95d75aa9cbb93c052b4b32209c8a93a25261b3f57d259ca87cbb4871885da598bbffc1d3a9aba66d940f102cd35707cdeb7114c10a0fb6a7264565670c722fa9bd55cd5cc7ec2847d7a42fdbbf4007fdfe538513528706ddff35cc2d5bf03d159301f5ea24e5b3f3c58b1085ab67d8f8e2b7efe63bbcde54aa7c824064e86c11c63712fcd3d8afaaf19bef6350eb5160da1156211dcea56d63a5897816f3a28f79e867d3e5125300e2de0cdc4fe34a23cf4fa720ca9bb31727d2518006231a85c435084938e02022a937c411224d2c17c3ce713f7313d6316c350b7ee77d0d542adf83bad2a8d073a5fb22d70fe84a7e5affbdaf9a087b85308fbb8be9c02034e2f8c652e4c14223c3f7573439096ca30114b161ee7d949bd1a26efda97da80aed0662765db7b833d11eec092a9bc0d5f3acf4a77954d4ad389fccf26d7cad7de9b08bdf41869736ca26f7ca126e6635ff4fbfd29f0fe9e8d5032a33e532f8dda9cf353e45b0dfff54181c6b624835527ca7e3cfc0ad6b1191566c1aba183c2c9814b8f8bc4b018284f468645882ea9b9285c99523d17ad6ae79ee73f0a731b2ec97f4d5bdcbf25c7fb552162f88b875c047268603930b84670b52c64351c25518a7047f17334ab759fdd53b15b2229d9be938ebab1eb88fe2c4a3e7f01a3e7442f97b7ae32c0cc5af31dc9fc11e8ad2d2ddc1debe508c392c58a37fc8c1ea464246d7bd0fac38af36d5e6b4f7a177078279280c1e95bc60db905fcf444df6e79b36ff08f11b10a86ba78ea809f85ae1b1b7ca8d02de87d0a9d6c1c074ec5e95d0c21a8df9c98b3bfb8664034ffe0c10b746f80a6169a771e92b870bd3458504a9e2c0a7520ad1c53d5349ed14bef056629ce659f7c5dc10cdcb10a5bbd82d37912b49eb673abdbb718bd0d417bb0add3c3d86d867b6156ac7d992e8db0dabc83ad9201c2254bf3459264a093b4736f528eb3f2267b73c7134daba4cadc45a6d64d01bdc4da68c570935c3054520f4fcd2f137009c00698afcd14bc4fcc117f6ad4fdde16762de5b5ed77310d638ec35f37c45044c1931326b611ab58fa64117b3d90fa0a22ff7b40a1e1153dbb216cb0812dcdf3a57c52811048340438c0712293ce276348a366aef4462898045a14fa7845aa57afa4278b51212e1f0149dc06c7fd9d51a7023912eaaa7b3c746da7a51ff9233a67f6981452b03a4826646793a093b68ab61e2bdd9933479b3faacf2508cf35c82af17e2b7edc23b84b0d7f6526b5a32af266c9ec2000fafe85afffb3dce5f206430eb85c194f17e43e94042b33fae4b9438b999aa5242bb190d92cd00d678ea73873ec7c0d5e6479a13b17535a6b014c6ba12cb851156d79b2fb4e97e474dd572f957657dd05e12ac825f92230623a35e4a3d55d1371b95e6132196ebc4fb9065d74e2d839171caa5e76d7c032bfd7467a25a9bad27b63896893bc5c8e8248d36b22a0c92f7c7ec91e4ed3ab9d5868095107815334412e6443f7a7c81421139c25e789972104c58b5d5e39fcb32acf527a8e16df184b4d5aa5a68588f03891be77b3560175f53b007c4880a24b59f2d3ccc9679db04a16d04bd82960cef33ae75556af51031844a1092b4e5673efe12d54274e623aa997c01b9e816931a39ecfdc9b42fc30996b7ee3e66214001fa421f7ecebd4693d4158812bb95a1d8f5961b693358c6e48507e21f38acff9c83ffdbae2eee76406cd17b75036c091d6f8e1817e5988e355993416276f9e4b93358a01ba1314c9d1bc636830cb46e2a1a8157e229377375af034b1223ef9959a7573d8c270b6dc22030e321c611bb8b024517d0912e2c3979524a8249f82ab76b5b78e8a136d11601ddb9b8aea9de828ec358d93cbb3a0d556683b41371bbc14e090e70c7c57adc1df820d43113fb6a911ae239843188a42e21f83527d6bbc586a812a4df6aba18ac34322b7ab1da54dc78ca3a25f888ccd2db231ae7f6657589fe4f6f905449dfc20bc9344440980a4c1aa03303f2256750efe52c0ac7425f4b0afadb5d3afa16d4ec673bd2cdc1fd75b818b296898e29f5968d9170ec014f04ea8783539c4cf8d22248c05c30e686ad3ff8d4384f9616002beb55847de1232f1e015293efb1abe5f4f13857fa8ac359651e170e53b39b152e4761ef0a8ee682b124df2d2139ef8b20ab19c62661fb83149e3b41e0f1f8ce6c36b319a2a2389895119fdb24c142601c8e12da4e28dfdbbc13e613f8150745955515ccb008d55883fc66f47a5a739f2a738f15a5ddb6627a43ef764c5911da88b63f9ac99f99d7b776a3ecc3dc5059f84fb8c96a52d8f4dc887df431a1e41784cf024ac7c3f94106a181e375fbb23dc8c2d2a8fcb02092eb820b4a2c41744a67eaaf8c4640f50bf3b3105563454e630a689c7d7c3a06d803693b965a64e5f2a5dc45dbd9bc77dadf7ec29b34371fda7c9ff1b61637ba227a2ee33a602bcd82104438fda5733c18e280fd3dc73e81966e3b3a2b03b7fbc58eddb76c2e8081d63ef5f8927c8e6039f1dbb77a088ae532d1b07b33ee05aebb8a670e82530bb18a1fb0fb28a3ada6bad401e82e2d102fb54dfcc6f8776312f1b36be99516e91be820752d707010745256c3ab1483252c70e8fddaa39f0fdec5dc95ebd8ec98ca43c1c7acb46ec2af5110fc05814c876073e33fba6a17128fa5b5c332c3622dd907e8f71b64daa266067677f3b1683a0c2a4293b7f3896f06b891f57a7ce159307550131ce463531235b218dca2d5c66581149a61f044bb3ba31e6a1e997725083ccdb6433d54aa05b8db4c631a7e9c8058e5356662e383935e5fc286f9c4efeb2e047bde18f0df5151344a843f106c6545212efe3083c15a235ce30e3b6ef700e37e21513045fa60041a3bc317cc90aa1a9b1cbd57fa58abf7c86480f3a38882140080fed9be6112874d6dc16bb133dbf9ba741d2c835c6a76eab43b09b52711b17b0a57093787b4355488f2b666d9aac16ea4b1aef6975a7c6a59e9218812151c36cb8753b1918d05e9160d11db0b72c23952d0bdb0ac5616268e794ccd28753d4c45a4fb7e1827d2d3bff5f16146f1701753b0f91ea4304d5a2b9932c26a75059a0ca6d42e66efe1c995c9d67a6c2905f37fee3b95a9a3ee4f9084f912dbb4a5f548e8b43a472029ee08c388baf9328b8c59eb5bc275a12c1a29118209b50cd5365ae0ec2accb782b3d3ed6ab1604a02d80012b501498a7e88ef867e14e8b222e648fd9f4fcee640d64ce9dbd20c47be4a71253ff765f8fc3f34d7ac719dc497b6d78476852634b1c13584e1d4bbb2eddd2bfb974dbfca5f8b6469bda0dc8527344b5e8d8fcc17f9a701adaa99e2da86b9721e8985f7123b6025c620db6ade7e276718f30aa796dc992e3d260438b5fde7f6aa0842cfcf9fbc7a593db3b275df2b65053ec980acf061338db0da731a71ac0e628995d6877e2150417c04e2073cad7c166260f6e0d3d77723e7c385d4a17f8021ee0eba6e69f9a4d883a11f286c488aca90ecd14b1e41b00be9774ea30aa7cc6c221451be4786cae9d33ac25ff96a7ac174d64e2e93e94b47299e5aef51b7f1cf10972d84063a21ad2a0dad0a34f27bba882a2dad39a312d227610d08f635bd286a0579da42912ea7370d79ef50f08474afb9b950d668b543d8edd6f35d59613f160106b127551cd452734fb76a0c2089d376c05df50c139318bcdcc8d7a5a25510fc82fab4f3a1d7820a09c04e63e2c20255e0ea663c9ccf0acafe5be8b6cf70e3d9d2cab7862248af7a2f60f5f7f53337142eef6283c1c2b43043541cf50ea13a2244f8c82d55756d466e5075d498d524e578505c29d0001bc653627ee6d9f216ba72b9c858126c14314cb5e898f2aedb6ebd80cc7e7be0834b040ae945ca782d33a2bd610965de3edcf7af6ffc4b1702394884d99c1d1739d2ec962c98777d28fe154a0635f48c1d495a4e2b5f0f365681c247d9a217c08d144ac549051b5ccb0e468908fbdbe6abb2c22976d56b8faaeefcba890d0acdba3929a9d2c46dc0d870ad015c096d95f9ff825dfc47f9673b62fbda9c22e047a44856f15fae48178fbc7b8a2f76d9beb748fc4fcee9fcc99be0fbff87bbd590f4df8e016bb882e979aa4987e51ff1581105bbcf52ed0b0db60dbbfa330657e2ffb20b8d077f0ba1e34269fbac87114d2941223108492c3706b4789892b334fbbf46b645fcbbcaaec22c4b1d1abac7c8f821ae58460ac7a103fea91b1dd3b08171f82acb97dbe75ca4c0ba67cc43ff01cf96b56620c241e004a5d4e8f91d309f3818490b8cb3e6b1951e88fc1597a3317e8047f2919a133831fc965985569445fdb46d28059a51171ef896072d86cefdfa502224918f9fb9f54e494e313ccc72e9c56f560abb785ce9665e0fa48aa8019202aabe851c40a6f9f17bb066812f0c8fcedc793eb81d1a6ff80dbee81297bee6cec98190ae8e24f2912c7e72a262529a430f0067c27bb6538019188d8a1aad54ccacd5ff4c68e875c2cd6a73f0cf1bce4f4a9f1409164526181b4e1b5dd0320d91fedca820db85c0c7399b55a6c340f5e184436b08570bfcd199d1d5c1c83f628d3e84fc9b42305fa8686194d6893c3d2608a735c5bff16604bcb14c1422130e13feb99378c9d7880211b8463c5fe1e044ac017581998edcbc3a18140977735431519c60a3d3c8e2b3f4181028d7741aed4ba800ce9dc7200ae816f80891aed451b332f5dc7459256a77d1e05fd3d89ddcaa1fb9c9bbe0e96efae814c21eea77a50ef206cfa880a1b94da67ace555c774dab6617dfdcfed3b04246e5d2004f63843f4237f178e988910a38825e111886cd90b1eb567074aac0e049be65e6bd28147265d0219b195a90ef04df256db901850096ceb9791acb18df9776bc05a3809ecc3e55489fbc43c45bd56a39218868ee1924918940562f039f0926291f42058b6301510f1b3288d1912cd90e2f9a3bd0c9355907a8b27d818f4d3ccfde0876291f9361463c891e90477d75e282ee7acaef06465c2bebf8b9c95a7b252dac4101d4acf3ad9d87bc9eb0c2315c7610ef6b46c32393da12865477764ffe255f5fc9b5d09c8e15de10f3cd07f1791520f83141b432cea2262903d8aee19ae9b92d30afc5778bea244022efb3ba49537a2a0f8ab37eac8c6757ca3d28794b3de1b37d9f19ebf97465de8b5f5c71cd1f8fc1c78611f98c5d70c7a582039f40f2845d8ecaa2d1a00542d2b94b60b76e3f5156a7768e6ad73b6ad855e97042eb0f20deef0773e7d5d8832bd3200ebacfb726f1374f1110f4910d08969e7eb4fbb0206c8980c02466aa6f745eab61144c8e347ee8f6e0100fc84d34dc4f8496d8e971b6cdf2e13733467813360a5b1803c410ab6ce9b29d20690bdf5d3b7298b2fdd2f8bd686ce79a96f5b5bbe9dedae801ab7b8a28b394fb5c1223532f7deeb8c3230f6bba13f793b0c836e6c28ffc5d932047e8c713ee7183d621864c96eaaf1dcd99948914ef072d1188a029d1cb8d026e04c3705d490faa4e2afa84bdbb62917f9eea7ad5728099093cb0a1f2c37943be44d87ea99e49344c8259e63005bef18218b6aac42c2e1c33fac28acde12fa50363b66b4e8894354340dfb3784f6e575ff7383fe295969fbd2e136602b8831a3fcc710b8937383858c8de5c17d66f4f0c258c5f1c39e693ca663bf784780cb82217ac844ac6b114897023360f24c86755d21be754da318ff9dd05d4b3359b7a71857695be8fdc56c256bf24f50e1c41d174309aae45e2e1d878d5143da05faa68ff65a8d6e7f707373804439a6e484f2a054f2815809015281680e16c683026d1cc20d054268b16a413fb27b5190447a801bfb5b6cfe29db6a67558c63c35c84b1ff943c4b4d199b9e2b15b406b4b4a96602d74b6bf9d7360e6c13986d15edd95dfc712d60b5d4d87d6c461dfd42e414bc65b40d53db02a3d7b3a55bb5cac072f556462222b283e6618fe933cb77405205e42ba0b0ae8b97ae6705750d4e8e13bcfd9709d9771fd4cc42c4b223ed154f6b4f73d666df0a641e0459c4d6ef9f362af8efeaa517004463fbe8b6e55721eca52447d4101d181db02f1fefc055ebb40312eb6f0af2dd1d8ee28e7ff4120e5ef62722c1581e5afde727f458681f39caaa9cf7be9da033224fc8ed834a238731269b6de01bd51257fa707dbfab9f66d503e6ac431be74192f022746e1187abab3f72f9635e97b48b4af1c0f87583ab584c1cd93c40d3cc5e90bdcfc7b02ff530f3bdcf2ed50275484ece9cdefd85cfb2b00b058ababb243f570e4bcd67d393a138ce32d612037fc20f9855cde9c495fd460e864747d7f5f4304f674e1e7bc1f4d2c05460286a5072ee4a1727273e6a29b986e02b8398164692be30503a97b1ebdba7e877f926cfc5f91c6b974a40e472c275ca417d7f1fc2f8eb9343c21a18761a797795216f699de5d974db1c143c5d3085866e90a844ea249f98b237dd3bfcab286ff1ba60f9251caba58815ab07a3fd3fc826f62be2e422681d31f7197697b7ec327e6abc51df4e6e17e33c23724b709697f6c4e82f01dc4637abdf3c649d63efea274597fe89c5a35767f6251762b7deb80643baa2e546f1c9c4959a18013ff681c17265e204454e0439267cb30ad6b49a2d6cf95637f43ad1aa0ff39211a70954eec1c88c9524430c54fbbde620ef4c132a57c6c884f200a31ee2ba2b4f0cc607e6760f332e55c8680040dd5bada7d17826e3df3ef5904c0c8b0e93437e6da362af3b75fa2d223fbc194afc3442901dd1e97395fa4245a76ce4ce61a946f9ec01eb65135cddc6b163a38a63f959060752e0f86e2f18cc083e4d721bd6eabb7ed2f3a1977b52c9c5a42a609d94320bc239f770c1e9e80314feabe43489084e375b6a9273f543e0f356e3f0d98459ab08fb76c73b9f9f283807db8831c2ae6711f5d51a0701144b4f77b2426096a1bacba865ddb5bcb4e2f5cb6a5438d446e343db41a99056af0b70586ca079721a9f19d1f3b58d0a305598a315e57653422b4bc3f63b4a75d7ea468d31d6ad04e4781fb10ef0ea064974c6e051524596ad1271e26646ae3405ec4e511444bfa5a0ba41d4a74b5d10ca93afa5912d252a1cc5478a4e736c54d2d4236f3b776ce0607e412fcc8a21fd3c08e896a358eeff24e6b03abbb661b51bf4200768c49956d656e779a4cc05ea1e37703ff790e9c43bf5c0e3536edc3adcce6556dd860f87745940af4ffb93555cc26ac0bfa1406e1d2c5a22ac93668720783530eef905728ab01033caa524b41c3707880bfb5e17e966b3bc024b780cd6d68ca70d40000b8c4d19ae40d4da346ae23ddca2267b284d6bc3bfa7f1ec3436e9a9d4c68ff6c3f6eac2a5fa39949019f15c25492c57eec19f2557f3aea102b77d652c1e5c0004170104eff0863968a2816867b642824a3c1dd5fe8e7e7d30150353b99e935c720047e6a721d599b8f61df1d3b78c0f45fb6121893c9b9543f3a799cdb1e2ee1279e04d01e1075a42c69f2fddb7c9d33bd48c9ca90604a4d9f893d05d79f842296e38a7f61d910476c6cb09be82ee79b5bda15161c41ebefd67b09f2d7392f933b0a03dd543433a254a222330854bc7cdd150fe46da565af12dc609249bb84e8159abb4364a6143bfb061d2188597ea3c3df6eb149c664d767fa09a029c0fc35afecc9f1942d61b8e6e851609d7b1ef513c1af3852a422991af980e962ecd032471b925c38564e96af8595eb0849e36d91acabd11bbb42217bdb8b8727c706cf28889a5d9cb5087cd7f24ceea676f8f6629581e365b1157f57b6a2e88e5392385d184d8fa3f1d6c9b40173a3530de6f1575d54aa4f771871f654db4e258108ac09c87f12100c4d683ab94896d62922e32a5df29bc3d8cea7504cae56ebde7216eddf0d03571eff8958317a9efc1f9f8a0bc0fde551c54b6ee88660d7fb4802aa444155c7aca0027d28814bb772609f2dffeb4f055e5d38534e34cee92472f3371a58254b7f365aba55ab943568f80c69a198af5b0dc0ac4435b26b0db1bbdff44523c7e3741df9ad55127f854fa627cbb90032c8a3849e180ddce3806c69132dd47849cc11997f7305281464b31b89f34d1943e7e31c867df70be608097e983976efd410b271eda8a0703309a11d58ccea402afb4743a9013e2d03de0b8e9c3de946efd6260c1c6f99acb00db502d2a430629ac9c667afdb6638ef351f5eb8a31ab919fee4bc71cc73d8ec5f912416df41753026dc2a8ae74cd8f1cc1a87cb7d5de43bd48531de21730e00bdd5d4538125546327b269f9e05369b684d0d73490b3c7565ad934d70262c5a9b961b594ffef9e2ae816c531082f58254ae79779821c789292d259ead8b1fb3842e5a3116bcf41fe554344c0d8f4bd18e0b36cdda5d6ada83a243c39c7c71d6a7ebf8e8eb31f7c1c458b1a1dc0b4691c0de66e939d86a6299fc3e84091648e953f139c3b1898357e966ef13f40f03aba765b2dde8567fef1f1671e7d2e8d23a22ea3919a838d9c981a3e09d6d28adee3e25eb990df72000846bfdf9cd3dfe56ab9032cffc62bf9fc4dd035a9e81c217fa80fd5c8f714869888a0ea7cf3d70f004fa93ee10917f787a5381a46ff32e9f729ebc4b5a1ee1487299540851d0ce780b59fd85ea927b712ee15462055c44e1324c31f27d048883c5b4223d6ef5b4b1d8041d3051af32256755494285ed5f21d033c8b31b77dc29de600f60af4a9c7a4131b2858f5bfcd37f99a684320759cf3ce278eb29781ed4709c463e3da200a061fb38acbb904bbfe814ef68d8fc5faafd5a70fbefe003ea6511d5ab83d5f19e4e2b86fde41a8d8bbed646ea97049da06797e1156be64b0be1bf61ba6764474c2210cf9b6cae60b557ee47c68359029a324fa08cc51b5aeee21bc1202ff3c5874538463eb95c1c61829a2f6c607367070598e9b57fc74c43716544a6b1a3bff52a397ab18e0979213385f1f5ab24cae11836cf22090662c862decf45b0b717911267ce945aad2d1b5e3501710eafe9623220a425cea33b4b15c66ea9e64e3e37ae8ee4fa89912987bd2d6d6d23790487414482928dbf67e95356335160f7e080b7d532aee0607bf8ad8ec5aaacdde1959afd4d1cd5c31d7b21aebd35b0ff12eb87b6ffcb20e3f25e135c6cdfc02a9d7f73da576b8a6fafe2e14adfcd407e266419d11c055132da9e01d6a7d931825ebecd63178e79dd546b73de35c7b0492db81097ed619f372fcc55ba2adff7c1147e020ea8737341fba6897dc7e5775ea30f762c5a432217c703dc8318ce0d5b4e0ad347df6f6cbdecd47bed9c417ffe3cdc6707b287c9d7449ce4d26e0d19c98628312f60f1102d263f9860347e36013fc9ca28f2c3ff2a8185f78a959b54dea7d5bf029f7b447909d5aa3ebceaf7c699db03b7c26ca7521b8617e44fc755955c40c55b0b84b2f309f0c00791776ae8f785239210fe2e168d2fe8482b4bf801ff2e62128e957200879f92212f3b3348f95d682a1e159f4b1baab7575607079a9c2b796e4569903bd8e702c075a70f2cd7410a47a7cec70a50579d7fcc9b9f2d4897e3ff9760aa9ba48864a778a3a554e4172bc73e901941cc1d8870a4036064630a3e86ccf8eb0772c68bf538eb0007d3a537062ef289512dfebb3366abfae5c49b51a1e0a326607a2a1a626be29225920cf0c7d834b2779c43aa8f600725c231fc5cb925973a78a6a10149014443f66f41b69da9e4503ca8149cfd9704bbd155d54cff6f114daeaf9e31f4c7ab9d5fe0c18df415a7e73d501cdf6ea71a5574f5f9cd89d63775d03357c16b5a0159d07c90b13156c347ce59cbd80211df7475205b46e56d4654519b5c24bbf24de09c3201f02d17848c01887129581f26fd004af37e216fab133a2dcf719a8aac649605d05b9ab51162a979f79b40c70054e357cf0becfdef1ab2a8cd554155db1fc7dcdf2d8205552deb00815a73d8d7232880a7cb843e72665e0303cb7e198cfe22c2c7a9f3c9ca816187c8f65a38853b1e275b7b35b69650ec85bde681121ceab531712ef086626d9d678dba1158b1700dc8271e0d2cf6e50dfec62ba9a40033f1987f9fda8adffaeec5ab2a143b908329d5d0507cf615c24d84cc6b731f9d824aad90264dc344e43bd651da75d9592bc6edd4e04f1718b182e900cf5d3061d9efc0c8bcd0cf966ed56033e06589c063c34fb60786c62596e25bc69199787a22de3b45afc77b99cf2542cd7ddf79439699f3a895bc4ee35827d978f45b11d624853d1f80affcc37ecd60a3788711100ddbea4c473fc75a695c8a8c1252964a3abdbcfff61393f4fee8275342a91805520dc72ad610f3c2b8b213ced81e3e1909a7bcf092b5680d62bebcd9cb2710e0c70eb69655dab89bbfe1cea36ec682e9d3ead45979f8cb30c8bd11e1463e8f10897ce381b2e0bb10da92ee52996cd710b6191c26b3e52fe8064175574e68bfb24a2440656c57ba3a6bcb2fc4c39089a9c187a392c9fbff06d058e86da44c28c83a3547e5cee6b3e7bca590a758d5f83ed13e333ada20ed573510089f973610d4775d1fc42dee4003c2924fee2dc802f618e515fe76459dd0cfb9ff2f252b23bd76fbd85c99739f11484cf722d3a2052a923257b4a28dd82fd983149089967eb78d0059a1b17150d0afbee3625a7d0bbb997d625c458d75f3bae5b71f31b23dd633f548f632e93b4c2459b6ed076d5e7342e44b29d8c827c32f4c7172e80a9cdfdd64ba2df4b437705f053e1fd68f29f8d5933efa14d783140af9007dd29270ecf6cb13226958c41b29976880595e11f35ca278fe40e0fe6b81ac9885ff9e1f463d4c93ccf892a812bc7963a981ea93265a1a4356d192532b9a173b199c722d8e1fbc68c8b41b16bb81ae8a38ba76ddc882852e36ccac3768cf39fdf0e7fed4b8d77060cb6b3a377725aa1039e31a75c5eb1eee9ec3b533f630d494946b16fbd95b2331dc9365e772add874dbc55981d73d79df5013054a9a1533bef4ba10afa5a0b046838c86718a35d6f86a4fd5ac9bde3a45e24c7deec39ca84a8ed5639bfb08c41996ac3f2042f81b35b33ef6ddb7e6719c13abf52231e89f7d2013970d482fbe94a84cb6b30878be37459f7b8dc1fc892f8b56b93e01efb349b686506c10eed4e59c382ec6f565186bfd7b96b10867700185fac519824c4216fc105dc7e9fffd3051a41e5c3bbe2644d2395a7a1bcd21877f85535387817908bd9b1961085542189582c01a9fb9741a82a95f4ab651c3dbf22cdeb4f34f6830c04d9520a3ad752bd47d5a6890aea78dbe6f08a8a752420724568a53658b60c59c92b0d16e71db98a41801f4f80c6a1efa1336b22e772126180f6868b695cb46e7bbe7ae5f567ef705f71cc56d080e42c99107de5682156b22bebea25a8e66410a641139568118ec75ec499ed670728568b8ba59ebdaa2311f68d83c443efc679353198d022c49b9d80b2b9d65b43255cdcb06adec7cf72d55cdd88e7597b8a969ae0ca5731ed29420552ea6bdc7f0e408bef44108f88006f9bc905ab45f1ac73d55ee993a4024e199bb91465d0f27db604d611948d220e317a264abf61e6e3af9cc02b23172a964ba88a28d82b815d116284419a0929eb3a79837a63a8a57a7ab8980106d2deb5f4364e4726c9d583c7274626a08db19bbb4f66a2f84f094e0b955883f6dd6810f2721c65e21b94af2da51529ecfb8378ced485cc99c9f8d2d20f46a5b951b628e9f6a648a8f7966823842e8dd4bb2f0b41c664867a999b6233eceb6e61fce60b22808dc14fa3fc18aa81fdd89f9e57a3b69644b988910ce22303ac9379faf7fe2810940adb0927bdae35c6b454da8f0b7bbf2c04db7067148179fbbd8053f3997a9980a370a9746bc611cbd492e5fce6eb56cfdc34711a127f8294883f832e0fe8cf36f53df55125cd3305343a1b6df04b56a88688038ed4d8cbe2e679c1d0c42af5267751dc83ca2ba97fca0bcd2557d2d8ad151471be990bc30c9b987af0c8ea35256404c945d21444c41d03877a90e9e95e7672c829d56d9e3c05219c4d27c615fcc91fdc726fc51cce18b43b89caa34ace2c296c9603840a0114e6ba8816787b5c96f2393a5bcdd7dfb578ef43ac6f1302c25a7723e1f9b91a3d5e2f3c70c769e28171974126072f2c3376ec02570bbdbe6ebf229213de0f6854f98db171c71e92f048c45a095529f1dc35f956cb30fd8cf491fc44604ead7b0a3bacc241ef661367cfe59a64e036f644b27fae764888f4415467a00ee54e1db7e823c9035fe43f0f4196dc2afee341d891885ac2e5e34cfc1a372f6c26b9e8279aca353f06648660863d48a625b7ed8b4d34cf3c97b33b5e32ca2362140705dac8b20e61eb20bdcb135709ce9d8c88be7740af653a9d0a4355bb4902e75189fe1b4d1ab89f17a6ad4493a7b5b39e1874c5dfdd1d99e386a2dea47ebbff72c888cca6169c656b805c54e5c4584eb5aff5aed4d526726ac8fd22bfc561f2901280137a103e6be646f3d9cc500986d07adb0fae30c99f5e25a72b9f0951e1728bd2955641e2d73347620591291b390d0acfc8be4e3e1e99c46e0d78c68a50767388cf59f802dc871427ec8f6552afd66adf7e6944782790e1bd9b61c082d34df2396a17e6a1b77bb616c1c3bbfd29804e43e95e5d92ffecff6b87baabc0f4f33c69cd7dd8398840bc4fcaa2bc4afce8420df638a87384d7a70b3d020c8f116b462954fb9c1ec1a1d4fb2123bb314d9e32054a0820351fb1fc9b6c328e0bedd88791d225f569ce2d6b60b4cf56d8e70788871174ada531df08d609a81b8a4d759b53410c57d662ff0e40466f45546bb8680994959068d76c00f34c1ee5407dd6c1a18c0c482facf2e3a240c54fdf4feb86a36fc6467011cd5c5322c3128571eee46ef520b7ef31c861b4965b27310c28883afb0f8d0b2f7d052b0985ce2a0436c33c0eb3b8e9dcd3d2f7e99554e3ce87bef5544034b6a9c280d4a245df9681bf39619b5ed3441eb1561f9f1518ae46c4d93bc007d4e7509cc2b1790c3e166ee14ce08e61040b00880f3b5cfb8206829acfa3fabddbbfd708afe1ca8bcf2bd1a48234189867717dc727ac077d33901292e12d772b357803960398fc257811993b5684e5eb1a855c06b6adf3d91d39f037ca8be6f4df53b754e7f1e73ed5ba8b5e0bdbb62046b4137733792385f7ac00eb3eb11527e4332660c1ea4e5456d2789888fdd8c1d90547cc2c5c613356bf0007403198080c4a959235a7987befdb61fc1e13e08ab03f0f82487f79a08721d3d5e1771d54b99d8fd816f6bd4ae7a9876db51dbdf0791353e5ef933dafad3225012249b22861b9a92f1cafdf9d5cef165c37750cb715c2f2131abbbdbdd8b3c39529a59ab835f3f8fd086cc9ec6dfea71668a7f4db4d27debb5b218982d2ff7b07f4e98451881d459497ed3371e30afb13d9e643e37e8fc092ac8a00e3a1fd70c129fdd3bd773e66a07e07d653637308ad5153620847e9cecb1108da434dd4093e4423ab1647b1626dd9657f826e570ac13da48261e4eee61f21f98e5e3640d390374498e71fcfd0779200c2ec83424672e7904f3076468e798fe476f34a062bf9f3235995d8d4c9fac9b0637b5bcc4dda76272355705f25f42a4d19983135b183bda371558c488391d124a4fdbdea1ddb333d4cbe648cc4b6dbed1d7d4be376899c972da656c392f8302c54ef6c1d4b72036151c2c9612074b8d1bf145270b2d36fe8c33c76a862eeae0ac05c69b979ed96ddf45bdb83d41df5d8adbcbe12c6697e1687f7d7e163b2a4c5f75b25016ea4674d06b18bdbe42ca0ffdc14ccb79309452f07156329d4fe6de007a37fca165420b4d34c3e81014d590e994dceaf97a0d4b425eebb62061a89026c931466d05e13916f1942bc3be294cfe28ea3c964effe0aba3185510af14137fbba2f34052e558697717f2c1d19f575953e9f0c64b2aa412a51b2dc20c656c7d4ed30898a84eba819e38fdef6d251fd58d8f3e1c532913246d16753842245b84622957e8c29f2f11523253f27a42c78dbc90123e574fb850ab60bd66c145091c82c05db032712350bc6bd53d659dc2aa790a451ff5e923d435611b171094db1fb2c08b691f250e7d798b123284809541eda5f04275e8be87b081d3d08e0d28cde97971679f4f6ae2bfa308abfca17c5159ca509c07627e634886dc74507aec46c2fc176fd660fb1ddaad22a25d2abd67d0ac9e1c936c421ff33e476524d501f4bb9b63ad5b77078bb7022e3ff3aaa0e4513adcebe4b60641d6d9ca717a5c48ef695caca387a44a1b106dc334b39492f8d3477be09de635283d43c6290410661efba51cc07a4baab549dc535a2bf681d57695ff8c12dbd25f37ae22026ba2220b64486b3bfac019c63ca08cd9ef597787600d76234f987a52ade3a7cfcdf821f0c2779531b5bba2adc389d6eebfa558b4940193603b564118740685c5c317bcfb2664c96bf7fe3e23faf1919c4a15309533a446d06282bf284ec202f277fcac522f8908a968a46b4eba699fe512525f7f4c16b7a2219eacd2617914e3c18461cad3418447f3dd86e11d3815aadc6aaf617a8a645d1e2e61c8708b7d336424ffac4c507f49d33f7987471e2f49cab03b2624f365c619030b50f668cda183f85b9ec18605ab5a6917a6e202f3af27f7b2f51a82f3734f19112508c739ffb41fb04223ae40078d4f35489912c8140a42d3bcecd20b12915de9db44f55ec7e9712b7c3e8c9a199030e656d333208c49628b9deb06ef69741bece34de6b2212dbe8a341d1ca4fa2ea36436ffacb0fd69d50f00124fb621f567320e61b4821dd0f106f90230ef398fc464852487a7866d901a0b9b83a34c2012fd66145f7a56c211a047804de98bae421f70d520d7bb1b7d28b80f9cdf9dcda47e0a3663326e28be6bb4708beafce30247257bd9b4f52bb1e38e48ecabe1742304807dedf7e75383d9515936aebf95aaa790a5d5cb7738e0597db163a0a127b68bcf8a583206dcfc24eadca9333785325fd80b3bdba4f2b5a9de7d94c64235f56562c8b22cb9c63a6c1a7ed838cb3b10931d54fbc52e7fcd0f111e76b5f808cafcf9be0d14d05a406414b78963a587861eafa8ae5f18fb807908763eb102c27074de576d27f49dcf2101826497c9f224d891a6cf61e1ab229d405b716826d7d70c2116910b3e3fb61ecd49b53ed50badd497a576e0dd413b8b3243867ce96f357a635467c97198b27bce95d6eb682d4958784d81c85a505efe9041cf76d883c889f1884708f752eab4940cfd2724604fb412ce827c066d987ffa09570777a636bbb676649b22c617d14acee2ed11178198027bad725654ce1977e35f6d6f5de16de7a5e7142f48ec2e42358e5690eb7bdbbaa0c43f13dc017ffe4f160fcbdd3f52f19d5085f96c77a2ad029332ceefe6a6f6fdb070ae8a44f768a9f5bf655e14972c3bfc5c6006a2790c3652c7db3a8db4c243e699e32c9a13119d6cb32abca342471b78e64f1144efc95e29ecbae2e662b756abe80d3afd403922d173ef65a8a1918f5d2261d03d3948e1c0b40c37a9943d164f762a77a5729ab32325ed391dc06d81e8d0f81452f5b5a0f340eb8e9653f8f13d6882fce413e555542036a0394e4bd6d5730dbcaeb71138dee478bc7fb35ee8eacff19b0daf9ec5a3543c02dbc9b4ad01017bec868605d01bdad02399824bb006b411fb0833a249011f593ce703a8f5084bbc44852660782c449bce3ec035c915c51d74534a57fb620cef9b41b0d2ff067f884d8105e4f66b03cb4a5bc75eb62760de23b7b85e62cdd2ded76e7afbb4cd24f9c9923ccd5bd7186d9e3d093025a4b617c1cf5ffaf0a520f97a5e6bbfaa8103906014c1c41f316ee775315a135886b81796c3da88ed0fbc36dc2af5b795d5faf2e2c72eb5943e3efb979ac75c22dd35ef27541cc88acf8f8a8719c7800868268e38c7d7614e3ff69be63f08f452792d8a91569a0593aa42e96d7397d56d0f340da2546d57ab98e1823737ff1f423e3f2ce1906cd53f2ca040d222f7b481becef1009d711f5b945e7f0a480af794794cfde776384ec6ec0ba6a0486bf851155e07cb64e2cfe3b70946bc51c2e5eeb90ea4faca5f56dede0e8359c44501525ebecedde9fb30f731ad9a4da0f7599aa4f4f552179d60fd54bfcd6d8ef6a5b2dd4b5102d95d22b788fe2ccd20bc22a491c6dd1785ba97d1d71821540d8f6e7b4dd12759ad53465a3c1e07176f2392d303974399b412aa606e8c33de64a9574062d4ff107c091d114bab354b10c61959b6a3b2a1d4f9a4bd1e817e7c25b826608dde8edfa84a4d0a9341045a1f2f8da63953e1917fc46f9017ea859cfdf0cf91c4c2ac78457f562a8b2a5eb3759dac86e5388ef34c2b38ebccaf58b87c11b7b1de2940b173092fbc45c0b36bdd43691c37dc54b586e823fd051fb32d3d7dc0a49f1a573840a1c4f8b84d85cb898a3eaa6c897583972f14047c37feba320f9885060649d647c31311e06063e41ed05a8ccef4be1124cef052912f04859d3d68ca049d9a1578d95fb1ad827837e065d00195b30d893019afe712d82802cd9b6807594494beaeb7dd159b5bfe51e771d4c77b2c3c2c7bedb07adce4c10f6ff6f92ef34e4e38bfbf9015c58cad13906a7e68ca980e54bb53e15bb794c47640482010ee2e895064bb9a5cf55d37ef07daa4e52e15bcb58c81aa627cf32041071fdb4aa92761758c764792bb45aeed71f9b987277d6d22d5efcaf848b56848c2fa1fcd3b217af6ea96d6a2df85605d4db244e03e7d9b97e5e193fe820227e7ebf74761c140e2eb9443016f9ed30ef7bff171dc483cc9098cf8b80d4d1f28c674d37106d9b026e3d2ad071e38e3c35583b11c702297bab7f2886cbc2abbafcc68516018098ef5712d910ff5fd7ab6b7ed1d393d11a363b13788497ad55bb356435b4b32baec333c528afbaff53bd46d06389c94194b591e2f021da4661ae04bd29372ac5b53f9d6cccfe976c3d1a3728864053f2d416757a58290ce5df3598107fbc63b7c012693cb20495ed15e04be19d02805bb923b454fef1da92b608f7091144ddf5b4b45c98e989cdc5c6cd0a8a78abdf072c855a83f2af3a5e96c6f6408f34f31ed1a122c5fd53ce22bf1ae796d1ff862fb3f08014316b0124837081b5d52ab8e08169cfa162c94b9de4d8466e742b004d9af86cd39217400c0305a4458d3bac9312ecf4ff7a970cc424ea4571fd9a5a95300fcd9edd514bbaf330e606329d4703606d4979af907ab0be367c6b06df2659ce7bef9498cc903d55195267a249f1973b29a566db5407b736f3517f0991a4686bb15098a58f985f28bdc495ae789033faf6f45d4b6ea8f35b1939e1c77c987703d78825692c48b1436483c9250de874077c814241f7b3e1596c1e093b16785be2749cfb198bacd4f35ff4351cb78bf2e979882bc2423f08354089bd569230ef7d1c7e15cb9d98dcb17e252b002a2b4d7fbf83d10b0d78cf251f2750c2e6aa0a407decd2131c120146c89ea611cfb2936c65831a8af0e8e747b7490bdfd6dcefd6f99075063a358cecb4a9dfa40be0b4c735755d3bd92b99c59e8eda81d1d3d679f06619cff5bd0fc9cb91b70d1ede6c37cdeb12426005abed9f5d50d10591e9ee66734606710039e6c1f74bb6f1f9f554fc9b44e89b12cc9741f9968e2a57e47b546b8dd72c361eaab5d0a12213b3227fd99fb539dcc1b1788a057af296bcce535cb0222db9fdde007c2ad661f08410777e9f25c4faef5b7a08cfc56b44e75198c11932ffb4cded2d718b589ad3de1b5b087c5d96af9450ae5c6fd3796cd263108c4ed62865980838c949a4d4a0dd61eb9ae37dd473ba2b24919f99dc07f18a65c47b9dc86c2f93f0b6afd713f4eda602c873d0237eeb1dbedb0d2253eb4f8a8a840828fda057c100b1971e8f1e351025a11e336944c31e9be9c57e6cdbfefd3d50409aca7f6aff96c4a30b2d778dbb7079834bbc017c6bd2e8674c2d7eea3bd286185e0f4445adbfd7caf11f7c34440736bea8a39dc8f138d286319e487834364b8fd1405d3a8f67e3e5623d902ab144dde9573da7449564fa2222d6ee573f9fc4a1b44825f36c398872ea7459fd1d0ffcc567c9cd24701f7fc665e6eaec4689d33394991daadedcabceb6a6b212eb8588abfef008038f8d1331b404feefcdf848109f9ed5869e181bd47985a5a5f1a1cf0079fcb21ae8cee38e844e8abcd6f689c6349fc99b77bd04ba63cc648d678dfdb4ed0f47dff51921fcf4ed719e5e5bb5ef00bd1df0db696d0d4b6c80c697414d642fa1ac54cdebf2772c3db945b90c559ecea58bc9d5e8bc37dab1569d8211f2e4ca719d1648cf315edaed2aad7ce0c1f6bc07f43f467461736b79c7c2c0b3606c2ba9e514255a7e799a421e2bbdac849185946c6ab11e7d7292bde818d0025f87607d72f9775a2b774ce5c130d0e6b609a1b2baf2ce567700f3ca86199d85d3c6325989a271e4c774354d6c0ac3a2ba3184f28451ca923d20021e7e08889fa6e0450853dd9184877c59905c5d98f780f0db54974f15da2b3b2575840df50e3ce6405f506e7586023673c9989d8e5417db3e675015fdef24a4595164ba4705819c3da45bb3d6e5998820e8a4ee696b1d593c7e9c1461943f2a73682edc92fe22a0439a7d288c1240607c4932cecc60253e527a8f27dc4439c7536ce4e01daef79a630c6a1f3055ee9462a929d2090dfe718e8f4b6a47b7a963da4b8d6c1781dfbd25c14f9730a69d488628c7bde608a6169b7add65a900c7efaa8d4b0c886d3eed624c175a18b677ec07bd24ac897b5e80f9fd8baf5fe366bc9053d7c05b247bddc0b5862d3ecfafbacec15937873fb59658612a6ca68c0928f267633022bf6d64d8ca201bf3861b42121f141c07ce9295af18d6c4acb61e83e8cbf223fecb9564ce7f26e23fda4bb0b8eeb111ca01b7bb05309a04b9b49baddf98fb1d61b34759355b99a592708a32bc77e0936f3c762d07722cd8e21a2bdcef910a97f1704538b629a21e233c744aa7b6f2cd69658dc284a22cb18ff754204690ff95f91bec496b037bafe530daa2dbaddbe6f22325207a1c1705f0f87b26d5efbb1e5411100361d4dcd18fb561b9c4fe0d8f9873c5decb256d244dda0cab8c2cf8ffd5745d4ef95c82eecee3c1197fc29f8b156ce774717248e61917391a1433c62727025eda47240b4dc6096da296b8ddb50b3b603245b8a3383b35cff39863f50bb8c35502a7471fcfdd67a13ed5447fca0f1cf2aff8bc7abeb483a3e4dd223934ed9e540f3c35a5e4d33fbf6a5e1da57d40fffc998865b01f122ea11032aaa4a1da813a954d88e493be8caff12fd5c0161d631816859b3f9ed58233f7bfb64321e16bf71acf2baee3128fa0158aebb47876d40de9f9b1310636fbc4fb6ceed8ce1b0cd0cc84c6ff44f4896dd7f371846d75b1cdaa907f6f9867d4c25e0d1c7976b9424e2e00cb30854161f535bfbe51457cba225f7347f96a3abd0cc3df13330b5768c12edaf644da77d2545ded380d804b5197fb671ca6d87c4f89d87542ce43e77741c02e80f34cbb6722fd834fc2f1ec8dbb0b55b55e1359bd4fac6ef5d0860d005093532f5656d854cefcd403a304d1dd54027e1c385b190771d5a4b7fc95ba5b7b7cada1778297e37f509f8d4d5d2cbee653145baf30cadac76b797daac393d6d7a555cee3528bccb139c7f6280b9607673d92c630533bc2d68f3b6a1d172bc92792679a2918454b29aa339779fd22d6e8a453e6614762dfc778d2c80bf53e866d9044ceb1d99884314434ab2912ffba27768190f965d6ce4792fd5272dbf2fe36a7e69af5dc37f80e4ee90cfb292632b5e7b6c3f8cdbb1ac73407792cb32918891ed960764ab703bac2c15203e4e55fe56099d28fe1e1cffc5f08f711cf40a0eed310d8094bb2197ed3703bba4fafb3ef31865af4bd6e4e7004ee6c5cca0966fbe1305e2dc058c3bf1ca448e85419c3406596d0a302d0e43c4e941a2e0a890517f08fc4af4a00e8e6d817f20f587a23e8ab58d5c196d1a47d52f3a07377ba0829815c812cbaf6061605a07c0179d4dbbf3b354410a57a71b140364d512890c236f455578dd475689da90f0f1e4220e0f2c1067d875faba163926feafac25655943db84154ec873e75f49c236f728500a08b98508315ac2a7d147ce48aaf8bba39a36749f74dfdfb007b9a03808eef6d1297a92f60442b33d0bc09ee1bf8e0de21bdd30f7c57513cdeeb860dcf91655c4aa8dd8ca9d7a740e9eab9f17022d744e30e15fc64cd0faeefd640ee73cb48606f0cee96d0abd5860b01a9a663b3f7c58f2105e018fa810ce13e5bc6c2f4810f64e244d98955f8a32700738f3844eb214674e26949490dd23ac76a52458139a0afc4c1bf01d58949cb54efcd4c538e2e71454f5c42a5304520afd0ab9abff2342e0516b6eed20cdb63fb9d9e1a160cb6cd4d50e2e7002a36f2d30375a85fbfef049ec53a2b352010b4eca3436ef9ca412ca2f1f91e1907b3747dd6a772fe2e05920266c8dcfd97fee7cb05d0c81b8588ca21f0ce5a4d0376079803137ff2205cb671b3a244d2ab6adfccb581176b353ffbe4fc65819531a98e6e21e468d888a6e939330528ac16f0c222117d2399b872eb31eef73adb80993edaa71c3fdd1864cece2fe319399996bd87be93cc4dca5cc9154ca2bc14e025fd4c07245e8673576cf8fc4db21569ac9c8af08289b65eb61fc6bcd60c1c693cdfb42c98258837fd9f2ebac1c6d2fdc02332a57ce861258ea0a7cb858085cfdebbbf1ed174375aee6032c36c91bf093a4eae3069bd9906a7c9ea875d19061b5395f1494f5ea53124a239605bd61107a2a97492558c19e87ffcdb67aeba5143094f71312464b9a9718a2cb39929f4206b577fbaf212f14fe68cd98e6b769ec6683e65ba9bb8341ca0b4b6ef568e8d9665c57d55f3ade40713cd9cad753a2381b2858fae5433afda839c0b8cf173383c21f01faf2aa11d92df3013a0eec8346c3444ed03e5c1e39af60b1ff02c45315d39c8bd7cf9f47b27f1c3f3cfb65c62afdc920d05cfac325b7e9dffdb983eea9d05734aff7a6b222cae25ce17025eaf9c22108663d4ef5709aea931c7d957f15d93c95cfbd7442e3bf9a57b38eac61d42ca96f2740d375cf444000088ee1a62b44f610f128a854ef632a20b197b85340f02e8ee24005f8a415ba6148974faf89d29e9526ddef6c149d406241dc34f878eb9727415cf28d24c3f793771477dbc0d6d6bcda0d660b810e7a7be1ac3a822bc28684982de644e39a8716b5304b2a451f27ed588b9c7b45d050d3c8dbdebe47cf7d461d68921a7ee9639dbe34c4a6ebf6bd5b083a63954ff5b42c1f719ae7d955c36fc5439cdfdc969aaaa383cd9ad215918b902568503cb9f9f70eedda13a07d67edf3ff8330fd347427c96c7b339273428bb1813689d3b56908cc899f04632724155bd9acd67140b699ea176759c794b2273a161e6a91d7e2b00ff28d21221c863fa9c8ae3097af7f4f80d368cfe3d1ed2865a3cdfa64f754757cedc4337a73f14244227848c7f23d9efe489adeabd90654966a0719819326591fd9d7c3ea3cc295557684a9428e38a02a3caf9318aeb52cb674dcf9e8fcb7a12e685de2b481a8396bb68c2377fe9e0168d0915793b2a86403ad84f1ef7e300a24b3f8fa3ab3ffa3f1f64c49f1ed8cd03d9a072257057dfb5e8472541ad19243e70297bbc12ff821a4abb656c7104f58ef6e3da00003b204981eadb742ae84b43c722ddfdebdc1e8ad67cbda8edf2b798d7fe9584ba11c69b11fb0b48b097bb82bd96b4b494ba5c0b6ff936d074e4ae8bd7c5626c5a42505ff0a16c268aa0bdc51d3c04501b133375663f723cacb576aa86f595718c9a7b7cd1785f999f80bcdc290f8746f289542ed562181b621893e4902a69680c39bf571b7551102a447d64fdbce8a8421b4838a52f0d029b667d571af9487f92df40f88e18a5f53caf3cb1be50d328dc90143d809cfe611a8b40b15e3ee540aad1dcbec1d1ae4e419f5d7b0729eedc6ba78744b00e775c7aa6e9356d6fbcc94caf200aa75699e0323eb6db319508043bc99608f3a0a40c298a6312c2b19518c2ffa2bcdea381dc5be7d7e3e33175e036ea0e43679f8052f57783406442c5d5689a0f2c5bfa77dc052292aa3c77d976a42be91b59ef98e1f543a0aa5327702d733dc00510ecfbd03cb0afb2abe0935dce64e998c19676ab5b98bf35f9c41785e789f716a24e1766aa6347bf0adcf2045e2fa2df5e9cab372b8b5795fb1a3563e63c87eb4d2cfb62525455d0fa0003aab5fc957ba60356b4414005a5c5906790b5a2baec5c75b1eaa00b22683ad0c9f7cb4ff8265ec9791701fae5846b7836e5f95673123f283959d54406f67edb823dbf323d15c067557605acf3504c415d6e0a305cb794d3991fa1ed9fb1aa12252caebc5ceae459e5eae06703c81471e238920a08f2d831a1a10456a75886e54313fc707b0b6766c76bf5fad97517934a60b57188da5ad83b1b128dbcc3a8d5957b93efda423ace968d2f120b9e951475eb079f7aec4e43acfcc467ea213e40fffd5fe495b78b46848f1560a865f926f07e046d87757c6a99bfc00823dd4eed5c65fad53c5121c0152a0334573ff3e395057b91da1ea3a88e5458646de73617c6cd01b6efb90d628dfc221f63ded83e1a207b53c58e66451e3d5741084cd936263a943e188ec81f1b94b8f5fe4a99b4ec27a729caab3ba7e5cfc13e56654f32629b31331a11a4b684e805386b9647fc75d1ab99f83c75ba4f11ef51437c164e0db5b1da51d47f61f9e02d04cc1cc1c9fb268f72af5afd1bb43160edde5b12d038eb548af94af5e64bf3bb0e77914edafac68d5a6a1e4df88899abdbbae9e3a71f339da856a0beeff461022b568fcb6d4c7962a3216b63a3ca21ef99200d950359d420f3f0b353bbbd5a25021405f9713652c0bea80f94ffa89a8c7f5a1ae8eb268a1fd4e3c3c27d4aca084f7303f426482c526bb3b0b85b626bea42f3cb80e01ff0441337c11e1265e3d7faa6ee1bc2e2aa029fb875dd6cb61df2ec78e2586321c36f0d0a9987a7be92b006ee0ffb3c88ecc8c817f2ea00490be71478e8c87a8aa3761d611be4c31dffd712de371ecad898624aceac6ed48152fc8c06d244c6c6d1722b34d47c7aeb015f4f587331ecb781067efaca2ccdb1509b448d88f6ace6052b3c87c73fcefc509c40672ca36d986b85813a2765406ad6eb26456a706bd48761a3bbc8ad8da49a4cfe557d5494cd0a8a061b7611e97b49151b8be7f213f479172f879d870ded38ccad5c7dfa84b568c779c3f86efb9b67b1dcf4fdd3fe00e1c76d548b96ec4ad74a1f73db754c0826f305f4d6e04b361eb33891cb83f3af209d50673ad6993a3f8013815f1092138f5e530fa4ea83c99559592a1c29d4eae04fc84a1a12e8674cdac94fa0f58c9ce452c059027a859cc8a10a7222ef95aa6062f14956b85ea803313b29d51ff29bb10458b213793fc8d44aee406774875b0a8a56b9c21ede8a2477236b2cf87a99658483f5b68af000b3710af56e9116bf9154b2a3db25f0e55b7e9e8100145dd8df8c44829a3daa168b3dfbd17833423e4e137df2d4d1ef475ee9d0de0b2a2e956cd891dc5212a40100049f7e174dbcef0e3911576ed9bdd808a07b450faa8d33fb4f1df1b9e29b6439fe5470c26a7f8620c543b0fe3d6f4cc23745483ae5bc6d50d9a7671b0af3400250f3de22d145c70147c5ec2fbb5a499967aa0a8d4f5fe101121fb2195d8d301b0fdef722336a87d799451e29491ee6a5cb0d88887df7f61929c0ea288ab95b958e5dd17a7d1ae02afce22bf72aca85102dc553275e370baadd1b13c74fbbb63526a7ddd9a198389f3ad2558babf93fe5d3ae9f11d5750cd3a576663ffea287801d215ce637c0fe96b53dc7de1e538324fc06599d7cff1847dfafe5ba12d1c262f64bba6fc056149f64984fe16af154eb5d703c120bfdcbbd0fc8ee9d3138a35b248850ed5cf45a2789a764e731043daed412b54c7e807fbc0f92c28770bfb5f7a1da8a61ee38eef97286756683068e08aadd3a1291d6f5f1ad7be42e2f6fe61ab93256e7ed4beac512663749f3fcb9ad68a27d65c83a028f2dc3338ff78d616ac6423d265b99a13f0e29cb31b56a809e51756a69aec8bbc4cb4da77843820521ccb7c68e3868985d31f4e4a010331d1323fe02b043f44bdd7fd5620221ab7e268778e389edff54edf0e2ffdfb9e8c4a9fbc9e1cc330c676fb786f1e06b4acd4a26f53d75e0f63411382feaa689768b65f96400ab8f97e585300456999f920132c9166e0910d8c1ac76def90f99e00590077cacef6943efbdf2110e91dc0cfc9a1a0dcc62a3edc6f50ea81c2c6dbfbc8d249501934da25be6832a68858235d5b944a955c2958d4ec8eb91e85a66bc4fc24c8fd0b6e1b867564dfb7f78951afb67c4e63979482e7e95ecf77c4c7c79528891e0e44e8afb56d035874d7de6a03dfc9261c0c3f65a16c8c9725331e9d7bc59d1ad262f62edf91d80f894f9e7b82fa7be596d3ca0d6f1e32b870aec9f0dfb29519f5395154984cd9978b7ff9aed9bbfd6e948d3f6143ffb0df946f6872da0ac295545f3ff89505bc5d3981f374d907dfce9af2ec75fc3ff30835f81c61a2c31900db958a0e760d5183f2cd48cf184b37f0018074ca450a5c9004a5bf7162c291a4a8f11e5d4e514fcb9e13d7e689fc67dff6c6d17010034cc38bed7351720b84db887b60298cd3806f3e11323267d355dc4d1cedbcc653ebe258bd9342199265400d83829e7027cbbd5f656acde7af0f32d4ce895c2f6a5de125e7a6b69f43fd8c64c25fa3fa7adcfb5c4144a35dbe30616b95502fc84282c6cce195a1d60b127325cf5ff286ca5867ad01cc691959a5148f054e83b3ba584d7ff09d054db677c230742079d918ff500488831fc600e6f1e7116a968c18f6c682cfead05ef8d8044808154e4980539642ac730bca10d8786fbb68c2f0947fd39a8a7d28de200b24e2124a83237c70de89a8fa0f924deb7d74ce36979aa8f5831a2758109e35a48ff6229b5f5083d652902823da89b1f5f10b803de8d7f81308368433e08cdd5bf5750e595300c3e813ba83d2821bbfa6b42f439ed1645bdd3fd7706e8d1f0b42e8aab55809e73899428e67d3c7085af74bb5e5d12fd49b6c440a3e7f692a744f532954b0a0466309822b806795667ca467fd9a71187eb654ca68edc09ffb3989120dc1a07634536b17f3c759a3d17f4f983a0bc5e0a6f61efd219ad962101b87e59016696901a4080265a226bfd011664c1cf461b1e7053cfbf16b93ef477c02f632fb77a6e307c6e0f3fb2a43aff477a921fcf18ffe6b8e7333e40370f090b41091ce039a03d9417bab386dbca163e790b425eb3aed09661e3e85c3c5c38e62d64340c6912d96da4cd58381c31e6635bd6895e340a5fcbbf701fc3ee419db6c1c1415c1a5a7b07276081a32e9f9448e7a191f117f4609b9a99584a16567cbca0c0e7b57e0dd49dc5e0de4a5d7ad983a371fa60dd740f7932fe3cfc9c37855c8713b2eb886b699c637f3e24ee0d77a4fff21fff310e88c3631a0e1f89672628d13cb480edf56398553a45970ca572b80e19cee124ec3c35c1d2401598dcd60b0a9ec7eaaef37c2a1c93b3dcf921030f6cd151268eb4988954751d84d9b90b3c234fc963095caa561abd03deef408025da31fa84e5e6c24216737bd4b58452443d549cb4cf412cc5a27d26f45df7d53f778a87b2573ac2e96714e77af90562e002882dfd0c34fbbc0cf742e19a64ea07edaaa4175aaeeeaa05fdfdb0e5dfe48a36b671639ba2eeb5c153b88d6361edee5330c7e1e63d7ea7b9cb5c159a87b0ee46ed3acde6444f883477953c8635ceade9b429ccfc3b74d6dd5aa8bdad99d9debf470c1c199658e43906648d68b352bccc6c9f25eb17d846e0b3247f2545b3172cd9a12698a03a116d96dfcb255c6cb9fe44ed7bbd471122b93521303779e0d753f395b4dbefb1b92965ed0d6d0a29995df78b2e857d9e10c140e992dd863483120351c485f2c533bf62d9999cf5671344bda6407534e71b348f19651d2c7634516a9a66f190de75b71d85fc9c5231bf7a90463ba0fdb0d81b46474030abd0f6bc0ca45be8b32d74371658ee89a0e6605e59a538f231a6d96ee9231cbd82925be2dccc90bfdce71bb3c5b9d21ff15fd93c36befa5b36f30141af985a20192e12f3415cc624422f3238a7d2317258adde0a6951736aa05e8a714c2da6de920893cdcc696d782bfe168ffeaff15437ad2e2b992c24fb4684fd97d72f88592b653ce0058005b4407f3a0aac02e7e11359e37912d4d9397c684780284f62fe1290b05578db4b503c289b5cb1f897504666d96855574a0880239827ce80044108a49f9d86b773786c6567f313afe91e17e1ad680785e624ca3397aea5ab28e57e352dbe85293004c73c92242bbd068d80dd088d41573d309aceafb7191febc82989feea142960b45678f8e3dc6a4e5d7b51a1ad4e4ad100ccbb22494c1fb7770de4aac56367254e3c3321ef329603e4dcbaaf12340e5b7ec53dffd6a3698ce93683402250aa7694b3ff7e4df23ef9d0a02fe1fcffb645ee87756a1da858382d5177003ef87db08e761b6bd2c9cf6d68a27a7bbe97ab5d38c93a7e325b7356e0adb34924d2f29100e8148d2dd838ffa34c04970ca9678dc428682877de576ec532857a4aded0f569ff54d51b7b22fa384751ee60473500d04fe2ca6d7485081ac3067d4601eeae7540036deb2880f3a8c0493f34a564915149d0e29effc036d25a22e8201663a366fc56784b8db3450ef91d98d0d0332ebc5f8ccb002208bd78ed577205c47d86ae56a58493c2c68d02e3b044b37376c1b71a03bbe5679d99bc5285c9c2c7ef00e2b60cbfdfc890e1ba027b5a6840ba4dcef237ac2ecb0abbf7246f96e1c8ece06cee3e42289816bb1c7889823d78f2d1a894d2993079b746de8806ea325176d627fdece7fcf9b5fd97e9e7b684539436a26728dcad2fa699d496c1a0a84b34991689308637ecea1e6b5d791502e176f7e694d41f12f0d8d63afba12b94c2b8d6e8817b6b24a2175a0d351df29b04c744040603b0d9d5cbc0b3261e70b51cba566fedc83e53ce6dce0852785ef66c6a72bd3680543b589b9b8504b200ff9db277562ae4fe15fd612b0b8aa2f017ccba02650b9d70c28c0a5aa18f0fc25074fe675d0debab4f9c9b666096fab3a53982269809a71c41638730a153cecf0b6f19b9be1e4d2eaccf57c59efebc8340d98b7bbe84e0924afb9fef76370ebaa0ae6a79ec535f4b29c99573f2f75833fb6aa15c940e40424254536995db333efbb360188ab052ed246673af03e3b30abe8a3fcb897e09c3d34aeca4d94ca194b414fc998e77a6aa078aedde373037f5d307bee5a91440c6a5aef427785f9fd1f93cf9b3e9d9ffa5c88976d39fd0c2c08fe426373eb35576f12ad83362a2226d442626b00e048fb98ac4c91f9bd5a6a3d7fba6b360c2f6867f09a93af9cacc5151c623c4eb20ec4d848b44fe5dfd5dc8a600e271337f3881bc3fccb5f82c1c3972e251f36215b060cf1c36cba7cf799881459380bcdd888ccd1ec3b5e04be75d5c62489896a99fb9f95b8d7163ef05b7204a83703ce013f31c53bc69ca09e0ea50569d39ad347f63a6d9b2bc0c2d964662a80a990f3d8f033819318382652d3a4c0b4ca6d368eb4836325b14b03843cd4669b4e904d8f1e27d2bf74c7bdd70d9fa594e7ee7cfa41a27786a0534f692f9729ecd533b9bf7b11ec8ba006f5d3401647aac093b176538b8450a748fde21898a0aaa8b7c017984347b9723ced0a1f3ae80bf07acbcd44e146a4b0b22d8b37688c317a48ada8f6cdded4fa513cbfbb9203ef7f7df5b495fa4a09487172c8ce144b8a353e55f7f7fdf3e39a7759d8219041ea04c963aa4096b49dce6d5d114e8dd1ab4a15820422935aab87bb0bd382eb27fe2c5e1cb68e44b0b21c6a0905d000885144094cde24c57e7c5419d902631648388d19572ca785c7c129d88266df26b1160d8de8bbd1b4cc3e7f55c4b054b4b51b0ac125e1051a571167a81c60bc857870d64dc7955c99f8ea0fc65291f3cac116dca2d5465cc28875153fa24b3fd5d38954a83458fd6448e87cdde2064b5ddb221f092874f8b5f4b84ae8d92d3c4f8bcde8a2a3c2734c346531fb20b5867a0ac3ce016420f510119fa4b43b12a944935962809c435f7a9eaf30f01cde63fd67bf195262009447c1fccd921373912cf94bbe4314275d12db20fa04b5657827230553c3a9c5b3773c3cf8f319e67ee2d0b7db8eaf37a5afa1e31c93a767dd834c6d499d5de93bbd923a2a0bb4c942f31a8e43f6695a5311249bc1e98e614b4e916bbed051e2b21ceaceb646f769b935d6c6720f2c6812771f52d20ce4c91d9bd4e7d556abfd55d4cca82cc4a9f6e2e5b6875c8aa7b8c351c3ffe427cff774687beef1d1045f1bf750605aceac009f3b4fbb7f41fa752c34e7e5f647011ca7243a5f61023499473d42161e4c12a1ca406ab236308c3d28eca72654e5cfb48ae9c249d686705134f9b7be0de536159a4a48b346dd36415db7b04c2422b86383286f2a40da9e5bbf4806d64a7c697662ba0f4d6fc4fa7d88205dbfdbd95aa3573a15dbacce42b7c62270ece20d09f6351d0657375675f2ef2d1bc1c861c887257b8a5a5a7b7e39e80383da44ef6efdfce9057efc87748047b0cb1fab27fc7d1242a39f42e457c4fdc5741ae88c02615595bb25bb5dce87236af20cd57c6a0fe80ffb0dc6b71c2027a548fff974bfaa534d49198a42c889d5a26b4a0989a08fbcdda4d8e9df4b1b777030bec20b2a8f0064335f41442de5d9c4ec5c3b2afbb637d914e0bbc6e4a3ac813e01a1428d1d6fc27f473d216b2da9030b7be76ab6f099a1081a2c14a2fd7de0aff87686c7526247c412cee9cbfad343a0a88d12321e0834c593ad32e86f4824686e3dd30355a28d3730eed077f5e727e61c6460952475bbaf9c2e2bd9aafbcaef55e56f9b3c5a31af82edfc4f2d32e56f36e2381243afba48a1df91378d85a873663d9abbcafa42a33270ccf6d1d8867fd4c916870d45bd0c492d7076c97d8049ecc284038828ff070a39ab99ed984c294c0f7ce0785a361676ded903752f82becff23b61de00b56bf970bbda54680f3254308b867c081ed9073ed1193262bd7c81a9c1455dfb24fb3a1309474fca01e18b2bff03839a1262a6cf800ecbcf918aeb56de96f292fd94a95062ed2a4335f8ae65b645d3125da0496dc9147865ac854abc6f1d478d68c7fab2f67bd6ac304ecd18121dc8cf171ba8d650ca31db805f58edcbcfadd2562dbbe1478736487a9630c1c083adcc102362a5d8bbed3e60748a7440083641b81c5f5bc0c758af83eff61d641427e4a848dae582f6df61ea6851094c35384353066615f9a1bfa2d342bd3ac64cf66ed68cd030fc67643b76da59953b794f18f86542878e06f9c028918251dff00f7d9b4f1eba55fb0be4071021ebddb609d3faac22cf6db30eb26d9fccff979c978d0884018984ddb100f21de346b49ff70c73d4e03da36e0e5e37ea2915acda54bdda2352502a0214c1cd99c52c70a6ba859ca9abba8a7d24fcb4b3173fdfc7f6b5112fe8800b12906f7d7391eee4fe644b752c33699fefc19f77864966d769adcae4e6ca9f7ace94e12f62be97b059c4240338ede8a0238f165a1936e80b35c7709b9abbe0b1ae372b6d0370bc594ab83b76c83e2abf79e976b01fc73e9c9854a5765e6c5a013387fb500e97b63c18ca3361ee1707215ed9c4611529530115217d5eb06c30594425fbfc89b7ad22eda68a37e8608704d50f95254bfab199f8dabe011be4f1b2518d16c4778b2ee318f1cadf7d2299b9062bba8f3630feb65f85bb46f29e61a139411d7a31916cf4b79d142aa3f7c67f860ba52f5e21e30ee432dee401a763efd4194cad83922e918f9ad13b51ba9f6a6171814c1129838f9562fed0251394a90a9b915a686d3234c1cf49e6966c7d5d6ce125b7357af0976b63dc8f346b2f03c5c108ca98d70287a5f0238ae87cbd6b3e1db1d14bcd9051155f2ec6c0aff15573c82646231ce5adba79e8c4e8b807046cef7e44dc4c7a6958ad1280fd88a8a77b73415edf2de9c6c058de79435d8cdc1b3516919cefac091d7316ab366b281338b0830ec62a9dd768cd380d3b3f42bee94a8dac8006bb5418b29dda6748f07657da054eee8044fdc483a72fd049999383de268e583524558b42e15105909d561f2de5ab8a0974cca59f2fd189d2320a7fa3f7323d8ab8f1b51a1387900484a680961e42febecae5cb847361d7675b8c7a32c363d90ce15cd07681dc88a0413652464a3542975cf5b5643e136554074e8a2aca6677e07eaf72972cf1bfc59b016e5276a03e43b9173575345ebcafb04ab2dd162a6f3f3d7a5feee0607c64b2a6cd9246e581ea0e1a60a608c5721225bc3e8da502417dadf3a07c64618a370dcb8c9cabffc771bc339a57b6c74979444f3e91ce3a45626571bfc4b5600dfd19ac04ea54e4b4f9c09713f87b40aad7f7bae9b5ed5bc3121997c63ebe6ee746d02f42edb6be92a4e700b70c02826babaccb25e9acc99193ef0402f8b3bb5ccb604556095a6f6a7b260bdf1ead4df3969021aa241e1fa4faf48439ecc87219c5b6deed6f9566cdc66ccbc433d67eda2a22f390886b466156447bcc223a8634aba7f25c28a22a27329ddbc6aa3c9369ca28a5c878bd7b658bd9f8b60b91a42d1ea443b415d3360d36c3364ff863fffa42ea6abee1bdefe3480437b707f2382b4969aee6bb2f84e96c6a6a830909a160e9d766efecda159a59ce4d5f892bce546dab1e1d91c86c9a222ee189362a4c910b0bc26760c0fb55095e4af451d968cdde7f3bc6c726620807d9bad46cf31dcec5913fca6d86b756370d072ff65ba9a62caead6cdf8e020747e6b0105ba07f1e8f685dd7b58c252f5eaf0423fcfe68f1ca3511c45283c44fdebade9204dda43b5688a9458563c24e9d52b1c109094a5abdbeb34475604b98044908d49d972578389e87951b7c692f2474c900cb3ff149ad508ea08e1aff57c1548919d22b74757d7c66c8e4ada328aca60cfbdb56b2abb252f373e9180e3759af9e74d1d4cff406ba2a4043bfd95023dad71f95285981b15cbff8671a166a6ec7e133d6cb1676cffdb4b44c03698f7f34ed13f04c5d09220e35a7bc3d35ee760f849b28f7198533e16a801b794555aa90c670a034ce9e5a35792804686df46b4d4903fca2fd22527f1f1c6176311077ab459f9c98936ecb1e0c1190ee2a6bd24549b64797f50138c55448f8e946b2e13200a0eb8a243a18e7189076d22ae98e2fc29572d9c91d24a4a2f3ab95884b4f3fc519d4fddf97657a042892700a13b2d80e16b69a1596ed05c36b0e35ece6387340a2421786298ae06d1c5d8db48bfae73fdb6c280f434ea5c8164d6f52f8dde4a07d954511412b10a958971fb4bf2af9a4fd3657982a6df990cfd6b1f6006c04f8ecdc8da4fc84237485d6ccb1fa42582b367611d62c1d45d3ae7f8a1440374065e588d6a7c9cf32d29f3d3909e111fa5aedde3601a5bfe7867c0bb88402dd238f30b96cf7c11e6e5bcf79da83152158064834e6d7255efe57b62af9c531551d8281905d0041287b5c08cd31d4f0c81c0380e1e6d0e901cc27e995321ebd6975285b536dc3b41a661a6ad68deed6487082a06b8dca879bf31b0eb378da8f6098a1cb455980f32655c2b1a16960d565a1f8bc96a74c79d9bba808ab533141f177078557b1c49e40d05dd176f6f5d8c6dfc76afa2e3443b7b6398bfd246a32f995ae7af16a8feda5b0b087b66ecbc535a347c67b436170274f90d5a9056bb5db5e981e9236f1bb7b48ff06929bc48217f33beb518e9bb0bd7c1284811e4679e0d1dbbac965c831c637b84f87403c9827c6b47a2abe07c9395342d1354038e3573af47552a3c051d31920370bf795d9ae582d4568f7a338709ada1eb7cc4850b429b4078c98dde522fda2ff13e57f1fdfba3b46bc0a1be538c80a0530b2fa99c438296ce4729a1706857f0cfe518655c60681c1764c3a0c0410d02a8d01c9408ea5b811579d34461279779f64debd9e5094d319bb9739a91ec1c2d3098e885db0bb67e505fac9a2ac92e0ff37079d601e2896cabd4e77e1588c062c4aecbe9dec967d01d763a1de6e5a4209d0ffccf542e53713ba0b298ff11be0caf712983e0453c90b4446a6dd3b43490ab22d129d7a5b3406c64b5ffafbd4f3b86ae899f5d34a806c4449cdbed6ef3a89cf3d3d9be8d77055bd4f07635fd5cb2b7cb024925963c1be5492f520f15bbbdc4ec72367b6c152de54e03d89ad83115426ef3a31c2379dce47f1c168d2522646e31d63bae07379b85edcc032329f1308d544ac11954a9360848a9af69ea3c38f230338dbaa728d52666385aeb499f74f468261ffcedd2d67851ba0a98c877eef4b5ce19c2e03768f24a851c48f05d6ae3a187a1d81032937dd1a438ea57f01293be5bd692cb94d4af7776ac950cf214f497b5583dcbafc7296c9f617f0dafde7ed23491b7dc1de7fe51918d0e6883a10520b99bba9544533adbe114e56db00156d647b40cf6d960dbb33049faf2ef79de1fdf3625a2f1a718c6eb9c80c9ce171f949e373eb76f145315e448fe4724612eb21a86f60a32127abb993ec93245cd5c920e27fcdb8e477dd7361c625de6c51fdc59a610f66a200068a253bba14f82417166bc6bd0fa573cac7992d357223cf37890a9039436682c4c29e797b476ff406a3e0c54f786e621c5354a650202d84caac425738da29d0806678e548417cc4fe74e55eb0f055ce7b6950477df1052339f8192d364565005e0fb84c1be42ca857e208f2ed8bef663803fdf2729f6079ed63d44a999ab0e2c559490a086e99eef912fc8e0d7745d13751b7d509c430cafe5a45165bd1f3d6b8d86d3ebdc48615bc6842d8b781db533d7d695bf9d3fdf66110930846eb61f7cce3355ae6a3328b51b145fdd8899535a239dfbc3a88139cde7ae2d454f40bf76898631a7a2390aea27d46f61f633abf301066c3f576b1d49421f1daaaa8a465460a368c76d08bb911046791c246daed9a4a16055368c714acc31c08e0d2e5665cb12e9c423639be487a218cf45462f041397f72a11e2e5ab58011e35be6e6f6d3572bc29c132995a985798440667d21a6ac939d771361769f8d3f812524990fd18524a7cf6e3eccc9edaa090a212a728260e01a422047216541c7aa467436d3ba5daf6deaf565af8d7a1033bef4412ab39f915b9e07359c0cc9ff5cd7df20ac236752c7b28524ab7038059839c79cfec063173c0b5fbe3b49da6e8bbbbddc6c2c1a6b5a716394874b03ada169d91030561b7ff89676637e05806e491adb5458122cb59f324c822cff3dab942e5c86abf95c0b2e2cd4ae4ce2b4595ac125db91ed61893002ef8984945604bffdcec3a6fb1458fefe8621aa1a7f3bcf21e4f678dfbe4f5b23f1c3c75094103f9b28fd8d60a10e16378c3f9093447583dba66b671d434c7ee404988a1355e183a683d76f2e529e4eae3fc0f8740bb00e81f304f6a4003af1bdc257248915d2b00164794f791f9ad613282c9e4f402b4cd67ef924e1b670e884215e4544f5e9a1a6c2df15406e65c4321c30eb61aa16e5d5324dd196fe6edb9f57e9daebbcd9860cf0946c33c5ae3f8beeb7637c94a9bd437161104034ac85efab3bd06e6ec5d6e46679b8449cae6ece35e5d7915164caad35aa7aa2dba80d0d8ada49dfa3af18f98115a176c9a7cc2c330f7d6027075e0feca19bb966a855be22a419db4d1029d42dc729cdd1683e56e4e892032e1ac3d0ce5f00226bec9b4a98bbc86dae868a361d8380f833affb72a9d8ec396f1ce20cb39f270a3f93c76d25ecb1fb04b822a61f4c4ed5019fb2d6ac5ee2d2961d7e0030d79d34b0edee3b2758a1d6b34ed32fd66713b74f7f7bd2b78c666e28532af6a9200508b1bd92ec3856b196696cefcaf174c7da18817bd5a138ba89b04cac10d6286fd3e33e89eb62a5a1e2fcc6d221917a08fc32b3ea3124dfdefcc8d4eefbf4db74abe79cdc1eb09d4c895ec2d41e251f3fb62b03d14e0b2dad01268aa07a76bc04d456ece0c07b6c9fc488b660a44634307ae1567fc0fdf5602a22b86025568b621c80c48b21e7ed209277c276cde4a914e1bfa9bbd6213a79619447ac29c4d6da73bc9c28f5039baba7c9ead184548a37801b726a2061e176f7e11ec7d7959067c3284b7b4be903ac99c895bf84ab34b8ae63844abf695805692a138cb9f52d002da742afa8513bdcbbdd8c405754392a017209ab1defec9b3a40914f960f5a614ecfb4aeeab40493173a9f282ecde48a55a0c6e68605246bef8b74e2b11551ae4610960c74000012cbcf286924f63281710ccc568be606e7c2cbede1386c20908bc73f54ed3e801be88357fff63fda8a3bba72e2c8d961562523fcf6b4fe7dff21765e9ac38a7e57f2ecd1f5d5efd4a9a48b5092eeae9d4ca93709e52a4d6906615dd6c54efae9c246e4c66968ec392af92836e5c79204dce6a03d4f38dd8b64032c2e7b18c12fed774e790f5ed7dd0cfff0493000ddaf3ea152bafc7d722f8e36dc2fc52cc675006da6a8e0b981a04770500a94ac8a497ee64ab442a6ad14e6db0090a148e3bdb90fa743e72078270f244a0290132b72f7260241a34f934f5213fc778d1fc3a71aa3059afba2e1dd9ae54837287cf859a9ffa38844e2ab58a40ac984be17798506151777dd89910207b49d742a81ae703efb7ec4c6271bae3c3e22b9f0110df80da1991d15f989bcede6dd427d42671c7a879ffc8bc8a7bad104a7051381573d9fbf4eac38397263430d95c7f41c7fbd4c0e7daa65a58726f320749801d85fdbefd0f6cc78a5c9d9bc3bc63694c0676fa8148281e70ed330d02d75d234adefebf8816109412f3aac651f4fe3309219a5369f0afa259d53a859dc18cd7b438f601f50c682f274a639ca99bbe536b4abf3cc6bbab22e9f535d071bc0bd249107b9d7b5d560fdb5d42b6cfa59fac40a583d590db2bdfa748ab5f61664f5cc50702ef07d81424a40d813b1e47766ecba08e92f8f4042cf344f9416a332c33a273cbabb767214de0026fcaf36e940be84672f50199aad3e4708483b0dab41d56e7133836224d0ad1c395ffa6861811e5ab31d3cd04657368c0a8afd9e7de8e6ad9a0afa587984153c506ae864f39c6c28dad0496f574427e8e95c52b43f41d3c49da86e5ad7a91ecc580d95ceadb867d68b9ad6cb2c2498c44bbcbd8b45357a9481dcf318093e75750980f3635f59c8e1e0a072de25e79b228af8450ac0748b0577cc799808674ee8be560d54007223880bed9c3ebd88b4763fbe81a323435662b307e36da45cd27dbb682a162a73356f52deee6f82ca6ed9fc047c58f51447283e2a7f79112168fa0928846149e20ccb59a6571ffbe240c31df117dd45e930bc2910b2623bff79ab2e871224a217728629d3445fb6db92e0c019c99d9c6592053955444430c65a0668ff4ed2293487350eee19dbc54fe9a9d5cbe7e94ef65d3ec1ec2734ecf8123ec8d9f6d52a94fea0f1b8344b91384da17780133f6617597cd0e2eeed1cc7fd189e0ec0bbb1e828f8a533b8fb7d534cce8064bf8cab8ba966a2392271087f1c6c1d0494c40f594bbaa6da5006ce2cd825e5393c54cf52b3db8b7c98fcdeeeab4f15fc7fc827b43aa1cad287c20c292f65a0e1a77b3ed1175a68f1407154e6e5ed4cb3aaf815d89b53bcc5d79a18afe07c830146a1dccc1ac0dbfa767c360fa92d9739e21b607c92c60a0a2f726c74f0748b4d7e25c75cb1e4a74444430efc156821c1e56123a9c6709e6b4a2ee7b85daae9e60afa0d13a619500907f18a23868ed1931f4231805271f2d6b78d7b4b2b39abbbd47ca68eca95e1350e8327fe627ecc453e609be137f8b124a01efebb2ee07a2aaac87f47abc90770d0c677b523730896c875dff0b983646eb907e0c59b2d34d0e61dea9aaf9b4f5077a16638e29840de1447bbd499e2b5468bd8a293eeeff794278477492a63b4ec9e485a7254428cea668ba6385c5d792acd0ac51e79b4d13afc503379b0a5cc5b2243ed96daafc60206222c1cb19550fa4b8fc495de48db49a45a27290093f4dfcf19b852b5a346c6a2b7fe14d290c6a26d6c2e4cfa765b28fb074e05ee4c36d058abb7d23d32069b77ff7811f257388aee9f9b36147d8622d20a5170f3d6dc6fb3880e3f72b67789dd7a4b8ee1ff74cd425c757294c871d80046226d220d897fccdbc27d662358597fbdc4d88e96254c02f854f9962ffbcf0451ed53511da92775a48e5cf909a5af4472d6b89d1fb8d3a9183a35c8d819620d2a4806c04d498e481abb264899a6b620bfbd4e48f55cc8aed317e13d2397bf8d4b24ba02ce3eed6a2111ee1de8f115aa930565204b89e0acc8532d953d04ebce0e12693df804cdc853552b3fd9f665d5a1a8de2fc30630a49663ef4a150de842fea6e9e12034e90ef83a3ef4b33ca17f50e28ad91b8c897bd5589c7e496750294b550a21e9a6dea2e8a297432fe5b056a6d6c966ea977c99b36bb6fac4cb605a1709b120dee55e4aa18e1de2afa826d25a97f279956b48e08cf0f2d1a82aecf2458f7d97aea032fe7a12f1887e3f7fa0a7f1a8cca7357d3633f10d7476cde2f760a3d69d37edf5d4abd24c28e3dc0cdeebee07246453b52fd05d28c8d68c90b3640bec14557c983a41621fa979b7da2eeb8e2c47cef53e88475aa4874dbb744feec68cb4d4b1cb3e4197b124cb05ac75087a0a0ad8952458680e668f04fcae407f107b75c194b22fecad23906b4089902941cba4fed99dd15752a97b36e6754b51a9ddef37d930a86afebfd639796bb7d84cd147219d3b721acaab510ac55e4738d47437502790ca9067486d503dc2e281925ebd1a865f98a97824ad9e40d6b4d4e04d1b16ca357e347153f7d6fb7fb8690d0151c8d3079dfb2c40291d4dcc92307a66ffe54d637aaa3cf1b208c4c43a2866df5ac6f2e16fe43dd524f6a0faac176aa7dbcebc2919d0fde5275dd8c09f732860f55e3fc5daf964feb9c33138d35c2849be19fabe2847452f6a81492ae65d7f190ecd6b1fe50d6ef03a29e0ddaaa7775cd62128b84f2b75ae386ebe57a177d219c23fc2dcc5de1e039dedae77c864a42c4620edce1af2b580b6a7ccedfa271146091eb934821da383d9eed0e10624c5c181476f6e0536ef4721434f32c61fecc26e9cff2af575e93246e8c0b2afa87cf671f6170f80daacce218f762eed47564153616733fbe11987f836d0772709c1bfba7107f458b96b148a08da83a7b34572a42e17cb992b2e30e9b29d91590cef94401ad93c4ee29ce7bce41bac0091404d8741384ce2caa1d97e6705a4c4cce14bb1f11c40269797a32d10e9dd3dde0ae8f5ceffbd8413c80ce45c8240876b00e648dba0ffc0bf018d5bec37a0dc8f47470049ffd098003c5cf08b0af62d1664ff1db310745e01339625f629dae108ca7335811d828632ad413d03a391fa6fe0b6e80db5265afaad0752a7c11399813653c15c42249a8b21d3910be0899806bc3b3bf6e425b38678edbd937918883cd2b6c0caa67f918e4eee85a9be8b867c5cfd5a3a3a0dea7009e42d8fb7fe31d199ba93a30b334db3e4613a36f3aacb1f8b1e916e77ed549dbd5f4d3be0d607bd480fa1017b27ba1e790722d35a53b384b7b39cd687b843480eb0f93695135887d8f65e0603596f91a77bdabf2049d036252a81a6c02a4830ce38344971e84ab8d64b776162705d1fda28e63ed1f26a59dee5ab674f31921036fd762cb217070af4250158bbd0662aa743e7c2001a1ec57a3a0976105cc5f70fe080bda379533d2c30822b8ec7c3b2fc5cef4983b80bba3d2b0533868145073885674be647161a7db1d47234ffa5c0b8e3d7d5226b4b38d6196551caf24b40c8d690b50b58f8847d65b297dcb7867ead9bd9899b41a882660ce230ca53115939fe1cad4009690ed206b59ccf29684c42447bb51747a421454f6bb825e0473a6becc57d396576329c7792a274c211665f53cfa9980f295736b757355dba93eb227ab555bb163599daa4990fed3b5cafedc914f592ce40d62fed1bd952d23149906a3fe11f45357ef5796965d49a84efb047f62527747c6fcb96d437038a4cecfdb7f803ae193d79a399dced9792921c5898a42d4caec3790d7a0f680e71ae038223ae5d7575451f62e0e0dea32391ca3fb251ed394a8c29f7a56d4c36729b5a39158542491c94b96efe927251df80e56c69e22325b745b5b91d0f89b45c579b17c9bf57cf422917845cf6b11bfdcfc7342ec5d2137d0c990e676938a3dda6e5a7616ae313481faac6133975fdafb29b2c6e0ce4f280461480d76c3dbe29205e90a65f627a2cdf69498836683e83253705829b7cfd76b23ae8155d6b66410ae3c426989e98965ad1e54c4caf5536deb909f33f1b816ac3891402b23014b658e063492619bd40ebe476ddf3ea0c97c5e8e149943cc7c157b4a3e8270221defa38a5f8b68066f7fd265dcd35d28672c9480d357be69de92f4c7f59e148f3bea895b90a56f4b5a1a8c16616c77d7dbe5006c5f885e543388225927aaf8719bfac6d5ef1a20e4b6e371ecd4e0dc9166852d67f383f7a45980493c5954bc7d942f3010ac5124015e9a7c78e58674d7d5178598bca71f0a0f1a326f059e49c7fb42f948bd23db117cd5a156c366f3d6b2a2a538608a3e4e7ef9245905d770cba5d36089d2c15b91432faee4f33d15f2fb6d0b204afa4a14f832c2dc3df2264b035b2c4cf582b1d4d9eadb43089db92586db347da48bbce1ccc83c5011a35280a7a09194aec7e5d882f597bbac60f25aeeac969a435e8174c827f6a89f7b246174b3619d083ce5f042b1645c47916f2fda25607a225d2972ce11ad19e68ebf7dc16f1db5842e74c298ffca6508a6883cbf4169e6da02457fbfb10ac9a4dbbaf8c1471e6400271d958dc68ddcc83c210560951d5ba1a9cc05a190f96f47ae27448eb1ce8b1c017cf5faf2a83a47aacb673eb942e5a4b88b1471859804cdfaef7c45b3d065aba59b616bbf09b7a21a266c0337a169585600bf70c21e2a0563426a1b472aaca05126ae4ce5619d89ef0985bb83f6e226ad547c9805505c9d2d41c89b62b0a795c662c1b4f46b65dbf51b9b01fa736cd8638ee77f589af4444cf45bd314bc9dfe837f76a5cb065302848f2f27021c3d6c6b7535a9c4ef883483bacf2c8671f031c93a7e0c63013544ebde9d2f46f88540494aa55c070e23cf84bc33cbf238b33b9e51066ae8dc50159f487b18a31bc40073586004705ee0c3046317445bd6b3919a41e22a28e9c2761a1c421b620034762d1e7792c9d7300c6896de49386d04d89bfa943699e7b4a02289ce800b7da6816652a1a5daab354af78528e8201147dc0b2490c7a0099263dfa43785555a75c3879378d3f861340158b0eb00678307cd10a1328fe901665a799c781a2ae5b1cf725e629e3c9fe9e603617edff55cff264652a623376a3757cdddee022c144c0dd8a181550a5b2f900cad4e40b5aaef7c14dc16f0075a02cbc587f2b0a2832fd2607e235392804664b92a748dd3874369a13ad60ec66aa24600b71e0dc50aec2ad43bcec255b3b681e4cf7ea57942545018d997a34bfb75d555cb7e9d037970ff4252aa61e044c211ef9a10910ef238f95cf7af8705ae9d174281739f86d464199f8c1e31470dfc9cb2bafa7e270fc2894e31d36f3c673337adc1b75cb603d64fa2224b5bffec5ff8918a141b03eea32d7cbd6750252d46b3bfcdaade2424c58afb4b472db2fc3d39af03ef4864cd396ba8eb720f56adeeb47cc07fb403f94ac878b087e3a9632e6b95001a6e336a32024a95c8be6da7600e36e89522e136245e7f3aed068ae2d3ed10a1ce06ee0a4ec648bd89ac067212bf22a00d81ce0dc42a5681e60ddf7684d240ea7151028d36a82823c507893de26f53d59c06fe648b2a0a49c91006801d7a0b05501b0f2364d1d431b2ffa881fb847d0a1ed55d1676cafad962e43b32ef9db1b0318d89c847c8817eea78d28bf5e1e32eb563f79ab745c59178ac89b892185d9fe27ea917bd859c5deb85ec8c2171e42a43b9f5f05946953ecd71f1d0cc888d6f7260e0ace3a5827a0cb43e83aabebd606affaac4f8e06e54a3eec9b63cc8b6cfe1a0ee41ac051afc923ece68cbec5c2cb2ea38482fa6c14f87c1ef8c3d28ab9507521cffd05af93b1dec6e66e13dfc8798e58ac4a2dc4b6bf3b1fb54e2b6713bae8ea9f6848db7df5bdb945097450328d781e5f8e0405ba62c24aa684ba882c567117b7ece090fc5c1bf87a8b92b664190c2824751a059a5c17aa2812ec79cc8e0c46e97c05116b6261d1640c8f4784393d5ae6973943dadd48c324ee9448596eff4482fd607f1fa660084fc0cb9a5ecbb0adad041aa4dcb399d739570c9382a1c1e8d6d3be6fc37a093e19ca0c1f63bc6880efd77763ea3cfb52c6971850bd07df4c33871467df1256df6be4c576da9d080258992cabd73e56a9c6d2904ee7072bd604c6109809f814107463c989875f777871d7ea15ec0f8a73a8747049d6259dc1ad03f5c90ad888dcc4af118149cf1774336cb5d8148ae02aeaf59d9f70373de001c2775e3d5568c3c4778007e8e3eebc2d6bfb3558e09959e358f1d9753a53ae1296262744ca505d61f42051e619144de513cd93770d9a25d38e237dde7662a11001d9be5688096840febe188b6919468ede6520b528dfb5a50fc8ab3d6f733e263d24bfd4cb9d81477a7c2911d258e5a3fec0ebca86190f8b377aa0693097f0ef2e5ea21cd5e1ebc53113f0ebbd01578f7b2f8a2ff263f839efd2c3da1cdc5fb4a605b0677bdb307d44b3a56c5a3b9d699ddb9d1315d44166b4e1e00476bf03e0ba526d5d886e620cd5f1fd02ddd94e2e5089336ed76cef583405db6e5f293a490a841fa306e8274bd37ad10a6b7851c014fc79d94767c48fbcf365a52d5403cecf0485cac9cd407a51a39aa991bf112891e77ec3d802afe5e4287a0370500191ecc0c1951bd8aa831e14e1a5e875b418cca94cf953f6d51349823a71a01dab3826e5e3d7c821e7b34ed4430abb643e412d7f849e7baa8999b4d5991d1576816eb3bbe55efcf2b2b6f162647bdc33ed5f09f3ca01380a7fa7fc4c37fb8eba1faa8ce111232a7a7993d0359c784994b8e26533c1712a91a899634668c3f42f2d23fbb48d672058a40c19a53568f447520d4def77d6d43220ce5d3a4b81a2ac303df72c6c07de282c37ddf5a65ce52a6932a48e2d856628a5329cf9462a634be3203fd8a6f2baf4007bda83fc431e85ffc9ad5654b57ee1dc525cad85ab9082c879de0d3cf204ff949f1a5221a233a6b8c8b05598001e23bbc6f11c3206c8b2dd8c9e9fe332401dddec8b5d858d5c41772449cac30d90de173e980a08b90ee9051fb7c63e59b8e123d603e1240b3a1f699b7c848c5bfc73cfe25d6767be78030b17ca1b954e170df42069b6f3c3cacad1e6db5782c26be87ac94945a7dcac044d2e7d0d19f559c2e7ef5531172b7fffe6d754cba96856fb939f6bd80df57f092cfdda163ca4433739db5f146827d07684df9242c256898bc63a5399de301216a2bb6eeb453d694e9e6d828a8c5271ffe57af2d345be105b088b3bc0bae8d94bd611be5096756f508ad16c7fe0a8ce26b0a6f74ff2217ba4777423cbffe7828d8d34f0a311d8db46678e6a211eb5ee74f0091b9dafeda7f2e4c16bbe5b0e68cd9743c6c728fde37f83863bdbe85afa8c6bb41db658bf83e13c9da99b6649a1dbbda1b1691aadce427a2db8141509d69995f61f39feb04aebf1dc893816e4694f8ca47939545638564cd7cc94c0bb2cace89894b9fff9a435cdee6974549b3dcb9472e086c7a3f712894f7a315d937c099eda98fff3cb8e79bd8b7932dd0714bb6c246208edc3f6154973e63e1ce15f2e9462d21152b340349f1abb2904197de912663570e5970b802b16d70ed5bd2df34eae29e016a3b70a8d03665351ce369f2e3a4f37b7a290051f152014a271cb3458433b265d16911290fbd74c1cc6275d856bc8707645f616b79effd5873888c4abaa92b2ee6041859ea1bba6324f1973ce853369b82b4062809457b3466f113c81826ee901cd61f7f3cb13970bb78d0c3d06c88477115ee38b78a5fec234c24a31a64981b0332975938baff24fe1d8323b1d0a6fa9bd3338f261c1df429755ef67a898b60317512bae6f7062c87d4a238fffd95287c534e47bcaea0d49da11c668aeac98be96d64ec0908a762c03ccf7fd58552048b12d26cff43ac5fed3023d0dd5360496a386209d0cac52bd549b0e86d4c13eb9a5a37aa376d3168f51c1dab790c1f6df1a845bff13b50a7d14a2fa3c8ac5b572bb338ae89756881dda9781af4f8006414a762be6d9f15fdcb7b30a04f5db3cb2e5082a481b052deab44dca571409f8ba1288ce9c3b3f8902ce54ea60741ef7849943e8ecd4ffbd3aa46a8de973c34a9d80d7f9ad03e7f0b5c349fe488a519da13c004c1861d2b37fd2131eb7c386e333ca82d255d1b9ccd6c65e4b015f5e49a02a1f5f1c7a4b0ccf5acf981026b2b2c86e52628c10da910edc891a8ee6ed80e21a596028b8b98e97ec271a893f9967becd0d1f85d3e2ecac5bad2b12433a329b620071dd518a16f4d308af31ec5cc12ceb26c743e90f5048eb694112469bc7aad17945e870661351a4f975a314436ec4c4902fd179677161423cfebbc2297470f08681c4de5ec999e8c7031cd64126dbb4cd0d8d62a76f7dab9a9fd38d7f01c932f6fcbad2724ee42835ef2cf28f00b9ad8a02f061b26abdc161378e67441ea64700a61306e6a61886051e7be24ab1c4d726201720fae775547a9abfd27bf418a39f54f1d18e853ee137e0c1e1ad12334231d77ab31a777a7d123cc29c80f0d54ae29b754b4269e789e5d4cf346fec9ef0d53f38abf7ff712ea01291b789fee3fb2e1dbb3c4f6684b2663dc40e4548f50b13d0ea160172a1e29d1b57c100f5bca28e8be72b4a8e9ff84d9d6c7f3eadc0b495d64a54c51dc12ba6ed94570fdc300fddeef1a03e6cc996300d276a070f1b12fc3884d79450da5e28640ba3dd61d1033665ab371c9f98dc9763b3b71b9a0c5b3db029510d689ebf6d3d7317b5cec26e433173b3cf09116722ef6d2c27ca60d6ad9e1a44becd81972cd1eda38d84d57d81259592eb9d0eee51701c30384ffd94438cc061a133048249379c902a54c403b70ec248e587574b804564cbc3934bb389ec13e1a9221becaea94e6643714f01ecbb6cf5c9440b4a81a7d4fe474ad8909e57909ba55df4ac881a2e17af367cc7b0db0445ae64847ea2f4fc2694b2f554e7feba40d214c83a73626c035b9e525d9fb550fbcf4dc02b2b58b505e6a298524138afe7cf3cb03cc016820a713da4bcb592c5c4730e1570b4e127d8c8b76f2bb9c9359be7a8a792d40a9f45b89c1b1eda942e956d5a31829cfdddc9ca4f3d9cb04b956875d5e6988d67e34d67c6a65041fd8a26147b255393aa4a6364b0fef44dc952661fc9bc00f2636e455d09545656c10b89a0b034f186d3a6d411cd5f11d33ecd56a7b8c000a67d828bbc6671215808ea93d14aa5f6823e6fc92d66e2fdba4ff93f14070cc1e6f3ebb502a90375030ed51c7f1c87e1fe44f20b38b38f76d4217c2ee9294a7b510fc16bc9fbc99391db4a98ceba79d9ea47e4a9e6414b3ead2d5a92f88b5202d558e6920ed91791f425a2a7adf0e97128ee24e2d2248a90221d2f66e252996d107229ad93660dffe27df894843ea623491495f71283e3e3e8c7cef68eecb4791bde7e072c633b5c64ed8d0e6d8e62d09e96b7ac3a4de743b17db7bcda0a1f1062e6055283988468b617c3237471138a59e4874bd4f531e4f6871b6c05d39165c4631eeb579e210135edbcb57e30270eea1c46ef60140f3b6cd6d227d1d908f6cee097650a8ebdbe48370b6e2f444e3a28c053aaae6b073f35ada335c6728c79f17a6ae1c872861cb75e4219f9892e5ca6ce1b18138c165735f65ba7f674a8653b6b21fe9a2eec604b8fcfff56a9f0f8d28f5d33896c8715f2930d92319ab29c2eb7855d74626e686556c7f029cf0c60935c78550aa5b60483cd73ccc28fda50983885fa9b3038a70277dcbf6e92da9067a76d0ace71351b7b286e1765c784ed7937b63ad3a29233e462e05c32b8224c04a3ea735af8c0e2525d956212eb6c534fe497fe64bb1514b71ad02eee99ce43daf886a8940a3a2e15e799cf882ff5c3131353478a0c381727ed391898156c27e5078428ffbdb7b860d06376bf162f841c1cff5cb8500fc74296ffd6b3651d4e2f17f6695082ac450be0d0d8a4562a4aae8c28007f56400746c693c575efc2a61f27ced86dfa49c0fc4c70a4ed072439df5ff62f211ab0078cb41b7b260507878363ef167acc6f2a8139965ae6f147067912aaf65f52f72d2beec0be70b19dfd6181cbe4d33a06e73eb14e1d0747f844dccc859b3c7c4ef79f2cddcda61d8a7a3c4463f942fb38f287b43788d780a1b1fd31f751bf6e20837ff1072eb214869c3c668d7de6b37253c4939beba80c4f1805579eb8a1ceef278857872727b5d4b9954c3b7ca8043db9c9ab9cf1a06ce79c422dc027929a051ed47d56067fbf1b5461fb3f38b3cc23d77d908b03e9907d93f9ab52ba6c39e5796921e620087757f1093469f9bd793fecd6eebbb4851cef521e6cdad9c6a49fcf083346e4e3ffc9eb57eb275a6921f23c86420a315aecd70adb605beeec5488696d8e51d5b5a8665f1a6f584601b829c0edc5281778d421054b1c487229ff3b5026df341f2b7b2287738e6ac02806af374da07b9bcd3317c8f7f20eaec0d8938d81eabd0d1946d9de279a14552640a167ce4dc34ddea4a50004fe4a2ad95bc50e40dbda8946c6578b6bacd16e147bc6f39300c401f7cc73aae227a932a497b09a262263ac3b0c2053cb8b4a2f3d8f2060fc759e4673f9c09d21a104064604fcb13a828273de4bcae13be6ef160492b65903f172a932839ec8874fc5744d43cf67e12c09a4fe5e122ff3a2cdf3c6c3eb115ea7a6d8ecf05214111bfb9fb54cf92a0aba2546b26159345cd441fbd73339505633f59d805f08522b083c019354d34fda077c575b5926290e702384a1b42aa34bb9ee29f3ba2021fcd4221c33a6732c333613c1d45fe3c698e234af1d1ae67dca9d2d6aa624442c3c7b799b71ca8ce0c069399e344b3e85483e6807cf877f6856aec90abc0140c9444d3957bff61dd61b2100f154a3eda289909de3d4f31f9316794c535253213cb4df95376bf08be90f269122840339e72a811aa2fc3f95130f91a33698ab8bd6607d20e01b82df8c1061401c15eb37c577efbf0c1783ffabbca3ca5c95427ad3fa080edd4fd4c7d83060ea3f6f3e7eed80d731c43acbf9f34f1749852a46647d934ac5c1905959468e4181f4c41d94dab4d0e343ea8cfa9b5661aaa5ee3e6278abf4caa7877d2eb5a75206e69300476de6c3114b790a7c72b0192fc287e4086c211dbaf2faf5a21ce871f965f23066ab8b9383bad68de9efc91fc1c42732737f080c8e01a6d396e2bb40c33efbeee5473d54169b1308881914c78203ca98c4dc37c80ef04e33fe9864e9627d701b7037ae32942c11c6c9806a2430310806443412b49ba7a94e9419ea2a4d5341c4f68a48a53d796c8de2482e6f671c855ed59de298b0d06ac5b3ff78c20f2fa3aa3d488f99033c7606631203099f182103ba6430fe772f869bb1a29ee770d169141bae02913621c7a1e07cd8233ad51181a2fbff2aa56bee42cce6cc800c5f2a0ea3db754425d1ead572f8eb8a0c6f82cf2c618716f2e483c4c8176edf4cff0e4a06ed880ec3ad1a6acd73eb51e0f127783ae58bf1013133a89e24fd5e6e8ab0113bf5cdb96bc696b84f2be3f7c6e96085d0bf1ca3eadb6c7edacb661bf4496763fd61005b66fe8a1a766f6bec0542eb1ed189783c19bbb0dba01025fbadf2df32b1ba26b0fc1d4b59fdd91f3c73545e78d9e362057b1a0e9772db526855c6156f6944d8335c00d3c09ba3f3b2c4c496c24b29813a29b450975254013751c31f8293dc85ea0f5e54cc1f629c101ea2412c5c49a7e142f12ff3c4b7ea09f1a7b6260039faf6441f32b0bb179c827decd13f0b14a14b59e593fe9c4c9254de69feac2fad0a548ddfab76f2a5ee71c56688ee900404e438f1b941ec21a18bd070770b6ea671b59f85f5cd49b6361493bc77dd37be42958d343df86f84c80954c9fc0056e200c0f5aa0b4457798f7396c0f4c0ecf78b6317a1c8fcd1da6a183e5c3d64c2cb3ea1d9dfbb1ef20560b7ee9187dd67a6bb9c98d81128530ac99a015f99b6b84aadee2660a241caf787a887b7b7375fb70efa23fa39e015c182d862a9117c1278c135ac86c0b2b5a48f448ab991fc323419336cc9318b3889e4bcf8ec04e40df8dd39586a06ab47384bfd81e4d5b5f24f275418d90822b6365655f9a88455028eb676c1faaf7ab0d05021416e88ad8620708227e4f81c1639ebffb8bd4168276d81066a0ec6dc765479740595bd05b116a3c309ab3fe969279df78809bd9446fd162b65f92511d3889bf5034db0e02a9dd4cad81c64af6eccc2ab82671b27d29876d9c6204c567d97fa18eb11e69ec519cf12ad1ee68738ed5d438ab6b40a8ada05ce5dc3291054a592c688b0247f0e13f2867ac780fb0c49cc5806bcc6ddfd9361b938d8911d403e0f08e2480be99b75d1d4e94843ec0083df10884f4d16a21a2408e076c84f7f56f16fa554fc8527a377f14e077b2400b4184571805188ab083264e5f35c663f34753d3d7a982dc336d54c88ae8aefd390b923ed24a2d3e0c3451e06926e16ed6f56fe1d7b436c77d091ec13ea1ec49b8b76c9b602c06b1b14683a82366ede40c212024cfcf24bdb2c17ccd1641a6776a0b3b18d69ed4cbc62976e8d8bb4fe02561e384e3894c2e08ae5905569ab716da600b5e4ce7c2bb55c6996d7f9a7a4aa91332e8026d582d8059af205432ffed1d36edcffef2bfd4746790eaa4d28f5dd9ed6367d0d671f56ea412561fd3a6e8238fa50e2cee257eb71afa81329545b9435186563701c1d36b8adc8e6f5f75f99f0e7f7cc24bbecbedff43f6e04a7687152f72033f41f082711a71558c97477cff570ef4be2414b906ab2c1e7e8123945c11c9b8c4ec8b1d0ba8c1e8fd1d9b5f9c3d459fd7e697b624ae70816ea69e3be70ed1c7bc0d1d8737f5d7b6b7166d53cfd22648b8ac8d4cdc38f62e45615d0d9cbfcf075d0efcfa9dcbdd0c4cc80a88deaed707c84d9544a6d510392d4864617ce3ff2427432da33ac244534ed8f2d81c6f6ffc8a91b9dcef23945764c26f92ded2d83d339bd5715b6562903f17f06d81914bc139b247ccfe1c7b8e2454e0252c5cb93c2e4a64abe9a6506977fa1637177b1663d41340a0528b8d5a23d6038f0990f7928f35aac32967941c2e42ea0cef2f2ff7bd4e84c0c8fb1a5847f56e7c3fbe7f8f0ab6a7929a7ef5319748176e7bd2c91f1ac9401bfcd3945811a02a735f11d12d181490a9f79f617f662f3b1bb22834575fbdbfec8df8d5875e8d1e6d7779123df5040b6d5a0f4577d58a09ca34dd761465d4472e127367b0921bd0b9c7a4a2a6a045fa1c7f318034ff9dc9b55b6447821c327c1a27e4326adcb5f7dc1b21fd21a3cd1f6503c23b627b251e9347bdaa3f425f4e0c4f3069e15a8812e4021f3fc8de1682590c07ec590c71a8e87b69cce8f749f0ed0a42d8ff6f55183b5aad8c23a83de1f8f6f64b93ac6d8504f17ab1a6c90230f32235e3482b65b1bd53139002b70ac0a5ddb7da4268f64c6e57d8ceb9a115d960322eb33cb0a8a6d0b59cffa46eab92557196083fbeabcefada29a8d771f92b0ced7ceaaf3c3573a631496bf0270ecca81fe3e4fc8602b6e9170937728e003350100b7b5d911fdbcf4fcdadcf1d3569e5d82ee0b2e8b3c21a07e047cc984b6b246e1d401c8c6003acc70e902eca6a4e941d40dec87ac11e4633b043b2aba38e17b1a645165775aed92c51c6e631f442025028b93edd157a790a087fbc5e0560d2db074611c65f6416dee727add805be5f8b9499d7d2336c2f79170044ccb36d140c8a204ab40d5250086dd53a80ea65598b803e92c46cf2de17dc870d7a3a19ae2c635d6d83e888371acc90ec7ff8e2857e87d87fe85af82a6209866b658b0bcc5644055064afa8e14a3bf754bc92cd065bedbffe689f9147a2a85c9a5b47adcfb324e94c5190e6d4654638f3e221b15fe2ac4555d30e1780ea256cb973b7df6f8c2234901b4d6da01e91aa99790d7603a9c8be5efad4a21c3bfe693d93dbbcefbb3cd33f63c7739be5d0dc70f213bda75c020ba0cb9c80042821df94d517809254bc6ab42ac2e58125e6f3bfe6f1ec2bd7fefcc91b8244408f2c69806c20612e10699de705ae4723e0c7cd3a9625c2db87e3022f80efd8a7375668fd596e0ca0c201d5ab18c3e2d4f986d14e95bb4ab07f669eedc73bce1fa520729b3dc4a24fdc07fabed085676a4c8f4f145f1027ea392f1b04b2324712b175938a5b9a5144154abbe34c41f344025b1e1468c2f2eaea23408adcf373ba78e6fa2456717e63d75e32aaa477077096089d7f0e0eba9c46a04a27181e11b19cc47f92bb29f6e9a28ba5bf75c170dc726956b59b2e106b9fba4c590470236c792fedcfb9420b93e9893aaba17e69d1dd08fcc9f838e6dc771fb9764cc93eeaf41f595b432ad352e1ccd288972bb5f9c00c69e2d275fc7000314d392e5b21227f1053be63f01ecab24e6f1623e255ee7fb133e82e96c6c44eebc01980b91bd989fc032708b53997ccd8272097a2bbaa827021170ba87de073f08ecc2f1c69d4047bc444b4184b3eb8acf918e9af5c046b810991d46feea81374f52846a6fa884626ad5350d1fb8a8369182fb2d56276a1ccd21f64f63bbbf5a8cc68b8e9c4fde2f70baf3a3f0f7a53a68502fb9b5fc4dc101382b3e76d77706e94256f73aa50b49258c3d092286e75e9d3d55cf1b0002d14f8dcc1b26ceac6ab5a6041ece6be8890d9ff3c7fc57fa21493e819d4f1fa4cf8ba7b402aecdeb792b09e5995ebd607b5c99dbf197f7d328aa27ba300456ea3ea41b880f8c19e603c57db25569db253921cab52f28287b16e9bbd497c96e0b27b3716893748ebbda087bce7381becd8c5a6efde24121143ce74a411b3599a96c154065080ed5095474c70f539ff860cf6014539ece6bc04a2c3877bed5a87eb965fd6c3dabfecab964aa204c4183dbe60cd3df673985b81c4f864c82f4f9d7f3c9e9449fa92e3a67a3c9a94b2e57be54a3d1e5ee15278ce91abe3096e3be814c5d748ac5b470837cede1fe1a1c91d0088c15f9e8959604b406b349b29d566e5d7d54c275f57ebbf31704749b3f832d911ba7cc02bc3c0395f69cc183a19514d4a86bd9d1e68b18acbcc1bd05ff5d7f93db4ffe192fe40a3a45c4406b0ec1615184cf0e98859d651deaec00b0b1b1a199854d572525a6a97ca877e44b4aa01097ab676c3e36a5315c1671555160ebfc05c607cf99390e2063643d189b423e9ecaa50a2b077e294ca554b4c5921b390bdb1af27ec6a40b74b39c6175bb6a98f963dfdc13e1a5eb9fd743d89e0296fdfb6c09e26e6a361b9c488ff50579f23b2ee9839e9af11800825c0bac82a9035812c9f76ee5f9bac893be8757a96b60965a215e045adb9a80caf34baca17eb0b858db90b2f46cf43e72f4d78f5930f0cb8c13bc8ecd698ad8e63f444501f88a8c06fdd9098328fe5c90d0714b8a8c5ff3e4cc6581b2eac913ae087b8f5fdd7ccd127f030313f9d1019182e33a1c0f33414fcc38285e035ef1129aad1a47d1637306a1c829a76c66fd7c8122d93e811e446879d0b7d6fdc85898237d09cd2ecc27ae548a0b46f87a83cce2a440423b4a5d47269a5e51e8dcdcece76ced2ab0f175265f048ac64c8a8af199ff6ba3dc4a87355d35a63980b85fb124b7fae5c41aad39d44e11758cd1671d96924bb151bd267da01af2443b67db664c6394bc64ac9d092d98c375067b6df4a157f27e748359926a50f10dd9f57c9618d4b7cf2208185f2c5e969ea303fb0c030a055490c0a8364981ef770548dca28c191014640e49a456568ef2e99d67bda8266ffde55562de0a74ff5da1b03324e95ec632b3622335f4a40d0c7378401cae960612c3df0df65da4b05fe74147c6cda71ae71bd4c780bcb418f866714b598a5e05946bba03408fdf4b3e95073e578cd0e6d4b45ca9f134ed7f0d3697b41fa8b9d8225a1a422d2b5f7a7b6300ac2331eae73b228a10150c2b033c36fb645fd5abd3abdd84dfa9b1d73872fcc668ecfedaceba9dfde73f083efc7ee2ebbd6d7d7f382caef2520c52197cbbefaa2756c3d0166f49bceb232e76a324fb0865e2093248555fc0f7f69973280c174ab58c2f650e584eb95e503d2b0b241e8800f56564073619eca21d86707230f5bdfcc493b4ddbe693e0fc3e4e2f1bd4810d36e069eb6a0d4c7cb73ae339c4bcfbbb5041c90f4ddf60fdd011a8c84391976c28a1cbd809a289ed2840b56bdda97ab8b623999cbc0d3457ba60e063c3f0dedb39d5ac35d29d5c867eb1fbcec7d6748280d1bc339a38068a773212d8a5c0e10947f34654a012a8b46bcc426337892074a75467bfdc07cf333b5c922a1bdcdf9097776e45d556d55b43c5dcaee6525c2ef5cba0f84e89e0e29d31e179e58261fc7e24adcc13d0467c111e3c6c185ceaebeeb2859453156918c1b0eb2f7770dc981767aa30cdfd514f1d41583155b6c9f1c604aa6bb613520d3588166bd22b3bee6798c9b77748c03af8d494cc3f96e2ee89b0d082ba669d4801961dadec0c49a91944b382f77b396ce5bacf7e867d67f6d4e01421aa01171be88ccb8af6bfc259738e3e77d631ebf7bd11d17318fec4bac184d0de01ec7161ba4be6e68e9d57d42d36ece4834284e7842e7b2608699675226610b5a6c2295f8d177ed3fb2cda83c9096c98bc46bc29a10278ce32b85517625c74825152264d0ef26d8fcc716c77fc2024209ad62c930db8f180adb890624e4157eb24912f30365a6f9cbbe490bd09d10e57cbdc3eb10a3bd53ef78c78bf9e00ff3724b25901a4dae8ec36b2a9d20f166a01246cff161097b877ab11fa55e6a31dfe6f36fa565bd08ef95e0b01b2a8969118e88c757e197922a77a190c25f1f918fe4a4ab7c96fb07ec96d7f03ec5ba5ce0584fb214dc92494b621009db9029acad1ac0138b1d96319576cddba72664038cfacc957a6edfd84b325e3759081629abead245aaecb286b9dbbdefae6c9a8c4c66bc0ba32c77dc93b16dc8bdca355d455d2a48cd121baa7bc4b7efeed095b850028a146843fee8ffb04794d2149b15da0692e12d90fe77ab814138a5dc07a377bbfb6dc5af399fc9579edd4056699006a62047047a0a119a9379c77ba1e3f81aaabbcf774a27a77f000387ccce610de5b6e1dbba3f2da096bc2bef1a3c682d846ac89c4ab7660f8c3c715f124322dd7232b989f4b143429b496d4665381ffd5fb05adcacd6f078b5af6c427d253b8ce77ef24d15f88eb63144846e2707dcf61d95b22ead98704e9a15a93693f79400af192f1d9b85a34cfd9ea9fa49b0ba8dfe57ebe66785387ac48737e53af21eae81b62433e89151c354cc5b24224636cb5642b8cb0935fba90a27553d7987f84dffbf9be8d912dbd4063a00cc6304f409045f7f22719ca3baf7a7e5c83d14f2b7765e9e49f89b8f6dde3df71e42afe1766e53b8ea1a6045080d7b7bf85f409cf7baaafddb3ec1c123a7f5a541cb96ddbd5a2faa562d9fa647c54f8af910d45d2fa6aa17ce2cde73d754da9701b0098c217afb901b8fd89cbd720ecfff32c5dd8587ba958dcb5855f3b39b983b6cc293fedb1c8c876fc38099adfe2c338253c6a8471f50aadb5fa94539ebf5e57df3ea5ed86b79919b3d96a4ec0f3c6d286529b3ff934d81f74263ce34eddd726e7a1f142a9d48921015c3f817c795cce0f6da3b8af94dbae86b102c8413df3e301ba397fca6f0b08ec29fc6b9ad0203bbccef6cd33c9b660331085e165b03cfbc5662f8d1d89d6d2b2e6ba4b044454e8ae1227d0b0960322570f835291dd8435a7e376b999fe5dc176fa3ce91e2b799d75da5ea5211a210a1b2e06d84ac879940de1069b734141bdb60a0e85bef557d7a0fc7fcc5c434dcc90233d25655619d93d26b8e0a34a4832e355e9bdded03692a447e2f6ca91bbd70016b13ad91647aeacc6c0a9c67fd621b650f4da607af98901c649fa595e8cc86a0dcc3946b4f1b1ccedf0786b16c1aca20ef167637c130ee657835c56438a2b1665181abbea51218ee7ac9c720a536586f1cdc8bcc6c66c5ed3eeb5b9ffe88f545cd477803fce65988ca5f7c3c36c06c748cfde8dcb4707771d49c69aa9ad24e22b2fcfd30a1a729bfe8ae254e5e664efdbe81d1b67cb28dcc643044d7c55a5e05e0f9fe3c3cfe05e683d02e92a3373b1023062cba4fb9363df780129f2a79014b9c2d0d315ae3164efaa04debe56239d259229c88391af33fb058562005621055344c65c46a54108a98d5423e4fa087029e184a27527f1b47792dc5039728747446851320375140812cd2389ad350fd7d1ba773a0094ff4719c47ed5985dbb45d2b87db5c6912134b54718b9641702dd1c48854f331ed7c69a24c9f77e03a6ee8a1a57a1838e9b116cdb9040963ba7d50c1fdbf5535a51e47509a11a2249bfce32586d7de98b577e4a09dd6ca0e412f7b860d4b3d0ebbf2f0d86261e3980dd915a5ff558e5f76f61bfbe52849be80266f91dd5978421c667a385e26dbd05cf87169ee3cd57cdf4ec36656081a125fc8cf4e5d8561b3c4cc18653affe551ccc570e675075c656111648296af2f0dd532645a7621e171f23278997fd56d9109a50b3422bc1c654e754fbe7296b300fbe375f2105f0699c38873390774c2215fdf8163e219f023bbc6b707c6260f0a9fa49c195f4d96221c15c5f34b32642ebd78b87efbaad8ccfec643ecc5b0ff180d302d19e77270ded87983ee1c4ffd8507fef542307cb56957d0070a13290a7d30f6c3ae2aa006ffad0f27528f627c2b1d29427be223e60089b39e4ea309b1edc9a0ee3aef03145141c1df5a44ecf33041974c725d62dfd05fb1c9f025f23da79222c2311efe731185dd172f96561b627bcaa617a5d9b35d7d0f3742a5eabf5eb33cc27dd2ada295c940fccf8591472c1f710161ee2039740d473188d8d68d135d17f6cbec1b595452d590f8b2605a2a340cee2faebdef3dfebea1caf2650c7f6bdec3cbcc4c7469831498055800a44cdd7f0c69b4d013fb4dc4050f339dc28dae0accede2aef093cc8a81d398d3c5ba14f6ae7729fc3172b559324fb6e2f495e5081bed64a7fcfb4639eb244c55cc254a18f812d0ea4aaf1d4253ad5fb5ee6785d8bb4606eb0dfb0be9107fc49949fe9b19dd1d201d60fb1455a2d804815227493f45c806a589b22222e747acf71086f636da07f23980dd5707263166c7dbfe12801122cd873f64166252897df91133055f01237d27c3c60321b60cb9c1ef3c34b87d38cfa65c0dc96b16c3b21be72f398948821fde11b154a1985f736bc5b056ee8acef8f35770224983e62f9a0293af39384cab384d06e2af59df5afe2d7cb01b048d1cbca730e06140ac10e2918eb2529f6379350924b4cf6cc031d128bab58ca663d9768c8d1e9955af3efb1b1eeba005893204a182e356c5636500b5da7b44b8db5722eca019b392e7b77e2fd24c62b5e495206071f6444780185f24f1ec4397f142ccc07c057a1bf88dafac25c94d75676597868e1611f784f45e47a390b1c03ed3e12b6114257c37e2d8180fb13c621fac27277abbbe3252c8cc0615da3474075caa39bf411eabdee50f167968c13a550dfef237163f1c2d6f94bfed3ff3f65136f3e5714c00bcc039cf6e16f828fde932a6275132addf6246a7d0089e7c0da5bd9137799719c0f4318480200dc061fa16f67c65f916a105147bb2a407d538e7d496486d0925e04db8b8ccf28a40974b03c690789eea6dd5f88d5727d0121d2522f97ce3d85f364394689d2354ca99b80fb36a9f7777c8b043ded3c2b5989eff242c31172dc7d8772c71abd5f39af16e3bb96cd6cb0fb9387164aaba6f2aebc62fca7a225bc3c8c060487107527ca887f3917c7b30a5d1b0034d205da66cfdcf21c93c6a3a96fcb5ba6ede0d0c38b471bbbd8495d1ff0edb7627839728c1441abec5a646c4b471c47a523f2aceb01c5471c39f7efde4ad741e6d602b3eec4d7d33b6d3683f21a7330f2d3359b816de27157444a61710a046c3e403d7905435a9d3866a8e415b26c6c953a3eb7b4467d32635ebfaa59da994042a474ecb799fa3fd8dfba39d90e23e1a8eaff0b5d14cd2536663bfb25d45bc353229538d897d99817d758614b9c4fc16cabedb325b14d0129dd6bbcd6ead101bd0d2acd90d3cd8aed7cd861a006e12b4cca40217ed2a6f78704f8b50441991e516c8a7a1bc7be5681102939f26f73ca449ae9b647573079a8ae9a997117750b49a64dc209c8cedc387f70422429ef4d5c2608eceb00aedc4daa2c05b20448177c2d757e3a2ff7a161711d6c98b484c27b502a3c918211e26e8ff88c1e3f4777f327ee47ac3a9465b35f9a94e7f2b1abbed1f1e4b65790d4b7c4574b94b36291309bd37f343315e63c3f1cf583ffb3d4cde55af73e5f6e5ff7ab0bc1c72991a3fc5b47c03fec1e637fcc3328106962b69e06ff5ce757a77ba070ad82a7061a16500176eb05b87f1277b3ad0355d4291ca0884fa4d01e1811eaf8aec8bff25075f0776d4d90fda7e982d5af4b00ef04123b0e68f2a88af99c02595cfe33b43603999d44c06fcb8a06b71ad6581aa65aefb15a5d7992ff88d8b78b9561293b7f5b1550690a4e74d09c287cb01d1a9475775f40b515bdd0979458c9b49d8ab831422ac64d511f6c71797258a34b21a3e06e419bae4774f3e335d7f7aa8e9797737b7c7f50d140b2f97e345caf49449c645061b0d22f2e22e8ad528215c14050fbac212c3aa0d443f5239b19cc8c75683c572e83859da9f038a75cb7f6ddd20ecb54873a834f7907f22e1c5e0abf8e1c31a13d65a64ca81d126d80d6b1dffaa6588a047bb7ad8a75342426b788c7016bb5f8637ed567f16af90f14463a1514a94169ffd8e094962ec281012581946a510c1435ba14052809e45a41a8398ef7e1550eb3fee68480be2ac25b9f1a75dd5de50a3d8c97ae513d7220e15cd367baf001def40ccfbeb6516bd726e96f411bfe7a1b0e21a8620e8e68ac4190291ce9a92eed782fcaec68a2d821a63e40dacafa2d533ad0c71218046b4891625b105b82b7dff7f7f9b3e081b2697090d91a24d630175e53a822f21afac531d16b97e378450b2f3a35c3e1cf759bceafdad1a7947c564e55ee6c18d92e5d292b8c7186dbb4361c4bd09ae9c810fd9214535fb9da201741ce820bc94a671fbde062425344fec52c36736f3844b42974a217445659ed9a360c8b4b61471694757bed4e76916e4e3c3a6c7b2a14955362ef3699383d2b6f1f2f8692aaab01d302f214fdc07defb3615afca1843098b7dcb64a672d752cafa548b0ae82c0c2c2a4dd084a53b32874db7c710299def3f8d7000407efeee41f775faadbd8922cec9f0f8355d246789e1b39df6958af9a508095ab0b7609438bb57f8376c24a3a5e949ae6dfe173b40e73ec198667901e1ad5e6ff6695ad0845c791cd6b3a4902964cc61244cc5397184ba196cddc2e33bd9661942c21f6fae4a6629655f6c30f641654a47924f8d6aa8b29dcd23c8fc30ac547fedd4336b5da53bdeec358e0303fbca8978ad7da0b99244ba0205088cc5d7de1022112b98a21342a3ff783434d3143ecfc4ef83e8d220ae0b0a8a0b3376a7545e95c0aa96fbe5640b974ea225e9a24a9fc1be1d9998d4e717d93b6f69b8fdfca49f28e3971fdd5fd3aa64299b24f05a88805d4de0e1ff68cd68d84dc360313b98fec41fc98f50cbf565ff44bbfa94770827167636d62e1ef10f86e6561789521524774697972c0ace2c8a53294501857bdfb6c3af0002a07e1463a590d3dbd6ff5feada2f7417d0f28a6e08243f3ef23940e11ee78fdb5ff893dc274b2de1f6314802d99b25a6ebeaaf7ee34dbbd9c6bba7ae80c3155dca6f04a02ac75daf57530c9d4376b7cf5e0158e0bca73d4f6f695efb6f92db9986356508ca55fd0a1b6d301e32d9388fba86bff568fc0acab2ac84ad8f0e53cef98df6d85a41b6ab0285dbb9d7f3d6ba4f802421dd8144c5d717b465e9eff29660b2b26fb004dbe7b05f9305c50d91674dbc0ed8e54f7038df93324987a5ca633419e17235f7420a110e78a6b6adf6de455fe941a997840e583c0448c27a2479b539b217f2acde58a36f9d8c09c077a9947250271e0b79b7a4b86ff030f48ebc672aff287f62885e4e1afd427c11983fba35db3a9f561d654cfbfbe550e71f5e7b1cc790ee8bee199afbce6d850f4c54e3ad88ee1e3be4cc5070d62c18eae82140f6c10b4c4b20d6cea9ad9f473f28a9b0787eefeacd127428ff40db7f44dba36adc11c48cd19550e11c267bb57e07a95a80f435d82d0fe3d695a6f3efa64f9f208cd58c7fee81156c8e33704773785f9f4545eba59908606c06127055c156f95576c4625425b3f06ddaddff9af432a7d7331b66c5d9e92c9caabcd05f6a01e2643c52c422b2cdb49b68245af59de6e7d4c0b46964818d0f7c191c1649aeba1bdb2eccab7ad361030436ff4f280121a5d58b18e89fd6a9d90b42a5599ef321d5b729e78a4794bb59fc248b686dc8728d5caf2fb538b90182a98b8c63781bd9c1694438493801959ed98bceb68a588bec2f6830e9068a08e085a9e412a421a93b376ae6cfc17f9238076bbd148f06b78e2b558e3b379380fa3c546e54c9f469fe9b2dcd3ebcbf2710e8250cf8ce8736d9e54f10983d97d12595f8488ac7e5744f1b3718270e8cf34639ee10f51819c98f0bcddf2436d3973f98b30ccebe232ff1f98efb514451582de386299e915222c5c9eb3ac9b90b508858872e8b0af17d2b4196c32db9f63e3ddd4141bf260554f40bac5eb0e36ea197c7bb7b62e7e1fa0104eeda902accca44e7583ea1d20f59d773a7d605baf47646c825685043c080b60b2db086dac1dc205a4af0a436322dd79ff8f6b5f2e2a04d730d95e356fd9b630bcd4023b008d6b6fd5ed1b042a7fdc62bcb6092bbea5f19da20ec011f63163cba43f163285cf6e28c91c67a6e07febc5e4b2b132265ae45a86930182219a39bba3276f85f6780b98b727beffe10e512d60c7a20e8c176d0f5e2d3280ddcf4b038fb21105d42e49a274255692b101914cd7061d3478426d49ece8144b1cd4d06aab952e3f7cce5ca6b6dc94464397d8d906c536b6ee2f78996f6e4df8ea681cfc2ee57bc847772ba50a40595355b7fad34230df3ad2b810b9a957c47cfde0f7936eb7aec7b48f85cef558a3a31877b193ee1d38723372a47bda06351c2fc79de7b1f81e986bb7b280084b5924c08ade4a477d5c01af8fd3f02e41bf52dc4463b924e56beb0d21f902b4b812b526d94cf7bccd4c15cad9fa5300a206e5666817e5b3e3cc44cc02535b3e592a069fec2c6cb206260772d5a65f54262ba37dfb1f0d45c7f68c6e3d55e63617655e6b8d66c6b4ab020ca708b059d21ce626d2db547efe2f2cc854ed3f1c6f80930960c22c49e762fb6dc53ce657f377a833c50a39498f7f77b2a68466c9dd9b1b46fa46b87dc5403734f7efe0922e11002482c057cad0551bc0d16b2ab5623b479d1de4724cea8111d239bce2e086fb5aadc9ed56dbda1d54602ed341e6ae1f4f7ea23d5e0249fc3024a597fcf10048ff854d3edbe5d108657387ae4c2309c214179c6d39d7e46fbb9285c6dda0a0767def9ee54fc896d7fbfaa6c7d1151828e10cbda620b141f81f24c3070c28778e9fe2863cb3b253d8526a53857ace7eb67423ea9abb66b51aa118db640db65c69da052d3d2dfd08b4335aaf5fbd7ac9599655e8baabd2a651245c1b407d63bf581513048835c02493ae94e82a7aa819440abec9d6c494455a70f516df67c1bbc5901a45537dc91003b5550084486a089aa5686d13e9e908d709d7c86794a04dd17021ab36da4bf8a8d9f1310e372ae6cb45f5bcded348a4e9c13ec6df118503c4f58727e199e8c5c3785d5e92816e22de1c2ba6e3e935d0219ce783116465dff28c6467a63179e082133da24f3a9ad33c78c70f08b92cd69cd29e88c359b53e73adf6e4d4e96c43081308a617ed7f05d794fbcf19f92b9f95aa76fd767ecd1513a5335d6cde91a9dba90a5cd2e89cbbad7a1bc99258cb74bade5b0c9f1a057fceea07315ceadc32ad8b5f1864d0134430890a21dff49466be607fa88b1ede9149798b35aa3cb06e664751977c1388ae9df4de60a1dc76f7717676cf6974a03a32e4edccec8b76dec5e12691b30f6581ea1805153265f9b116f6d31116f7c1d7249bfc5bfea1f69c8c44bd65f17e91199b03f170d63a6936dcede5c061541af21e0ead5fb49d43aa38f855d11ad3cb5dc314ed664217c736c4488ece401e3567f1be807f27e5948cd5c9871b58e1a31f05f88fee9cd1cb90c2f64475ac9de56b7240fdeb637cbc64bf830148bf8419a3af1c40ffd4fd7120e0a99ff1c9ff26ea7b4fa4de52a5634d68dcf0733c37556ff3053e1eb483fd00de627a64a9e66f3d39766f7df3f0a922fd4ca1f38147389549fda2ea84a6f98de20202d7c3cadfe4f64e8224653d0bf91a8e06e4a12f55d4a09b683041a125e26c4d64b19ca527f7458f6a18eec3a225df3e3ab1b69549521a410a3cf958971e5385b923d22376438396ce7ff97ddfee23008f920284aab53ce2d0a31a57f7380610e1c61529d9e37c964af4292a79b36a68213ff51a66466a66f247e2f6054e51ab360caa2d0f9d40ba21f92ac90d9924cd9d31e9b4dc636a41a79c0e2587bc6e7616f50667e124f16c524a80aecc26510ca4cac362d7cf81ef56f95a4830804eb49d221966c53b581bfa46bac3d4a39d192509f3e45506958bdbc19f25b52613d8615a994e744bffa22c33c46676fc0de40f173b06695529ede742c10dcd2bf3efa763fa2fc28617cff533967ee86e654e770bc4420922f7444acc5eca980a3a46c134d85cbe45edfd2927478a19391a54d9ec2294a4dfa5fdd3ed76780dd7b52ee9f390eb8492d8faf1278f769e470b2e9ac1c2c5e33c6ab3a81339c1b8ad1dfcbd3d814e5d1e8df1dacb1351116ee499eb464c5e162005b4b14b4c8b4c32cdba0ce7d6c686d4e222b38648d4dd0f66540534ef10bf5c2b8a44667533249e2ef5a644b322f9000ffa2d9e8c955260a012e2851e4b786a03e2b15120b896e282debc09ed86aac2d03563d383f2d40515be324e961c7eeafc3797022a1aa94852b27a95c0cda3a48a06ba05fa98c3d6a82339b092968c80fc195c2e1d3ec79543d1e4f2901ccba1b3ec56fa763ab003c51d95a95fb0ac87e67c7cf95d816b03f6a662c7633cd23643cc32607cfe91454e44ede54823656073d859f301d2e2de3b4e6545c1ab704bae633d035f14c5824fd2bae0afcc69366999bb5f2f006f1d87a50a364306d45a607350330ee6559d75bb11a79ee856c630f3907d07130f4f73bbc49c66b7c6112e1d922827bb85872408e3ec63dfa2a6f310f6b982ddda63ce8602ef26f07a7db2699be72000d7740ad9537b58ca7522d1ac874d536f0a04a4b6006f8bacfdd30c682794a531808fe41cde68e1da5c9de35add4cb8d57ed9f5eb2e44a96386ad0e40db144e2b37b085fda45630f78aee8f2395218b9db4b7d8cc5dec55ae45eaf44fe52982953f31fa04536884ddaaa5014937552bbce3144434a4ee3221fe8c62482d40c6c0bd9cb47054a5eb0eea0cd335e0746bb0700bb38c947d059bc4e78645058f6d63272cce413dc0717cb15462d327dc57c648009dd6ed20700574d98981020850c756061b5842dcedbab753445031aeae111ac974aa51c94c5307a6fffbf320aeb04827e53631da1042877d8713eba83ff0fed938e8a1e87bed803703d962b2ffbe5e150470e3f5e364220c9207cebf4bca6579ed27eefe61720e5ec9ce151b20ae727c2369fe027bfeb0c34033143e066ea7b5a0db6d1ccea6ce165f7adb259a185123f2e1b0557c2a31e6b0d374002c8f6f9e6230e8082d1f1eb4e22cd2e2ecfbd1ebf1cf9b539a6703a629f9bf52dd29de488ad223604fbdf223c5f0064e9403fe5ef50885bad8dbadcf31fba4681bd5bea26a2fa74c6da5137d938785a7b2bdc1412056cc66109f8c217ce044d9febbf5eb30deefc23fc83fee2b05a4aa45703e32a3af3b1aaa6056154a4ce8e7f86ef0408dffa32c64d4d74c9ed36759bbf7c490a004a4b7543ae9f3ba1504bc30ea64fd4905595a811902959176ddd0e55b26e7cebd262da3eb8b661f3f98a7af8f74a4021d87a159fffc5801fc9344bb6b3f3020d132c7fad6b5d431b4d9ba3ae827d7d36ba5f624a8e97215777f6c85bb7471cf64a41dc859a7bb1aed4761face6975e61a90057a81a2fdc089823bf8379ca394b112e3b4915458ae1acaed4e7764438f77b3566459bfa857e0d994be743addb821079bcf103f4059a1a46ba7a65aff37ac46d815c0607a376c39b8937f6576738f814ca7e7d6f6c4b5a69cb1751852dc1d4ab94bb4622615b0d9db7afe279666bbf357105b46f3940673fc518694ac980a1805505a65571b2572e9c47f96cce603d68802681a911e8adabec09106e7949d0a0c100e6e88dc5ccea986a4de85c6b1d8103788fa40cf3f55fac74893a2f90cbbe605657faac500cb1a973c6b29299d2c82d572a8eeb3cb4e09068914c9cfa44ee7faa79f4c6878d655185be20c0dc783f9c7eba2cad201673fd62bbd2a6b85b47fd570ae0d4faa2b54465a0e6b7d752a322769fcb1a3185e3e4bcd13b0fea14e03632093317af705f122582c2074bb58ae0b31431dbc36506b170e25c61ded0a70ec02e372f83a7b28bb496950f28d6cd834c54e4676e688b8ad5b7d2911eae35abe5414c8fc3b02ff125b8c9e6e7fc198e11d5276d4a98109f389f6058aaa762e975a57a1b53fc497c91508c05f6c82c1eab5acfbc3b18760fdaee80d6888ac1d94fdf79b41a67cd5a0f36df2e91b33280f2c04a3b4bcc5f9748f30e6d01369caeb0b33a057308fd3a0416254da4d2a41d3ff53b291e49f9059f869222ca6bd91f1dc0910b462e6b796fff13511efa6f3110c158454f4430fa3261c0b8e5a6629e903b080dd3d52b2b4d334ee1ba504d2481a7066716c9fea6820f9fbef8a0fc79a38e229d2ddb5eae5f06cd76ba5610bd2f67a8113f2f6f441faa2a59bf3003186200e45695499628042f3fd27c05fe5d286b2adce4b301c41861943c49f6a6e690878ee4ab5025ed7248e48d3c731ed3c25fa144b0b4e69b078f189e8458d8cb4b188741a5ca30660956a301c5321d02e2ff83c8759b331b09c39da2c013a800d360ecf085c8249c792b85a0908b991d11890bd52a7a092db999c08118bee43c315a09b7bcfcd041c46e5a75acbdd57d4dc1edfb26e8c910078c74bca7064238db324e67a83c3c2272268d355c881767e8c01d3f124c511f513a053f5d1ae925d3a41e68f2f712a8d07515755429efb02ecb2f63fc6a39d81a72a7ce587ce80713ceebd5e9ce633a9fcc5c8e428e37f7734edfa5536664e4e214a8f5f975a53109f334157b2c67edbf6aa45da8930edb7925575a1b0c75ebb4f58588890cb8efe02aa50d6bbaff94ff3b0f7e8debcfa0c81dddd049b53d645751ed73acf7e6c2497cd23d951aa4dbfa970cf6026ded2302767423d5100d403326a37e3c23108a097fb167f8dd05255ca32d9980d411d68975d2d91fec9a6a7eece34753e5a15d5447d665ef00f3e7c29298fccae1dfa2e6c557cf996bbe2e9ef02d2875b3f24d74742a64608cac91a91e59fbb01e0c7d1c3e53df67b722728555ac94af60353d48b29d0c62487cc9beaa255187d462ad7ed3efcaaab20f9b5a00ecf68f1fcf1921cab6ed47d11a6a15bd6a4d4058528c0a8e60599c9de7a88c9ba58d1a0f49bb350536e10de5d61c459785a72d3730e450f3147c7ca4bbb8ad0017fbb99d70574efca3a9b29aa7fe45a261b1e5ffac91de974c95dab0b322e170c58485924529d1d9a253034316ab36f64d4ba470db57cedd59338695b680714f69f90e51146fcbcdd531db29f27e0fb6e3a0ad71cd8219e9415410d3b15aee5b7bba939704840a1c3a0b92ae21aa6a470cc8db30ee2dfa203827a588638be5edb6202d60eeab4a693b04e96fb42c49594a248a1a7892a3de34783626ca14e471c739e994fb0190331229d1994b3896b712e8a51ac100f888ea2bc769316cc9b8a60057d72fa6e924afa6d59fe079aaf1a1100dcd5587a03b7aa27044c166ddf38a459209570d2797e7bcedd05e1008ff5faf1ac37d674f349ad066cacbf649e79c52a5bfa0eca6e4542167f6f598e1e8f73a21b1ef4cb85579d26893c607b1d75ce4ed5ec631a6050f31feec970d3b89e8ae3c3c715e2dfe22d5fec44ebcd1af129b61eac9bcd01b4439e648a3b6c0412c0b672fee000e42a87822cfd7ba062c580e221c2a5c27d148aff59a078881c54acee88b6c5141b75f22477d968f08f99f139ee159e6007263a98365ee0a04c251dc727d24b36740b33e06eaa6169103371cad91ab483b2f1fd4c77bdd03e88a5c4dcf68e72effb9a629a284aafb7818118e6d02654effd79a5959e1ac26810b188892d4571c160d84473963f1f35c7f2c594a4d060844f5d96fe22e45d4a45b307cfe5d4bf39d4112141dfe41134fa8c0c2e85dc5fe2567fb00eb847b1e0403e4e832a16935c6a865b824a10354f17192a03960d58038ed4aff3dff7d2403127167a6c39f6436280995a5c69f8d48ee60704b02828f2fe2c0c477c99ad0ac110a44c721b6acb92636434d5883f711600373524d4caa30e9dc9c5d3600ceab5eda5c82135fed4859a0a059bd0bf7866d1f9d428f81909f9200e140f6722ca408f04e230ca87323b12b3de4b73f15b17408b23fa6fa03f98902c92eb6b4a2c8cbe45519c31e7934f4504fe0876920a6c4f79772936b963423266e777d4819d2960ec3f89284118d7d0481b2c303f91096d3b6c245824e02005f6732fba80b5400a1a45a16075550e94c085582832eb3b9c1605170bf4421664746a22bf8c261fb21ccae64712a3d4e7679fa862b37cc2588b2e39810acfb0f8fe98182ea3b2aacb77b086ea0b33b3635b5c783d2d14769c89ffc11bbc67da1a6e949d7b358f8aae154367383151f9c5e3f648bca6b3bc89e83e59c1270488e630a8b862995f2db6cb6b5e82e2ffcdaad20ea46b7f0772ab847ed5b178362da2b401b2bb06df814e4fc02386019d7e7f316cce32ce089d32c9e5d687ac13883923bc56d07ccce025e604cff641a5a06eb487abfb0030d8005262e4fe8214c06442ceefbd73ecc5c0eb94d91814728bc441c7c8a5ce42e04d7d7e58c2db9219b714313bc3acdd3f2cfbe8144796a61d0fd1a63ddc2832674fcb554976a99cd61970495602b44e4bb509b63f6e5a45b3f9f57ec9d23e9b60623eec5f376d98d21769be9ed93e6cde97e66da27227b35a5564521d81424c8404b64ab64c96929cec70f2fe8120d3167b31403856f0cdab7fc7e0891fbc21519cb811f127c27952b89145a4551837a1767a4624d02a384a24a02641bcb0d2ffb23569899c96a3ec85193e2c94d238522fa528978c6dd7b00a13fd11859597951caf70a56fee2bb8c88f89f953035f3bb2ba059447046e86fed304936a0f1ca23c923c7417886dcdea509913486a5d47f53dec50e6e27ff6c3952c211a08ce0adb86c0132bac2b7808cd0d0ad447ca7774b3a481134e08ed0535324c990b00e4e41ff82cfb1e63855156b8f4d6cd4e74afc8656cd59499653e28a5b4296a46a5b9a705774ce809cad25ed03517847dedd3248f1902642fe2be460c8cda137c6608691781fb54810aa7314b2c593fb8b1aa00ef5c010a243c4f53cf56236d9548f1b745765d4e025ed09770b1a084fd7358ffed73b2a4999ee3900e1b8f68e2a6848ac737146b86529323ba9acb5309b4fadc5d0fbfdddd744d7be4ca3b87dfa07eff855b4b844c440ec281ea68e4b72e666e745f52b3b59de9a4fb104624a3ec6e19022d045f2f73789431f0aa62fdfa9f3f8675a0ff31b0bcdf35c83af9b2dc77e53523d8a1d94e6ca011a2369db1d55ed93705daa10b93150aa29ee1d46dc6fe0ee48132cf9a7316584d1aa9842ab068a3cdd617186cefbf2bf32d3415bfd3d1d3ccafa79bdfb2353932493b265ec613946efb7fa10465fbd05f96787e41e2fa0e3b38a02fa79ec57decbd4d43582bf949b481234a2733ca849848142d515d029bbe70c79f8761ec240c6387e3d98007c0b9c2322703f71c87da96d06aba361021834711b496a678b3e209cc4c8473163b4f43334f6faee76d9ce85049fea4b079d58739ca7f366eb3eb427f3dcdaa5af0d49fb8c1196391ce078ad71be77e23233c67044c9936a8da6e9fb18a24b7cc6f09bd7ed3b985bfc68423d2f6f2305dcff063b6f6d54157651b9233523d02a2b26b1e330f8ae659e5993c8f25e803217391438cd7b5ace467b2df66b76c0d3e84196f9cb6c67c51da31d01a32946318e9d4376862fd18509dc40b1cedfd3aae46085d164e6ee0d8b366c1916a5052e5f6c15ebe10168771ae259694265a849a5a558f209c7ce93d64bc9a15902b010c51617a282ecc8611d980276a30437c097815e7ed4b606bf563b9ba4f99f5f93a073e47d5a5aba8939ae59e6393bfcbfe53c9a765fb323fbc97cee46ed5da69ee26b196c5728e984bd7c74ee5336479228e923380a7539c4c1410a02a3b4a0b42aee728aab547169ebd9085f3e50ba3d3b4d5138dc12a34ee545d273d6e981d6de63062c9baab25166bc54152b6c994fdb8f920086bc5cb4175892df37ef5b16241c5a97dc3cee84c316de78fde71dae62c1db21cf724bcf1c98e1c9f36446b446d2f22210deda04ca27fd4a8a5ecdce352adfb61bf716b20bf94a6d03dd614bea74f5a4ae957a2cc8fdd1b8be3d90f8fbff95ee13ed8347357a4473d036b48598dc51f46df02143484180bf77d8ed5d17c20b67d7211b4a768cba88e74c9eb4e3ce5318dda5eec13ab95fd40be1dd302d0d72c35d05f8b447b64348e5e8d660f79462a7d0c057b00439ea5a31c820b2676f51d421f4018a80a12d6768ac1a1b09742c51da934c8fdd8a76ca257adcbbead9355dea962507a527e3cb400a9b735702206a3ac982d3cf25497dcafe5f07fc15ea616b7ba46d16ecbc14ee650b8a5dfd6011ce75aa7b52db1f3d57d487a264c23a14cfbc7d5297806a16fff983dc1cf6a20550a6e907184289a63044780a1c5750103d8daf34f329825fa67cbeee3f171d2d8dfdf7f35c69360bdbecf9af43ccf6ece0e7e867f17a8dca997654b39ad918b90a3c8eb26b891939a0d417ec8492944f53fd317c7c441e773ccab1d422bec50eb0f864c836086484eb32d1e8824c3c2cdcffbd6ae38a9e20e45e58e4c7ee4bff5513e041265912334b0b313a2832c557cd9bf39af1d3ff36a73af0f5aadce248b978389dc34251dd9f73471540da4ec1e7395e29402e54d362a4b49c86ffc0c4f9fde39ded7e5af372842247f44a271d8f6508505d0c0defd44f6267cfd269852a57f35adc0a52e8043aa4b7a318806c53107ef2a0fac4ffb53a8ee6fb7820a1f057113f51dea1897fde7745c513256502ef48f5471e09d87f8da74d40f1f8c25f490ce5539855bf96c5b705cf333bc8eff15740ace21b226756b500d832705449074669372f97bc919805178a06c6651b4953552f6617eec2500f81b5fef22b0db3d6da17ebfbc128b0c33a6b6e47c2bc66080bf842d368b9d5080d660b7c39a0d48fbf148546bff4bf3ede3c86056a9b2842bef02604090e0ad0f27e0de40b6d1901de1051b5b0f56e265cc4f1b942e0fc1b64ed413e414d4064102fa46ebe6b3e35214189f43c2ec5747c159be6e039d0498a2abc597bec78f846b7d0ef857827ac3695bb5e178ee06d0185fd566e3ad5aadc9d5e8ffd4beb3f17e4971ff2b87c48ff425cb0b1502909aa159743ebe688f18a5fa561884ad8b98f7d37f12ee8eeb7985f01146215ec05675638fb9345aa7dda4eb17e41729561197d86030b8b956a1c7e269e7c0708578314250815d3cf3dafc9b15aa1da5c73e9fe597f9eeb9e76e43e092d9b0066d9527fa33bfcd356768a79349cbf3b23a792831547c8672400adb37484e5a072d5ba880bd48f5bd3fbe692f914d80ba2b1b2786f2614bdcd338ce8d68279aa4e74c9f7881a9cb4889cd3ffca73ca57d96a2756ba0ed18ae419b49bb72a1110fc50cf5a4977789062cf311f6818d7561a67b055e3480c716b9b0f4a5b399f5a3395afa4fe37944ef64937a38944ced3211d08d2e2889bb8751b9ed8fd528e22ba514fb098f6f13848a9b02b7434a4eb4ef417b5da012b67b091715e3bdaf437285791bf171e7514c3d0521f105a1ce6607761455049c27896a1447ad41a54a82b57f54ede2b1a44f32af81a4273836e5550d5ac90e20524cec7b23656964184564b4111807cefa413a3d714607463fc47f2ac284b319d623bb00517e3feec4193cd0fe743a52d9204ad7db96ffc3b77c1cc798dbf0b512174fe67f750c4eace3cd072e7065a2faa089c6463a207aefa88c71a1cd9c04160a3f538e8feaa633fdb738c629e21fc0a0fdc03af414c3fd76645c66731ea0d44aaf894554894ec74ac338da822cccd707a5ef898102e50c00c03b9af9185f017c9cc98de5ba0cfd7b85ecb59a7000d477036596c955f845f7fe4f61e05414ba5b61161adcc1a2e7a16c607fd182b7cc85a2e24e4c90c45a4dc05af4858e2628c166593014b3931c889f022b3e8e6220d9a80ae62ffad889c7f7bba7a55bffc1b9b9f316794c7f7b63b08b56348b678f4c9e3d1a1f7b5b9dea2d908b1975e1115495aad7d9c61d5bb3b3743be8f504a148af15afe9f47106f8e416d8f0a21c96ead4e77c900bc6f479b2e26360fc9aee7de2fd4a4c0e2c778ceb6dff985a52e8755c8d512457fe64fd2ebb30333ab01c1f967b61eff923e2f7307aaea26210afafd51b121a6681bf774b29b20409670beeccdedd450d66fafb4da08b4a668eb2534a8c4d0bff2bdf30c6a1d7f0eb4d9fe6e109d4d0557c51f87714a2782184ef141271ce07797e2dd0cbc2efd248ea69ffa8511579245391438dd909715a2a8f0a2fe1980ec28f3b81670433a6fdc243dfc1c1d80729d0bfdd7d0ecb474513c7977512f70873c63cac28c4fbf55040188d778b7d695f3bbd2d209866bcf4cceeda1c92f7074e143fc07896485d831718f10c7559978a2212f57115a7e6800e73344793bad1f25a167d99041a7a8e613df216854b479a1ad9e95c57af89cf3dfb0ac987e1f92ae24d3e7653e9000d4d7a77339b77dd1ed9b2de6b04c326e57100be641f19d684b24e178ea99ee7c8cef80fe2ea770eeb02bf5e50e7cc41899f238dae36dbae1a38182897ed375b476d9bd427a676d8fae99cb2ade5c7d2dd8f26be2bfb9da14db06074a02d3def15d2348b3b7155f095f7be75a030da7c036b77a2e1cb06d391b5a010544348cc70ec8a279d8cfb1ac8d207507befd8a38f711167bbd8691683140879e0128639d6d774d3fcdd1cfd3ee401c4a67539c188db54214b3d8fa893700500741eae20702faab1844a1a1206f62a358fc7f5bf233e106a2ed34f9b266ea5335ebea6d6c64fa80ad325fce025f5e3b228f07699d58f0a74ff6e36354f1da198709b0bd42777a092f8939e7338a0980d941dbe0aee5c15d057174b758f2f3f7498ef8745e6670007df7ec29dbd8b00e4c648e7aa7f28251cda6aa60ecaaea6a8ea361bed2f86144b6eb4de9f3e7e8caf052d3f0ff0b7f417b5df71f0181b89165fa101963c9b026e004dbf6bc109c5b0d061e0d9e9cb2dfd375d426a2fc2c27f0839143b5dba3c7e8a0e160588ae9cfdf892333cb7c0ff3258e53c255df3823de482dc76ee6ccc445a85ae134bac7f55a7f4e1c4eec0fb9d3f53a86850a56f5b9bfe13d84340f3683b61325c5dc7676ee222b40c4abcd013f5b425da111b9ca8425062d87c9454370e7d078dd4ea582285ddbb1487fdaa787d9202dcf2392861cc49ac297d8fb5fc18b0d99f88074a0958ec82777c3a18d19977300c350ae6274274876db196c690d13320435d689c4b2518d96b3b06822b557499456af5d21602b2c348e7ea9b3d44b82992c6a932772c24bb0da5d262983dce65c687d0ebd47f8ba1b63cd3be4e9eb064661c93882714306fe5653dbf6c2ba7e54769433a50a9befd04c705f4b7627f6d0c7b279765e8e116e16e8ed6c67f39d076a08e74562c83a1664403d5e82ec4e2c071d0c7dced77c2b9a20</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="showcase" scheme="https://panda0s.top/categories/showcase/"/>
    
    
    <category term="android" scheme="https://panda0s.top/tags/android/"/>
    
    <category term="reverse" scheme="https://panda0s.top/tags/reverse/"/>
    
    <category term="frida" scheme="https://panda0s.top/tags/frida/"/>
    
    <category term="tool" scheme="https://panda0s.top/tags/tool/"/>
    
  </entry>
  
  <entry>
    <title>o-llvm: Control Flow Flattening</title>
    <link href="https://panda0s.top/2021/03/15/o-llvm-Control-Flow-Flattening/"/>
    <id>https://panda0s.top/2021/03/15/o-llvm-Control-Flow-Flattening/</id>
    <published>2021-03-15T05:04:32.000Z</published>
    <updated>2021-03-16T09:20:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="o-llvm-分析：-控制流平坦化源码分析"><a href="#o-llvm-分析：-控制流平坦化源码分析" class="headerlink" title="o-llvm 分析： 控制流平坦化源码分析"></a>o-llvm 分析： 控制流平坦化源码分析</h1><p>这是本人关于 o-llvm 分析系列文章的第一篇文章，网上已经有很多关于 o-llvm 相关的分析文章了，我写这一系列的文章只是为了督促我仔细分析 o-llvm 的每一个角落，并加深记忆。</p><p>o-llvm 与 llvm 什么关系？ 这个可能是很多菜鸡搞不清楚的问题，我曾经也搞不清楚，一直以为“混淆” 是 llvm 自带的功能，殊不知，ollvm 只是一个基于 llvm 框架实现的插件，llvm 是一套前后端完善的编译框架。</p><p>本篇文章分析的代码相对路径为</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">lib<span class="hljs-regexp">/Transforms/</span>Obfuscation/Flattening.cpp<br></code></pre></td></tr></table></figure><h2 id="FunctionPass"><a href="#FunctionPass" class="headerlink" title="FunctionPass"></a>FunctionPass</h2><p>o-llvm 基于 llvm pass 模块实现，llvm pass 可以理解成 llvm 的插件，o-llvm 的控制流平坦化实现是基于 <code>FunctionPass</code> ，llvm 会对目标程序中的每一个函数调用 <code>FunctionPass</code>。为什么基于 FunctionPass 来实现控制流平坦化呢？因为 o-llvm 控制流平坦化最小粒度是函数，即以函数为单位展开混淆。<code>FunctionPass</code> 有机会处理目标代码的每一个函数。</p><p>关于 pass 的编写，我会另外开一篇文章来记录，这篇文章就简单的提一下 FunctionPass 的编写。</p><p>编写 FunctionPass 需要继承 <code>FunctionPass</code>类并实现 <code>runOnFunction</code> 函数，如下代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">namespace</span> &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">DummyPass</span> :</span> <span class="hljs-keyword">public</span> FunctionPass &#123;<br>        <span class="hljs-keyword">public</span>:<br>            <span class="hljs-keyword">static</span> <span class="hljs-keyword">char</span> ID;<br>            DummyPass() : FunctionPass(ID) &#123;&#125;<br>            <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">runOnFunction</span><span class="hljs-params">(Function &amp;F)</span> <span class="hljs-keyword">override</span></span>;<br>    &#125;;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">DummyPass::runOnFunction</span><span class="hljs-params">(Function &amp;F)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">// We did not alter the IR</span><br>&#125;<br></code></pre></td></tr></table></figure><p>注册 FunctionPass</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// Register the pass with llvm, so that we can call it with dummypass</span><br><span class="hljs-keyword">char</span> DummyPass::ID = <span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">static</span> RegisterPass&lt;DummyPass&gt; <span class="hljs-title">X</span><span class="hljs-params">(<span class="hljs-string">&quot;dummypass&quot;</span>, <span class="hljs-string">&quot;Example LLVM pass printing each function it visits&quot;</span>)</span></span>;<br></code></pre></td></tr></table></figure><h2 id="Flattening-runOnFunction"><a href="#Flattening-runOnFunction" class="headerlink" title="Flattening::runOnFunction"></a>Flattening::runOnFunction</h2><p>Function pass 注册后，llvm 会对每一个函数调用 <code>runOnFunction</code>, llvm 中用 <code>llvm::Function</code> 类代表函数，函数单位内的所有信息都可以通过该类的实例来获取，例如基本块。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Flattening::runOnFunction</span><span class="hljs-params">(Function &amp;F)</span> </span>&#123;<br>  Function *tmp = &amp;F;<br>  <span class="hljs-comment">// Do we obfuscate</span><br>  <span class="hljs-keyword">if</span> (toObfuscate(flag, tmp, <span class="hljs-string">&quot;fla&quot;</span>)) &#123; <span class="hljs-comment">// toObfuscate 判断该函数是否要fla</span><br>    <span class="hljs-keyword">if</span> (flatten(tmp)) &#123;<br>      ++Flattened;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面这段代码主要调用了 <code>toObfuscate</code> 和 <code>flatten</code>，前者用于判断是否需要对当前处理的函数混淆，后者是控制流平坦化的主要逻辑。</p><h3 id="toObfuscate-判断是否混淆"><a href="#toObfuscate-判断是否混淆" class="headerlink" title="toObfuscate 判断是否混淆"></a>toObfuscate 判断是否混淆</h3><p><code>toObfuscate</code> 判断当前操作的函数是否要进行某种混淆（fla, sub, bcf）</p><p>o-llvm 开启混淆有两种方法：</p><pre><code>1. 命令行参数指定全局混淆2. Functions-annotations 指定局部混淆</code></pre><p>局部混淆 annotations  修饰方法例子如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">func</span><span class="hljs-params">()</span> __<span class="hljs-title">attribute</span><span class="hljs-params">((__annotate__((<span class="hljs-string">&quot;fla&quot;</span>))))</span></span>;<br></code></pre></td></tr></table></figure><p>llvm 中用 <code>readAnnotate(f)</code> 来获取函数的 <code>annotations </code></p><p><code>toObfuscate</code> 先判断 annotations 标志，再判断全局标记。</p><h2 id="flatten-函数"><a href="#flatten-函数" class="headerlink" title="flatten 函数"></a>flatten 函数</h2><p>flatten 函数的代码量比较大，因此我按照逻辑顺序拆开代码分析。</p><h3 id="1-将原函数的-SwitchInst-语句转换成-If"><a href="#1-将原函数的-SwitchInst-语句转换成-If" class="headerlink" title="1: 将原函数的 SwitchInst 语句转换成 If"></a>1: 将原函数的 SwitchInst 语句转换成 If</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// Lower switch</span><br>FunctionPass *lower = createLowerSwitchPass();<br>lower-&gt;runOnFunction(*f);<br></code></pre></td></tr></table></figure><p>createLowerSwitchPass 也是一个 FunctionPass，它的功能是将指定 function 中的 <code>SwitchInst</code> 转换成 if 。</p><p>为什么要把原始代码中的 switch 转换成 if 呢？ 这是为了实现多次混淆，每次混淆都能增加大量的基本块。</p><h3 id="2-保存原始函数的基本块列表"><a href="#2-保存原始函数的基本块列表" class="headerlink" title="2:  保存原始函数的基本块列表"></a>2:  保存原始函数的基本块列表</h3><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs lisp">// Save all original BB<br>for (<span class="hljs-name">Function</span>:<span class="hljs-symbol">:iterator</span> i = f-&gt;begin()<span class="hljs-comment">; i != f-&gt;end(); ++i) &#123;</span><br>  BasicBlock *tmp = &amp;*i<span class="hljs-comment">;</span><br>  origBB.push_back(<span class="hljs-name">tmp</span>)<span class="hljs-comment">;</span><br><br>  BasicBlock *bb = &amp;*i<span class="hljs-comment">; </span><br>  if (<span class="hljs-name">isa&lt;InvokeInst&gt;</span>(<span class="hljs-name">bb-&gt;getTerminator</span>())) &#123;<br>    return false<span class="hljs-comment">;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这段代码中我比较疑惑的是如果当前处理的函数中有一个基本块以 Invoke 指令结尾，那么该函数无法混淆。</p><h3 id="3-处理函数入口基本块"><a href="#3-处理函数入口基本块" class="headerlink" title="3: 处理函数入口基本块"></a>3: 处理函数入口基本块</h3><p>函数入口基本块，即函数的第一个基本块，这个基本块比较特殊。控制流平坦化，需要添加一个类似 while - switch 的结构，入口基本块需要特殊处理，使控制流进入 while 循环体。</p><p>入口基本块的结尾指令不能是条件跳转，如果是条件跳转指令，需要拆分将其拆分成两个基本块。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// Remove first BB</span><br>origBB.erase(origBB.begin());<br><br><span class="hljs-comment">// Get a pointer on the first BB</span><br>Function::iterator tmp = f-&gt;begin();  <span class="hljs-comment">//++tmp;</span><br><br>BasicBlock *insert = &amp;*tmp;<br><br><span class="hljs-comment">// If main begin with an if</span><br>BranchInst *br = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">if</span> (isa&lt;BranchInst&gt;(insert-&gt;getTerminator())) &#123;<br>  br = cast&lt;BranchInst&gt;(insert-&gt;getTerminator());<br>&#125;<br><br><span class="hljs-keyword">if</span> ((br != <span class="hljs-literal">NULL</span> &amp;&amp; br-&gt;isConditional()) ||<br>    insert-&gt;getTerminator()-&gt;getNumSuccessors() &gt; <span class="hljs-number">1</span>) &#123;<br>  BasicBlock::iterator i = insert-&gt;end(); <span class="hljs-comment">// BasicBlock::iterator 遍历指令的</span><br> --i;<br><br>  <span class="hljs-keyword">if</span> (insert-&gt;size() &gt; <span class="hljs-number">1</span>) &#123;<br>    --i;<br>  &#125;<br><br>  BasicBlock *tmpBB = insert-&gt;splitBasicBlock(i, <span class="hljs-string">&quot;first&quot;</span>); <span class="hljs-comment">// 拆分成两个基本块，方便后面处理</span><br>  origBB.insert(origBB.begin(), tmpBB); <br>&#125; <br><br><span class="hljs-comment">// Remove jump</span><br>insert-&gt;getTerminator()-&gt;eraseFromParent();<span class="hljs-comment">// 删除最后一条指令</span><br><br></code></pre></td></tr></table></figure><h3 id="4-创建-switch-变量"><a href="#4-创建-switch-变量" class="headerlink" title="4: 创建 switch 变量"></a>4: 创建 switch 变量</h3><p>o-llvm 利用 while - switch 重新组合原始基本块，switch 需要 switch var，o-llvm 中的 switch var 是基本块的随机数编号，o-llvm 为每一个基本块用随机数编号。重新组合基本块和类似模式如下:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br><span class="hljs-keyword">switch</span>(var)<br><span class="hljs-keyword">case</span> <span class="hljs-number">0x8123123</span>:<br>BB1;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">0x8799882</span>:<br>BB2;<br><span class="hljs-keyword">break</span>;<br>.......<br>&#125;<br></code></pre></td></tr></table></figure><p>创建 switchVar 变量</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs lisp">// Create switch variable and set as it<br>switchVar =<br>    new AllocaInst(<span class="hljs-name">Type</span>:<span class="hljs-symbol">:getInt32Ty</span>(<span class="hljs-name">f-&gt;getContext</span>()), <span class="hljs-number">0</span>, <span class="hljs-string">&quot;switchVar&quot;</span>, insert)<span class="hljs-comment">; // 在first BB插入switchVar</span><br>new StoreInst(<br>    ConstantInt:<span class="hljs-symbol">:get</span>(<span class="hljs-name">Type</span>:<span class="hljs-symbol">:getInt32Ty</span>(<span class="hljs-name">f-&gt;getContext</span>()),<br>                     llvm:<span class="hljs-symbol">:cryptoutils-&gt;scramble32</span>(<span class="hljs-number">0</span>, scrambling_key)),<br>    switchVar, insert)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p><code>AllocaInst</code> 在栈中分配变量， <code>ConstantInt::get</code> 获取指定类型的常量数据，用于给分配的变量赋初值。</p><p><code>insert</code> 是插入目标函数第一个基本块，下同。</p><h3 id="5-创建主循环"><a href="#5-创建主循环" class="headerlink" title="5: 创建主循环"></a>5: 创建主循环</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// Create main loop</span><br>loopEntry = BasicBlock::Create(f-&gt;getContext(), <span class="hljs-string">&quot;loopEntry&quot;</span>, f, insert);<br>loopEnd = BasicBlock::Create(f-&gt;getContext(), <span class="hljs-string">&quot;loopEnd&quot;</span>, f, insert);<br></code></pre></td></tr></table></figure><p><code>BasicBlock::Create</code> 会在 <code>insert</code> 之前插入基本块，若不指定 insert，则默认插入到函数的尾部，我们想要的实际效果是：</p><p>insert -&gt; loopEntry，然而当前基本块的关系是 loopEntry -&gt; insert, 因此要调整两者的位置。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 调整 insert 与 loopEntry 之间的关系</span><br>insert-&gt;moveBefore(loopEntry);<br>BranchInst::Create(loopEntry, insert); <span class="hljs-comment">// insert -&gt; loopEntry</span><br>BranchInst::Create(loopEntry, loopEnd); <span class="hljs-comment">// loopEnd -&gt; loopEntry</span><br></code></pre></td></tr></table></figure><h3 id="6-创建-switch"><a href="#6-创建-switch" class="headerlink" title="6: 创建 switch"></a>6: 创建 switch</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// load switchVar 变量</span><br>load = <span class="hljs-keyword">new</span> LoadInst(switchVar, <span class="hljs-string">&quot;switchVar&quot;</span>, loopEntry);<br><br><span class="hljs-comment">// 创建 switch default 基本块， default -&gt; loopEnd </span><br>BasicBlock *swDefault =<br>    BasicBlock::Create(f-&gt;getContext(), <span class="hljs-string">&quot;switchDefault&quot;</span>, f, loopEnd);<br>BranchInst::Create(loopEnd, swDefault);<br><br><span class="hljs-comment">// 创建 SwitchInst 指令</span><br>switchI = SwitchInst::Create(&amp;*f-&gt;begin(), swDefault, <span class="hljs-number">0</span>, loopEntry);<br><br><span class="hljs-comment">// 设置 SwitchVar 变量</span><br>switchI-&gt;setCondition(load);<br></code></pre></td></tr></table></figure><h3 id="7-将原始基本块放入-switch"><a href="#7-将原始基本块放入-switch" class="headerlink" title="7: 将原始基本块放入 switch"></a>7: 将原始基本块放入 switch</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// Put all BB in the switch</span><br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">vector</span>&lt;BasicBlock *&gt;::iterator b = origBB.begin(); b != origBB.end();<br>     ++b) &#123;<br>  BasicBlock *i = *b;<br>  ConstantInt *numCase = <span class="hljs-literal">NULL</span>;<br><br>  <span class="hljs-comment">// Move the BB inside the switch (only visual, no code logic)</span><br>  i-&gt;moveBefore(loopEnd);<br><br>  <span class="hljs-comment">// Add case to switch</span><br>  numCase = cast&lt;ConstantInt&gt;(ConstantInt::get(<br>      switchI-&gt;getCondition()-&gt;getType(),<br>      llvm::cryptoutils-&gt;scramble32(switchI-&gt;getNumCases(), scrambling_key)));<br>  switchI-&gt;addCase(numCase, i);<br>&#125;<br></code></pre></td></tr></table></figure><p>到目前为止，基本块只是放入到了 switch 里面，还需要进一步处理。</p><p>这段代码可以理解成获取随机数，不会重复</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">llvm::cryptoutils-&gt;scramble32(switchI-&gt;getNumCases(), scrambling_key)<br></code></pre></td></tr></table></figure><p>从这段代码来看，switch var 是在添加 case 的时候生成的，整个代码中都没有维护 switch var 与 基本块关系的变量，这是因为 o-llvm 利用 llvm 本身来维护switch var 值与基本块的对应关系。<code>SwitchInst.findCaseDest</code> 函数可以获取 Switch 中指定基本块的 case 常量。</p><h3 id="8-重新修正基本块之间的关系"><a href="#8-重新修正基本块之间的关系" class="headerlink" title="8: 重新修正基本块之间的关系"></a>8: 重新修正基本块之间的关系</h3><p>上一步，o-llvm 将 <code>oriBB</code>里面的所有基本块都添加到 switch 中，并为每一个基本块生成 case 对应的值，接下来就是调整基本块之间的关系。</p><p>主要有3类基本块:</p><ol><li>无条件跳转结尾</li><li>有条件跳转结尾</li><li>RET 指令结尾</li></ol><p>我们分别来看这 3 类处理的过程，这段代码是循环中抽离出来的，<code>i</code> 代表当前修正的基本块。</p><h4 id="1-无条件跳转结尾的基本块"><a href="#1-无条件跳转结尾的基本块" class="headerlink" title="1. 无条件跳转结尾的基本块"></a>1. 无条件跳转结尾的基本块</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// If it&#x27;s a non-conditional jump</span><br><span class="hljs-keyword">if</span> (i-&gt;getTerminator()-&gt;getNumSuccessors() == <span class="hljs-number">1</span>) &#123; <span class="hljs-comment">// 后继基本块数量为 1</span><br>  <span class="hljs-comment">// 获取后继基本块，并删除跳转跳转指令</span><br>  BasicBlock *succ = i-&gt;getTerminator()-&gt;getSuccessor(<span class="hljs-number">0</span>);<br>  i-&gt;getTerminator()-&gt;eraseFromParent(); <span class="hljs-comment">// 删除结尾跳转指令</span><br><br>  <span class="hljs-comment">// 获取后继基本块对应的 case 值</span><br>  numCase = switchI-&gt;findCaseDest(succ);<br><br>  <span class="hljs-comment">// 如果没有找到后继基本块对应的 case 值，default </span><br>  <span class="hljs-keyword">if</span> (numCase == <span class="hljs-literal">NULL</span>) &#123;<br>    numCase = cast&lt;ConstantInt&gt;(<br>        ConstantInt::get(switchI-&gt;getCondition()-&gt;getType(),<br>                         llvm::cryptoutils-&gt;scramble32(<br>                             switchI-&gt;getNumCases() - <span class="hljs-number">1</span>, scrambling_key)));<span class="hljs-comment">// 获取 default 的 case 值</span><br>  &#125;<br>  <span class="hljs-comment">// 更新 switchVar 的值，变跳转到 loopEnd</span><br>  <span class="hljs-keyword">new</span> StoreInst(numCase, load-&gt;getPointerOperand(), i);<br>  BranchInst::Create(loopEnd, i); <span class="hljs-comment">// 跳转到loopEnd</span><br>  <span class="hljs-keyword">continue</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-有条件跳转结尾"><a href="#2-有条件跳转结尾" class="headerlink" title="2. 有条件跳转结尾"></a>2. 有条件跳转结尾</h4><p>对于一个条件跳转的基本块，一般两个后继。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// If it&#x27;s a conditional jump</span><br><span class="hljs-keyword">if</span> (i-&gt;getTerminator()-&gt;getNumSuccessors() == <span class="hljs-number">2</span>) &#123;<br>    <span class="hljs-comment">// 分别获取两个后继的 case 值</span><br>    ConstantInt *numCaseTrue =<br>        switchI-&gt;findCaseDest(i-&gt;getTerminator()-&gt;getSuccessor(<span class="hljs-number">0</span>));<br>    ConstantInt *numCaseFalse =<br>        switchI-&gt;findCaseDest(i-&gt;getTerminator()-&gt;getSuccessor(<span class="hljs-number">1</span>));<br><br>    <span class="hljs-comment">// 后继是否为 default case</span><br>    <span class="hljs-keyword">if</span> (numCaseTrue == <span class="hljs-literal">NULL</span>) &#123;<br>        numCaseTrue = cast&lt;ConstantInt&gt;(<br>            ConstantInt::get(switchI-&gt;getCondition()-&gt;getType(),<br>                             llvm::cryptoutils-&gt;scramble32(<br>                                 switchI-&gt;getNumCases() - <span class="hljs-number">1</span>, scrambling_key)));<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (numCaseFalse == <span class="hljs-literal">NULL</span>) &#123;<br>        numCaseFalse = cast&lt;ConstantInt&gt;(<br>            ConstantInt::get(switchI-&gt;getCondition()-&gt;getType(),<br>                             llvm::cryptoutils-&gt;scramble32(<br>                                 switchI-&gt;getNumCases() - <span class="hljs-number">1</span>, scrambling_key)));<br>    &#125;<br><br>    <span class="hljs-comment">// 创建 SelectInst</span><br>    BranchInst *br = cast&lt;BranchInst&gt;(i-&gt;getTerminator());<br>    SelectInst *sel =<br>        SelectInst::Create(br-&gt;getCondition(), numCaseTrue, numCaseFalse, <span class="hljs-string">&quot;&quot;</span>,<br>                           i-&gt;getTerminator());<br><br>    <span class="hljs-comment">// 删除 terminator （结尾跳转指令）</span><br>    i-&gt;getTerminator()-&gt;eraseFromParent();<br><br>    <span class="hljs-comment">// 更新 switchVar 的值，变跳转到 loopEnd</span><br>    <span class="hljs-keyword">new</span> StoreInst(sel, load-&gt;getPointerOperand(), i);<br>    BranchInst::Create(loopEnd, i);<br>    <span class="hljs-keyword">continue</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-RET-指令结尾"><a href="#3-RET-指令结尾" class="headerlink" title="3. RET 指令结尾"></a>3. RET 指令结尾</h4><p>这个就比较简单了，RET 指令不需要重新回到 loop，所以不用做任何处理</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// Ret BB</span><br><span class="hljs-keyword">if</span> (i-&gt;getTerminator()-&gt;getNumSuccessors() == <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">continue</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="9-修复-stack"><a href="#9-修复-stack" class="headerlink" title="9: 修复 stack"></a>9: 修复 stack</h3><p>o-llvm 控制流平坦化的最后一步是 <code>fixStack(Function *f)</code> 这一步是处理局部变量分配问题。</p><p>主要处理两类变量:</p><pre><code>1. PHI Node2. 非入口基本块中分配的局部变量</code></pre><p>对于 PHI Node，fixStack 直接简单的粗暴的调用 <code>DemotePHIToStack</code> 将 PHI Node 变量 Entry 中分配</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">DemotePHIToStack(tmpPhi.at(i), f-&gt;begin()-&gt;getTerminator());<br></code></pre></td></tr></table></figure><p>对于非 Entry 基本块中申请的局部变量，若该变量在其它基本块中还有使用的话，需要将该变量提到 Entry 中分配</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">DemoteRegToStack(*tmpReg.at(i), f-&gt;begin()-&gt;getTerminator());<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>o-llvm 控制流平坦化的原理非常简单，只是简单的将原始基本块插入到 switch 结构中，并删除原始基本块之间的跳转指令。然而实际案例中，为何还原 o-llvm 控制流平坦化如此困难？</p><p>要回答这个问题，我们首先来回到 <code>flatten</code> 的第一步，将 switch 转换成二分if。该过程主要是通过调用 llvm 里面的一个 FunctionPass 来实现。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// Lower switch</span><br>FunctionPass *lower = createLowerSwitchPass();<br>lower-&gt;runOnFunction(*f);<br></code></pre></td></tr></table></figure><p><code>LowerSwitchPass</code> 将 switch 指令转换成等价的 if 实现，这极大的增加基本块的数量，当下一次对这个函数混淆的时候，将产生更多的 case。</p><p>重复对某个函数执行 <code>flatten</code> ，基本块的数量将越来越多，其中大量的基本块都是为实现二分 if 而存在，这使得识别原始基本块十分困难。</p><p>最后，flatten 执行完后，可能还有其它的优化 pass 对混淆过的函数进行处理，进一步打乱一些固定的特征模式。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://llvm.org/docs/WritingAnLLVMPass.html#writing-an-llvm-pass-basiccode">https://llvm.org/docs/WritingAnLLVMPass.html#writing-an-llvm-pass-basiccode</a></p><p><a href="https://osterlund.xyz/posts/2017-11-28-LLVM-pass.html">https://osterlund.xyz/posts/2017-11-28-LLVM-pass.html</a></p><p><a href="https://www.zhihu.com/question/49642237">https://www.zhihu.com/question/49642237</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;o-llvm-分析：-控制流平坦化源码分析&quot;&gt;&lt;a href=&quot;#o-llvm-分析：-控制流平坦化源码分析&quot; class=&quot;headerlink&quot; title=&quot;o-llvm 分析： 控制流平坦化源码分析&quot;&gt;&lt;/a&gt;o-llvm 分析： 控制流平坦化源码分析&lt;/</summary>
      
    
    
    
    <category term="obfuscator" scheme="https://panda0s.top/categories/obfuscator/"/>
    
    
    <category term="obfuscator" scheme="https://panda0s.top/tags/obfuscator/"/>
    
    <category term="llvm" scheme="https://panda0s.top/tags/llvm/"/>
    
  </entry>
  
  <entry>
    <title>Decaf codegen based on LLVM</title>
    <link href="https://panda0s.top/2021/03/04/Decaf-codegen-based-on-LLVM/"/>
    <id>https://panda0s.top/2021/03/04/Decaf-codegen-based-on-LLVM/</id>
    <published>2021-03-04T06:59:56.000Z</published>
    <updated>2021-03-15T05:19:13.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Decaf-编译器代码生成"><a href="#Decaf-编译器代码生成" class="headerlink" title="Decaf 编译器代码生成"></a>Decaf 编译器代码生成</h1><p>记录一下使用 llvm api 实现 Decaf 编译器 codegen 过程中的代码片段以及一些基础语法结构实现过程。</p><h2 id="Int-与-Bool"><a href="#Int-与-Bool" class="headerlink" title="Int 与 Bool"></a>Int 与 Bool</h2><p>llvm 里面 Bool 类型其实也是一个 Integer，只不过长度为 1bit.<br>例如如下代码可以判断 xxxx 是否为 bool 变量。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">if</span> (xxxx-&gt;getType()-&gt;isIntegerTy() &amp;&amp; xxxx-&gt;getType()-&gt;getIntegerBitWidth() == <span class="hljs-number">1</span>)<br>...<br></code></pre></td></tr></table></figure><h2 id="变量的定义与初始化"><a href="#变量的定义与初始化" class="headerlink" title="变量的定义与初始化"></a>变量的定义与初始化</h2><p>局部变量</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">llvm::Value<span class="hljs-operator"> * </span>variable = Builder.<span class="hljs-constructor">CreateAlloca(<span class="hljs-params">getLLVMType</span>(<span class="hljs-params">getType</span>()</span>), <span class="hljs-number">0</span>, get<span class="hljs-constructor">Name()</span>);<br></code></pre></td></tr></table></figure><p>全局变量</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-literal">new</span> llvm<span class="hljs-type">::GlobalVariable</span>(*TheModule, ty, <span class="hljs-literal">false</span>, <br>llvm<span class="hljs-type">::GlobalVariable</span><span class="hljs-type">::CommonLinkage</span>, decafGetInitalizer(ty), Name);<br></code></pre></td></tr></table></figure><p><code>CreateAlloca</code> 与 <code>GlobalVariable</code> 申请变量，返回的是变量的<code>指针</code>，处理这些变量时，需要用 <code>load</code> 和 <code>store</code> 来将这些变量的值载入或保存。 </p><p>注意，llvm 中函数的参数 <code>llvm::Argument</code>的类型是真实类型，不是一个指针，不能赋值（store），所以在最好在函数入口时将参数转存到局部变量。</p><h2 id="数组的定义与引用"><a href="#数组的定义与引用" class="headerlink" title="数组的定义与引用"></a>数组的定义与引用</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 定义一个全局数组</span><br>llvm::ArrayType * arrayType = llvm::ArrayType::get(ty, field_size-&gt;getArraySize());<br>llvm::Constant  *  initializer = llvm::ConstantAggregateZero::get(arrayType);<br>llvm::Value * arr = llvm::GlobalVariable(*TheModule, arrayType, <span class="hljs-literal">false</span>, llvm::GlobalVariable::CommonLinkage, initializer, Name);<br><br><span class="hljs-comment">// 引用数组</span><br>llvm::Value * lvalue = Builder.CreateGEP(arr, &#123;Builder.getInt32(<span class="hljs-number">0</span>), idx&#125;, <span class="hljs-string">&quot;arr&quot;</span>); <span class="hljs-comment">//idx&#x27;s type: llvm::Value *</span><br>Builder.CreateStore(Builder.getInt32(<span class="hljs-number">0</span>), lvalue); <span class="hljs-comment">// arr[idx] = 0</span><br><br></code></pre></td></tr></table></figure><p>CreateGEP 生成的是 getelementptr 指令，这个指令有两个 index，很容易让人误解。这是一个地址计算指令，它不仅能计算数组某元素的偏移，还可以计算结构体中某字段的偏移。</p><p>第一个 index 是传入的顶层指针作为数组的 index</p><p>第二个 index 是单个数据类型内部的偏移 index</p><p>例如下面这段代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">S</span>&#123;</span><br><span class="hljs-keyword">int</span> a;<br><span class="hljs-keyword">int</span> b;<br>&#125;<br><br>S * p = <span class="hljs-keyword">new</span> S();<br>p[<span class="hljs-number">0</span>].a = <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>p 是一个指针，可以当作数组索引，该索引就是 index1；p 指向的结构体是一个 Struct，内部又可以索引（索引a或b字段），这就是第二个索引。</p><p>用 CreateGEP 计算数组中某个元素的地址，只需要将第一个索引设置为0，第二个索引设置为真实下标即可，也就是传入 {Builder.getInt32(0), idx}</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>llvm 中定义函数签名与定义函数代码的过程是分开的，所以函数签名定义后，并不需要立即实现，并且可以在链接阶段静态链接到其它的库。</p><p>声名函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">llvm::Value * <span class="hljs-title">codegen</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">// codegen for method declare</span><br>llvm::Type * returnTy;<br><span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;llvm::Type *&gt; args;<br><span class="hljs-built_in">list</span>&lt;decafAST *&gt; argumentList;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> t : argumentList) &#123; <span class="hljs-comment">// 这个阶段只需要指出函数参数的类型即可</span><br>args.push_back(getLLVMType(t-&gt;getType()));<br>&#125;<br>returnTy = getLLVMType(ReturnType-&gt;getType());<br>declare = llvm::Function::Create(<br>llvm::FunctionType::get(returnTy, args, <span class="hljs-literal">false</span>),<br>llvm::Function::ExternalLinkage,<br>Name,<br>TheModule);<br><span class="hljs-comment">// 给参数设置符号名</span><br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> idx = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">auto</span> arg_iter = argumentList.begin();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp; arg : declare-&gt;args()) &#123;<br>VarDefAST * ty = (VarDefAST *) *arg_iter++;<br>arg.setName(ty-&gt;getName());<br>&#125;<br><br>symbol_enter(Name, SYM_FUNCTION, declare);<br><span class="hljs-keyword">return</span> declare;<br>&#125;<br></code></pre></td></tr></table></figure><p>生成函数代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">llvm::Value * <span class="hljs-title">codegen_body</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// codegen for method body..</span><br>    llvm::BasicBlock * BB = llvm::BasicBlock::Create(TheContext, <span class="hljs-string">&quot;entry&quot;</span>, declare);<br>    Builder.SetInsertPoint(BB);<br><br>    <span class="hljs-comment">// 将参数插入到符号表中</span><br>    scope_enter();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp; Arg : declare-&gt;args()) &#123;<br>        llvm::Value * va_arg = &amp;Arg;<br>        llvm::Value * alloc = Builder.CreateAlloca(va_arg-&gt;getType(), <span class="hljs-number">0</span>, va_arg-&gt;getName());<br>        Builder.CreateStore(va_arg, alloc);<br>        symbol_enter(Arg.getName().str(), SYM_VAR, alloc);<br>    &#125;<br>    <br>    <span class="hljs-comment">// 生成函数块的代码</span><br>    Block-&gt;codegen();<br>    <br>    <span class="hljs-comment">// 检查函数基本块是否正常返回</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp; bb : declare-&gt;getBasicBlockList()) &#123;<br>        llvm::Instruction *Terminator = bb.getTerminator();<br>        <span class="hljs-keyword">if</span> (!Terminator) &#123;<br>            llvm::Type * ty = declare-&gt;getReturnType();<br>            Builder.SetInsertPoint(&amp;bb);<br>            <span class="hljs-keyword">if</span> (ty-&gt;isVoidTy())&#123;<br>                Builder.CreateRetVoid();<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(ty-&gt;isIntegerTy()) &#123;<br>                <span class="hljs-keyword">if</span>(ty-&gt;getIntegerBitWidth() == <span class="hljs-number">1</span>)<br>                    Builder.CreateRet(Builder.getInt1(<span class="hljs-number">0</span>));<br>                <span class="hljs-keyword">else</span><br>                    Builder.CreateRet(Builder.getInt32(<span class="hljs-number">0</span>));<br>            &#125;<br>        &#125;<br>    &#125;<br>    <br>    scope_leave();<br>    llvm::verifyFunction(*declare);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="布尔表达式短路"><a href="#布尔表达式短路" class="headerlink" title="布尔表达式短路"></a>布尔表达式短路</h2><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">a <span class="hljs-meta">&amp;&amp; b</span><br></code></pre></td></tr></table></figure><p>若 a 为 false，则不执行 b，返回 a 的值，否则返回 b 的值。</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">a <span class="hljs-string">|| b</span><br></code></pre></td></tr></table></figure><p>若 a 为 false，则执行 b，返回 b 的值，否则返回 a 的值。</p><p>这种实现需要手动插入基本块和 PHI 节点，如下为 &amp;&amp; 的实现代码。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++">llvm::BasicBlock * bbori = Builder.GetInsertBlock();<br>llvm::Function   * func  = bbori-&gt;getParent();<br>llvm::BasicBlock * bb1   = llvm::BasicBlock::Create(TheContext, <span class="hljs-string">&quot;And1&quot;</span>, func);<br>llvm::BasicBlock * bb2   = llvm::BasicBlock::Create(TheContext, <span class="hljs-string">&quot;AndEnd&quot;</span>, func);<br>llvm::BasicBlock * bbcur = <span class="hljs-literal">nullptr</span>;<br>Builder.CreateCondBr(value1, bb1, bb2);<br>Builder.SetInsertPoint(bb1);<br>value2 = RightExpr-&gt;codegen();<br>bbcur  = Builder.GetInsertBlock(); <span class="hljs-comment">// The RHS may create new BBs. </span><br>Builder.CreateBr(bb2);<br>Builder.SetInsertPoint(bb2);<br><br>llvm::PHINode * node = Builder.CreatePHI(getLLVMType(boolTy), <span class="hljs-number">2</span>, <span class="hljs-string">&quot;phiAnd&quot;</span>);<br>node-&gt;addIncoming(value1, bbori);   <span class="hljs-comment">// from original bb.</span><br>node-&gt;addIncoming(value2, bbcur);   <span class="hljs-comment">// from and 2 bb.</span><br><span class="hljs-keyword">return</span> node;<br></code></pre></td></tr></table></figure><p>如下为 || 的实现代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++">llvm::BasicBlock * bbori = Builder.GetInsertBlock();<br>llvm::Function   * func  = bbori-&gt;getParent();<br>llvm::BasicBlock * bb1   = llvm::BasicBlock::Create(TheContext, <span class="hljs-string">&quot;Or1&quot;</span>, func);<br>llvm::BasicBlock * bb2   = llvm::BasicBlock::Create(TheContext, <span class="hljs-string">&quot;OrEnd&quot;</span>, func);<br>llvm::BasicBlock * bbcur = <span class="hljs-literal">nullptr</span>;<br><br>Builder.CreateCondBr(value1, bb2, bb1);<br>Builder.SetInsertPoint(bb1);<br>value2 = RightExpr-&gt;codegen();<br>bbcur  = Builder.GetInsertBlock(); <span class="hljs-comment">// The RHS may create new BBs. </span><br>Builder.CreateBr(bb2);<br>Builder.SetInsertPoint(bb2);<br><br>llvm::PHINode * node = Builder.CreatePHI(getLLVMType(boolTy), <span class="hljs-number">2</span>, <span class="hljs-string">&quot;phiOR&quot;</span>);<br>node-&gt;addIncoming(value1, bbori); <span class="hljs-comment">// from original bb.</span><br>node-&gt;addIncoming(value2, bbcur); <span class="hljs-comment">// from and 2 bb.</span><br><br><span class="hljs-keyword">return</span> node;<br></code></pre></td></tr></table></figure><p>调试过程中发现一个问题，即 a &amp;&amp; b || c 这样的表达式会出现问题，这是因为先计算 a，创建新的BB（bb1） 来放计算 b || c 的代码，而 b || c 又会创建新的BB，addIncoming( , bb1) 这样写就会出问题，因为当前Basic Block 已经不是 bb1 。所以，我在生成 <code>&amp;&amp;</code> /<code> ||</code>运算符右侧表达式后重新获取当前 BB 。</p><h2 id="If-语句"><a href="#If-语句" class="headerlink" title="If 语句"></a>If 语句</h2><p>If 语句的实现要创建3个基本块，<code>ifTrue</code>, <code>ifFalse</code>, <code>ifCont</code> 。 <code>ifCont</code> 就是其余两个基本块的交汇基本块。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">llvm::Value * <span class="hljs-title">codegen</span><span class="hljs-params">()</span> </span>&#123;<br>    llvm::Value      * cond = ConditionExpr-&gt;codegen();<br>    llvm::BasicBlock * BBoriginal = Builder.GetInsertBlock();<br>    llvm::Function   * func    = BBoriginal-&gt;getParent();<br>    llvm::BasicBlock * BBTrue  = llvm::BasicBlock::Create(TheContext, <span class="hljs-string">&quot;IfTrue&quot;</span>, func);<br>    llvm::BasicBlock * BBFalse = llvm::BasicBlock::Create(TheContext, <span class="hljs-string">&quot;IfFalse&quot;</span>, func);<br>    llvm::BasicBlock * BBCont  = llvm::BasicBlock::Create(TheContext, <span class="hljs-string">&quot;IfCont&quot;</span>, func);<br>    Builder.CreateCondBr(cond, BBTrue, BBFalse);<br>    Builder.SetInsertPoint(BBTrue);<br>    IfBlock-&gt;codegen();<br>    <br>    <span class="hljs-comment">// 检查基本块是否有 ret 指令，如果没有才创建 br 跳转到交汇基本块；如果有 ret，则 br 是 unreachable ，没有意义，而且还会导致 llvm 变量序号计算出错.</span><br>    <span class="hljs-keyword">if</span>(!Builder.GetInsertBlock()-&gt;getTerminator())<br>        Builder.CreateBr(BBCont);<br><br>    Builder.SetInsertPoint(BBFalse);<br>    <span class="hljs-keyword">if</span> (ElseBlock) ElseBlock-&gt;codegen();<br><br>    <span class="hljs-comment">// 同上</span><br>    <span class="hljs-keyword">if</span>(!Builder.GetInsertBlock()-&gt;getTerminator())<br>        Builder.CreateBr(BBCont);<br><br>    Builder.SetInsertPoint(BBCont);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="while-语句"><a href="#while-语句" class="headerlink" title="while 语句"></a>while 语句</h2><p>for/while，有两种语法很蛋疼，分别是 <code>break</code> 和 <code>continue</code></p><p>为了实现这两种语法的功能，我们需要将循环开始（条件判断）、循环结束的基本块都添加到符号表中，方便索引。要实现嵌套循环，在 while/for 循环代码生成阶段，我不得不在符号表中创建一个新的 scope。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">llvm::Value * <span class="hljs-title">codegen</span><span class="hljs-params">()</span> </span>&#123;<br>llvm::BasicBlock * BBori = Builder.GetInsertBlock();<br>llvm::Function   * func = BBori-&gt;getParent();<br>llvm::BasicBlock * BBwhileStart = llvm::BasicBlock::Create(TheContext, <span class="hljs-string">&quot;whileStart&quot;</span>, func); <span class="hljs-comment">// Create a BB for &#x27;continue&#x27;</span><br>llvm::BasicBlock * BBwhileBody  = llvm::BasicBlock::Create(TheContext, <span class="hljs-string">&quot;whileBody&quot;</span> , func);<br>llvm::BasicBlock * BBwhileEnd   = llvm::BasicBlock::Create(TheContext, <span class="hljs-string">&quot;whileEnd&quot;</span>  , func);<br><br>    scope_enter(); <span class="hljs-comment">// 创建新的 scope</span><br>symbol_enter(<span class="hljs-string">&quot;LoopStart&quot;</span>, SYM_BB, BBwhileStart);  <span class="hljs-comment">//  continue;</span><br>symbol_enter(<span class="hljs-string">&quot;LoopEnd&quot;</span>,   SYM_BB, BBwhileEnd); <span class="hljs-comment">// break;</span><br>    Builder.CreateBr(BBwhileStart); <br>    <span class="hljs-comment">// step 1 条件验证</span><br>Builder.SetInsertPoint(BBwhileStart); <span class="hljs-comment">//BBori -&gt; BBwhileStart</span><br>llvm::Value * cond = ConditionExpr-&gt;codegen();<br>Builder.CreateCondBr(cond, BBwhileBody, BBwhileEnd);<br>    <br>    <span class="hljs-comment">// step 2 循环体代码生成</span><br>Builder.SetInsertPoint(BBwhileBody);<br>WhileBlock-&gt;codegen();<br>Builder.CreateBr(BBwhileStart);<br>Builder.SetInsertPoint(BBwhileEnd); <br>scope_leave(); <span class="hljs-comment">// 退出当前 scope，当前循环的 LoopStart 和 LoopEnd 符号删除..</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h2><p>for 循环稍微麻烦一点，大致可以分为 4 个阶段</p><p>第一个阶段，初始化变量</p><p>第二个阶段，循环条件验证</p><p>第三个阶段，循环体代码生成</p><p>第四个阶段，自增代码生成</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">llvm::Value * <span class="hljs-title">codegen</span><span class="hljs-params">()</span> </span>&#123;<br>    llvm::Function * func = Builder.GetInsertBlock()-&gt;getParent();<br>    llvm::BasicBlock * BBForCond = llvm::BasicBlock::Create(TheContext, <span class="hljs-string">&quot;BBForCond&quot;</span>, func);<br>    llvm::BasicBlock * BBForLA   = llvm::BasicBlock::Create(TheContext, <span class="hljs-string">&quot;BBForLA&quot;</span>, func);<br>    llvm::BasicBlock * BBForBody = llvm::BasicBlock::Create(TheContext, <span class="hljs-string">&quot;BBForBody&quot;</span>, func);<br>    llvm::BasicBlock * BBForEnd  = llvm::BasicBlock::Create(TheContext, <span class="hljs-string">&quot;BBForEnd&quot;</span>, func);<br>    <br>    scope_enter();<br>    symbol_enter(<span class="hljs-string">&quot;LoopStart&quot;</span>, SYM_BB, BBForLA); <span class="hljs-comment">// continue</span><br>    symbol_enter(<span class="hljs-string">&quot;LoopEnd&quot;</span>, SYM_BB, BBForEnd); <span class="hljs-comment">// break</span><br>    <span class="hljs-comment">// step 1</span><br>    PreAssignList-&gt;codegen();<br>    Builder.CreateBr(BBForCond);<br>    <br>    <span class="hljs-comment">// step 2</span><br>    Builder.SetInsertPoint(BBForCond);<br>    llvm::Value * cond = Condition-&gt;codegen();<br>    Builder.CreateCondBr(cond, BBForBody, BBForEnd);<br>    <br>    <span class="hljs-comment">// step 3</span><br>    Builder.SetInsertPoint(BBForBody);<br>    ForBlock-&gt;codegen();<br>    <span class="hljs-keyword">if</span>(!Builder.GetInsertBlock()-&gt;getTerminator())<br>        Builder.CreateBr(BBForLA);<br>    <br>    <span class="hljs-comment">// step 4</span><br>    Builder.SetInsertPoint(BBForLA);<br>    LoopAssignList-&gt;codegen();<br>    Builder.CreateBr(BBForCond);<br>    Builder.SetInsertPoint(BBForEnd);<br>    <br>    scope_leave();<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h2><p>llvm ir 的 api 每个类有一个成员函数 dump() , 可以输出当前对象代表的 ir 文本..</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Decaf-编译器代码生成&quot;&gt;&lt;a href=&quot;#Decaf-编译器代码生成&quot; class=&quot;headerlink&quot; title=&quot;Decaf 编译器代码生成&quot;&gt;&lt;/a&gt;Decaf 编译器代码生成&lt;/h1&gt;&lt;p&gt;记录一下使用 llvm api 实现 Decaf 编</summary>
      
    
    
    
    <category term="compiler" scheme="https://panda0s.top/categories/compiler/"/>
    
    
    <category term="homework" scheme="https://panda0s.top/tags/homework/"/>
    
    <category term="llvm" scheme="https://panda0s.top/tags/llvm/"/>
    
  </entry>
  
  <entry>
    <title>Exercise:Recognize hand-written digits</title>
    <link href="https://panda0s.top/2021/02/27/Exercise-Recognize-hand-written-digits/"/>
    <id>https://panda0s.top/2021/02/27/Exercise-Recognize-hand-written-digits/</id>
    <published>2021-02-27T15:14:48.000Z</published>
    <updated>2021-02-27T15:48:53.236Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Multi-class-Classifification-and-Neural-Networks"><a href="#Multi-class-Classifification-and-Neural-Networks" class="headerlink" title="Multi-class Classifification and Neural Networks"></a>Multi-class Classifification and Neural Networks</h1><p>这是课程的第三个编程作业，用逻辑回归和神经网络识别手写数字，非常有趣的一个作业。</p><p>由于神经网络只学习了模型，并未学习如何训练参数，故这次作业已经提前给了神经网络的参数。</p><p>训练集样本如图:</p><img src="/2021/02/27/Exercise-Recognize-hand-written-digits/image-20210227231750755.png" class="" title="image-20210227231750755"><p>每一张图都是一个手写的数字，每一张图的像素是 20 * 20 ，将每一个像素作为一个特征来训练模型。</p><h2 id="数据可视化"><a href="#数据可视化" class="headerlink" title="数据可视化"></a>数据可视化</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">[h, display_array]</span> = <span class="hljs-title">displayData</span><span class="hljs-params">(X, example_width)</span></span><br><span class="hljs-comment">%DISPLAYDATA Display 2D data in a nice grid</span><br><span class="hljs-comment">%   [h, display_array] = DISPLAYDATA(X, example_width) displays 2D data</span><br><span class="hljs-comment">%   stored in X in a nice grid. It returns the figure handle h and the </span><br><span class="hljs-comment">%   displayed array if requested.</span><br><br><span class="hljs-comment">% Set example_width automatically if not passed in</span><br><span class="hljs-keyword">if</span> ~exist(<span class="hljs-string">&#x27;example_width&#x27;</span>, <span class="hljs-string">&#x27;var&#x27;</span>) || <span class="hljs-built_in">isempty</span>(example_width) <br>example_width = <span class="hljs-built_in">round</span>(<span class="hljs-built_in">sqrt</span>(<span class="hljs-built_in">size</span>(X, <span class="hljs-number">2</span>)));<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">% Gray Image</span><br>colormap(gray);<br><br><span class="hljs-comment">% Compute rows, cols</span><br>[m n] = <span class="hljs-built_in">size</span>(X);<br>example_height = (n / example_width);<br><br><span class="hljs-comment">% Compute number of items to display</span><br>display_rows = <span class="hljs-built_in">floor</span>(<span class="hljs-built_in">sqrt</span>(m));<br>display_cols = <span class="hljs-built_in">ceil</span>(m / display_rows);<br><br><span class="hljs-comment">% Between images padding</span><br>pad = <span class="hljs-number">1</span>;<br><br><span class="hljs-comment">% Setup blank display</span><br>display_array = - <span class="hljs-built_in">ones</span>(pad + display_rows * (example_height + pad), ...<br>                       pad + display_cols * (example_width + pad));<br><br><span class="hljs-comment">% Copy each example into a patch on the display array</span><br>curr_ex = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">j</span> = <span class="hljs-number">1</span>:display_rows<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span> = <span class="hljs-number">1</span>:display_cols<br><span class="hljs-keyword">if</span> curr_ex &gt; m, <br><span class="hljs-keyword">break</span>; <br><span class="hljs-keyword">end</span><br><span class="hljs-comment">% Copy the patch</span><br><br><span class="hljs-comment">% Get the max value of the patch</span><br>max_val = <span class="hljs-built_in">max</span>(<span class="hljs-built_in">abs</span>(X(curr_ex, :)));<br>display_array(pad + (<span class="hljs-built_in">j</span> - <span class="hljs-number">1</span>) * (example_height + pad) + (<span class="hljs-number">1</span>:example_height), ...<br>              pad + (<span class="hljs-built_in">i</span> - <span class="hljs-number">1</span>) * (example_width + pad) + (<span class="hljs-number">1</span>:example_width)) = ...<br><span class="hljs-built_in">reshape</span>(X(curr_ex, :), example_height, example_width) / max_val;<br>curr_ex = curr_ex + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">if</span> curr_ex &gt; m, <br><span class="hljs-keyword">break</span>; <br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">% Display Image</span><br>h = imagesc(display_array, [<span class="hljs-number">-1</span> <span class="hljs-number">1</span>]);<br><br><span class="hljs-comment">% Do not show axis</span><br>axis image off<br><br>drawnow;<br><br><span class="hljs-keyword">end</span><br><br></code></pre></td></tr></table></figure><h2 id="多元逻辑回归"><a href="#多元逻辑回归" class="headerlink" title="多元逻辑回归"></a>多元逻辑回归</h2><p>把每一图的400个像素作为400个特征，训练逻辑回归模型，由于这次特征比较多，所以逻辑回归的实现代码一定要向量化，我在上一个作业中已经实现了向量化版的逻辑回归代价函数，所以直接拿来用。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">[J, grad]</span> = <span class="hljs-title">lrCostFunction</span><span class="hljs-params">(theta, X, y, lambda)</span></span><br><span class="hljs-comment">%LRCOSTFUNCTION Compute cost and gradient for logistic regression with </span><br><span class="hljs-comment">%regularization</span><br><span class="hljs-comment">%   J = LRCOSTFUNCTION(theta, X, y, lambda) computes the cost of using</span><br><span class="hljs-comment">%   theta as the parameter for regularized logistic regression and the</span><br><span class="hljs-comment">%   gradient of the cost w.r.t. to the parameters. </span><br><br><span class="hljs-comment">% Initialize some useful values</span><br>m = <span class="hljs-built_in">length</span>(y); <span class="hljs-comment">% number of training examples</span><br>J = <span class="hljs-number">0</span>;<br>grad = <span class="hljs-built_in">zeros</span>(<span class="hljs-built_in">size</span>(theta));<br><br>h = sigmoid(X * theta);<br>resultSet = -y .* <span class="hljs-built_in">log</span>(h) - (<span class="hljs-built_in">ones</span>(<span class="hljs-built_in">size</span>(y)) - y) .* <span class="hljs-built_in">log</span>(<span class="hljs-built_in">ones</span>(<span class="hljs-built_in">size</span>(y)) - h);<br>penaltyTerm = (lambda / (<span class="hljs-number">2</span> * m)) * sum(theta(<span class="hljs-number">2</span>:<span class="hljs-built_in">size</span>(theta)).^<span class="hljs-number">2</span>);<br>J = (<span class="hljs-number">1</span>/m) * sum(resultSet) + penaltyTerm;<br>penaltyTerm2 = ((lambda / m) .* theta) .* [ <span class="hljs-number">0</span>; <span class="hljs-built_in">ones</span>([<span class="hljs-built_in">size</span>(theta, <span class="hljs-number">1</span>) - <span class="hljs-number">1</span>, <span class="hljs-number">1</span>])];<br>grad = (<span class="hljs-number">1</span>/m) .* (X&#x27; * (h - y)) + penaltyTerm2;<br><span class="hljs-comment">% =============================================================</span><br>grad = grad(:);<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h3 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h3><p>数字识别，一共有十个分类，分别对应 1,2,3,….,9,0，依次训练每一个数字的分类器。oneVsAll 函数返回所有分类器对应的参数矩阵。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">[all_theta]</span> = <span class="hljs-title">oneVsAll</span><span class="hljs-params">(X, y, num_labels, lambda)</span></span><br><span class="hljs-comment">%ONEVSALL trains multiple logistic regression classifiers and returns all</span><br><span class="hljs-comment">%the classifiers in a matrix all_theta, where the i-th row of all_theta </span><br><span class="hljs-comment">%corresponds to the classifier for label i</span><br><span class="hljs-comment">%   [all_theta] = ONEVSALL(X, y, num_labels, lambda) trains num_labels</span><br><span class="hljs-comment">%   logistic regression classifiers and returns each of these classifiers</span><br><span class="hljs-comment">%   in a matrix all_theta, where the i-th row of all_theta corresponds </span><br><span class="hljs-comment">%   to the classifier for label i</span><br><br><span class="hljs-comment">% Some useful variables</span><br>m = <span class="hljs-built_in">size</span>(X, <span class="hljs-number">1</span>);<br>n = <span class="hljs-built_in">size</span>(X, <span class="hljs-number">2</span>);<br><br><span class="hljs-comment">% You need to return the following variables correctly </span><br>all_theta = <span class="hljs-built_in">zeros</span>(num_labels, n + <span class="hljs-number">1</span>);<br><br><span class="hljs-comment">% Add ones to the X data matrix</span><br>X = [<span class="hljs-built_in">ones</span>(m, <span class="hljs-number">1</span>) X];<br><br><span class="hljs-comment">% ====================== YOUR CODE HERE ======================</span><br>options = optimset(<span class="hljs-string">&#x27;GradObj&#x27;</span>, <span class="hljs-string">&#x27;on&#x27;</span>, <span class="hljs-string">&#x27;MaxIter&#x27;</span>, <span class="hljs-number">200</span>);<br>initial_theta = <span class="hljs-built_in">zeros</span>(n + <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span> = <span class="hljs-number">1</span>:<span class="hljs-number">10</span> <span class="hljs-comment">% 依次训练每一个分类器，y == i 只有 y 与 i 对应位置相等则为1否则0</span><br>    [theta] =  fmincg(@(t)(lrCostFunction(t, X, (y == <span class="hljs-built_in">i</span>), lambda)), ...<br>        initial_theta, options);<br>    all_theta(<span class="hljs-built_in">i</span>, :) = theta&#x27;;<br><span class="hljs-keyword">end</span><br><span class="hljs-comment">% =========================================================================</span><br><br><span class="hljs-keyword">end</span><br><br></code></pre></td></tr></table></figure><h3 id="预测"><a href="#预测" class="headerlink" title="预测"></a>预测</h3><p>predictOneVsAll 中的参数 X 是一个矩阵，每一行代表一张图片。每一张图片应该经过所有分类器测试，返回概率最大的分类。</p><p>向量化计算可以一次性将 X 的所有样例都计算</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">p</span> = <span class="hljs-title">predictOneVsAll</span><span class="hljs-params">(all_theta, X)</span></span><br><span class="hljs-comment">%PREDICT Predict the label for a trained one-vs-all classifier. The labels </span><br><span class="hljs-comment">%are in the range 1..K, where K = size(all_theta, 1). </span><br><span class="hljs-comment">%  p = PREDICTONEVSALL(all_theta, X) will return a vector of predictions</span><br><span class="hljs-comment">%  for each example in the matrix X. Note that X contains the examples in</span><br><span class="hljs-comment">%  rows. all_theta is a matrix where the i-th row is a trained logistic</span><br><span class="hljs-comment">%  regression theta vector for the i-th class. You should set p to a vector</span><br><span class="hljs-comment">%  of values from 1..K (e.g., p = [1; 3; 1; 2] predicts classes 1, 3, 1, 2</span><br><span class="hljs-comment">%  for 4 examples) </span><br><br>m = <span class="hljs-built_in">size</span>(X, <span class="hljs-number">1</span>);<br>num_labels = <span class="hljs-built_in">size</span>(all_theta, <span class="hljs-number">1</span>);<br><br><span class="hljs-comment">% You need to return the following variables correctly </span><br>p = <span class="hljs-built_in">zeros</span>(<span class="hljs-built_in">size</span>(X, <span class="hljs-number">1</span>), <span class="hljs-number">1</span>);<br><br><span class="hljs-comment">% Add ones to the X data matrix</span><br>X = [<span class="hljs-built_in">ones</span>(m, <span class="hljs-number">1</span>) X];<br><span class="hljs-comment">% ====================== YOUR CODE HERE ======================     </span><br>test = sigmoid(X * all_theta&#x27;); <span class="hljs-comment">% 向量化计算每一个样例</span><br>[m, p] = <span class="hljs-built_in">max</span>(test, [], <span class="hljs-number">2</span>); <span class="hljs-comment">% p 是最大概率对应的下标</span><br><span class="hljs-comment">% =========================================================================</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>预测准确度如下</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Training</span> Set Accuracy: <span class="hljs-number">96</span>.<span class="hljs-number">460000</span><br></code></pre></td></tr></table></figure><h2 id="神经网络预测函数"><a href="#神经网络预测函数" class="headerlink" title="神经网络预测函数"></a>神经网络预测函数</h2><p>使用神经网络也可以完成手写识别。这个作业需要使用3层神经网络, 并且已经给了参数，只要求写出 predict 函数，所以直接套公式即可计算。</p><img src="/2021/02/27/Exercise-Recognize-hand-written-digits/image-20210227234051776.png" class="" title="image-20210227234051776"><p>实现代码如下：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">p</span> = <span class="hljs-title">predict</span><span class="hljs-params">(Theta1, Theta2, X)</span></span><br><span class="hljs-comment">%PREDICT Predict the label of an input given a trained neural network</span><br><span class="hljs-comment">%   p = PREDICT(Theta1, Theta2, X) outputs the predicted label of X given the</span><br><span class="hljs-comment">%   trained weights of a neural network (Theta1, Theta2)</span><br><br><span class="hljs-comment">% Useful values</span><br>m = <span class="hljs-built_in">size</span>(X, <span class="hljs-number">1</span>);<br>num_labels = <span class="hljs-built_in">size</span>(Theta2, <span class="hljs-number">1</span>);<br><br>p = <span class="hljs-built_in">zeros</span>(<span class="hljs-built_in">size</span>(X, <span class="hljs-number">1</span>), <span class="hljs-number">1</span>);<br><br><br>X = [<span class="hljs-built_in">ones</span>(<span class="hljs-built_in">size</span>(X, <span class="hljs-number">1</span>), <span class="hljs-number">1</span>), X];<span class="hljs-comment">% append bias to X</span><br>a2 = sigmoid(Theta1 * X&#x27;);<br>a2 = [<span class="hljs-built_in">ones</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">size</span>(X, <span class="hljs-number">1</span>)); a2];<span class="hljs-comment">% append bias to a2</span><br>a3 = sigmoid(Theta2 * a2);<br>[t, result] = <span class="hljs-built_in">max</span>(a3, [], <span class="hljs-number">1</span>);<br>p = result&#x27;;<br><span class="hljs-comment">% =========================================================================</span><br><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>第一层和第二层都会添加 <code>bias unit</code> 目前还不清楚有什么用。下次的作业应该涉及到如何训练神经网络的参数，期待。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://www.ai-start.com/ml2014/html/week4.html">http://www.ai-start.com/ml2014/html/week4.html</a></p><p><a href="https://s3.amazonaws.com/spark-public/ml/exercises/on-demand/machine-learning-ex3.zip">https://s3.amazonaws.com/spark-public/ml/exercises/on-demand/machine-learning-ex3.zip</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Multi-class-Classifification-and-Neural-Networks&quot;&gt;&lt;a href=&quot;#Multi-class-Classifification-and-Neural-Networks&quot; class=&quot;headerlink&quot; tit</summary>
      
    
    
    
    <category term="ml" scheme="https://panda0s.top/categories/ml/"/>
    
    
    <category term="homework" scheme="https://panda0s.top/tags/homework/"/>
    
  </entry>
  
  <entry>
    <title>Exercise:Logistic Regression</title>
    <link href="https://panda0s.top/2021/02/23/Exercise-Logistic-Regression/"/>
    <id>https://panda0s.top/2021/02/23/Exercise-Logistic-Regression/</id>
    <published>2021-02-23T11:46:30.000Z</published>
    <updated>2021-02-23T13:32:46.443Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Exercise-Logistic-Regression"><a href="#Exercise-Logistic-Regression" class="headerlink" title="Exercise:Logistic Regression"></a>Exercise:Logistic Regression</h1><p>记录一下逻辑回归作业代码</p><h2 id="Task1"><a href="#Task1" class="headerlink" title="Task1"></a>Task1</h2><p> 假设函数: $h_\theta(x)=sigmoid(\theta^Tx)$</p><p>代价函数: $J(\theta)=\frac{1}{m}\sum\limits_{i=1}^{m}[-y^{(i)}log(h_\theta(x^{(i)}))-(1-y^{(i)})log(1-h_\theta(x^{(i)}))]$</p><p>梯度(代价函数的偏导数): $\frac{\delta J(\theta)}{\delta \theta_j}=\frac{1}{m}\sum\limits_{i=1}^{m}(h_\theta(x^{(i)})-y^{(i)})x^{(i)}$</p><p>Matlab 实现 costFunction 如下（已经实现向量化计算）：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">[J, grad]</span> = <span class="hljs-title">costFunction</span><span class="hljs-params">(theta, X, y)</span></span><br><span class="hljs-comment">%COSTFUNCTION Compute cost and gradient for logistic regression</span><br><span class="hljs-comment">%   J = COSTFUNCTION(theta, X, y) computes the cost of using theta as the</span><br><span class="hljs-comment">%   parameter for logistic regression and the gradient of the cost</span><br><span class="hljs-comment">%   w.r.t. to the parameters.</span><br><span class="hljs-comment">% Initialize some useful values</span><br>m = <span class="hljs-built_in">length</span>(y); <span class="hljs-comment">% number of training examples</span><br><span class="hljs-comment">% You need to return the following variables correctly </span><br><span class="hljs-comment">% ====================== YOUR CODE HERE ======================</span><br><span class="hljs-comment">% Instructions: Compute the cost of a particular choice of theta.</span><br><span class="hljs-comment">%               You should set J to the cost.</span><br><span class="hljs-comment">%               Compute the partial derivatives and set grad to the partial</span><br><span class="hljs-comment">%               derivatives of the cost w.r.t. each parameter in theta</span><br><span class="hljs-comment">%</span><br><span class="hljs-comment">% Note: grad should have the same dimensions as theta</span><br><span class="hljs-comment">%</span><br>h = sigmoid(X * theta);<br>resultSet = -y .* <span class="hljs-built_in">log</span>(h) - (<span class="hljs-built_in">ones</span>(<span class="hljs-built_in">size</span>(y)) - y) .* <span class="hljs-built_in">log</span>(<span class="hljs-built_in">ones</span>(<span class="hljs-built_in">size</span>(y)) - h);<br>J = (<span class="hljs-number">1</span>/m) * sum(resultSet);<br>grad = (<span class="hljs-number">1</span>/m) .* (X&#x27; * (h - y));<br><span class="hljs-comment">% =============================================================</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>costFunction 有两个返回值，分别是 <code>J</code> 和 <code>grad</code>，grad 是梯度。</p><p>使用 fminunc 寻找最优解（前一个是手动写的迭代），fminunc 是 Matlab 的内置函数，它会选择合适的算法去寻找最优解，且不需要指定学习率。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">%  Set options for fminunc</span><br>options = optimset(<span class="hljs-string">&#x27;GradObj&#x27;</span>, <span class="hljs-string">&#x27;on&#x27;</span>, <span class="hljs-string">&#x27;MaxIter&#x27;</span>, <span class="hljs-number">400</span>);<br><span class="hljs-comment">%  Run fminunc to obtain the optimal theta</span><br><span class="hljs-comment">%  This function will return theta and the cost </span><br>[theta, cost] = ...<br>fminunc(@(t)(costFunction(t, X, y)), initial_theta, options);<br><br></code></pre></td></tr></table></figure><p><code>GradObj</code> 设置为 <code>on</code> 表示传入的函数会返回 [J, grad]，就是代价和梯度；<code>MaxIter</code> 指定最大迭代次数。具体参考 help fminunc</p><p>最后画出决策边界如下</p><img src="/2021/02/23/Exercise-Logistic-Regression/image-20210223200757400.png" class="" title="image-20210223200757400"><h2 id="Task2"><a href="#Task2" class="headerlink" title="Task2"></a>Task2</h2><p>这个任务主要是处理过拟合问题</p><img src="/2021/02/23/Exercise-Logistic-Regression/image-20210223200943694.png" class="" title="image-20210223200943694"><p>如上图，我们不能用一条直线作为决策边界，需要一条曲线。因此，引入高次项来更好的拟合这些数据。作业已经将两个特征映射到两个特征1到6次所有多项式，即一个28维的向量。</p><img src="/2021/02/23/Exercise-Logistic-Regression/image-20210223205330561.png" class="" title="image-20210223205330561"><p>如果直接用 Task1 的算法会导致过拟合问题，如图</p><img src="/2021/02/23/Exercise-Logistic-Regression/image-20210223205448860.png" class="" title="image-20210223205448860"><p>改进代价函数公式如下（正则化处理）</p><img src="/2021/02/23/Exercise-Logistic-Regression/image-20210223205553275.png" class="" title="image-20210223205553275"><img src="/2021/02/23/Exercise-Logistic-Regression/image-20210223205738337.png" class="" title="image-20210223205738337"><p>Matlab 重新实现代价函数</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">[J, grad]</span> = <span class="hljs-title">costFunctionReg</span><span class="hljs-params">(theta, X, y, lambda)</span></span><br><span class="hljs-comment">%COSTFUNCTIONREG Compute cost and gradient for logistic regression with regularization</span><br><span class="hljs-comment">%   J = COSTFUNCTIONREG(theta, X, y, lambda) computes the cost of using</span><br><span class="hljs-comment">%   theta as the parameter for regularized logistic regression and the</span><br><span class="hljs-comment">%   gradient of the cost w.r.t. to the parameters. </span><br><br><span class="hljs-comment">% Initialize some useful values</span><br>m = <span class="hljs-built_in">length</span>(y); <span class="hljs-comment">% number of training examples</span><br><br><span class="hljs-comment">% You need to return the following variables correctly </span><br>J = <span class="hljs-number">0</span>;<br>grad = <span class="hljs-built_in">zeros</span>(<span class="hljs-built_in">size</span>(theta));<br><br><span class="hljs-comment">% ====================== YOUR CODE HERE ======================</span><br><span class="hljs-comment">% Instructions: Compute the cost of a particular choice of theta.</span><br><span class="hljs-comment">%               You should set J to the cost.</span><br><span class="hljs-comment">%               Compute the partial derivatives and set grad to the partial</span><br><span class="hljs-comment">%               derivatives of the cost w.r.t. each parameter in theta</span><br><br>h = sigmoid(X * theta);<br>resultSet = -y .* <span class="hljs-built_in">log</span>(h) - (<span class="hljs-built_in">ones</span>(<span class="hljs-built_in">size</span>(y)) - y) .* <span class="hljs-built_in">log</span>(<span class="hljs-built_in">ones</span>(<span class="hljs-built_in">size</span>(y)) - h);<br>penaltyTerm = (lambda / (<span class="hljs-number">2</span> * m)) * sum(theta(<span class="hljs-number">2</span>:<span class="hljs-built_in">size</span>(theta)).^<span class="hljs-number">2</span>);<br>J = (<span class="hljs-number">1</span>/m) * sum(resultSet) + penaltyTerm;<br>penaltyTerm2 = ((lambda / m) .* theta) .* [ <span class="hljs-number">0</span>; <span class="hljs-built_in">ones</span>([<span class="hljs-built_in">size</span>(theta, <span class="hljs-number">1</span>) - <span class="hljs-number">1</span>, <span class="hljs-number">1</span>])];<br>grad = (<span class="hljs-number">1</span>/m) .* (X&#x27; * (h - y)) + penaltyTerm2;<br><br><span class="hljs-comment">% =============================================================</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><img src="/2021/02/23/Exercise-Logistic-Regression/image-20210223205951267.png" class="" title="image-20210223205951267"><p>调整 lambda 可以获得不同的决策边界。</p><p>特征映射的代码如下(作业给的)</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">out</span> = <span class="hljs-title">mapFeature</span><span class="hljs-params">(X1, X2)</span></span><br><span class="hljs-comment">% MAPFEATURE Feature mapping function to polynomial features</span><br><span class="hljs-comment">%</span><br><span class="hljs-comment">%   MAPFEATURE(X1, X2) maps the two input features</span><br><span class="hljs-comment">%   to quadratic features used in the regularization exercise.</span><br><span class="hljs-comment">%</span><br><span class="hljs-comment">%   Returns a new feature array with more features, comprising of </span><br><span class="hljs-comment">%   X1, X2, X1.^2, X2.^2, X1*X2, X1*X2.^2, etc..</span><br><span class="hljs-comment">%</span><br><span class="hljs-comment">%   Inputs X1, X2 must be the same size</span><br><span class="hljs-comment">%</span><br><br>degree = <span class="hljs-number">6</span>;<br>out = <span class="hljs-built_in">ones</span>(<span class="hljs-built_in">size</span>(X1(:,<span class="hljs-number">1</span>)));<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span> = <span class="hljs-number">1</span>:degree<br>    <span class="hljs-keyword">for</span> <span class="hljs-built_in">j</span> = <span class="hljs-number">0</span>:<span class="hljs-built_in">i</span><br>        out(:, <span class="hljs-keyword">end</span>+<span class="hljs-number">1</span>) = (X1.^(<span class="hljs-built_in">i</span>-<span class="hljs-built_in">j</span>)).*(X2.^<span class="hljs-built_in">j</span>);<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>degree 可以控制映射到的最高次项，经过我测试用一个圆（即2次）也是可以拟合的，但是准确度肯定就不行了2333.</p><img src="/2021/02/23/Exercise-Logistic-Regression/image-20210223211144955.png" class="" title="image-20210223211144955"><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Train</span> Accuracy: <span class="hljs-number">81</span>.<span class="hljs-number">355932</span><br><span class="hljs-attribute">Expected</span> accuracy (with lambda = <span class="hljs-number">1</span>): <span class="hljs-number">83</span>.<span class="hljs-number">1</span> (approx)<br></code></pre></td></tr></table></figure><p>我也测试了 degree &gt; 6 (=12)的情况，准确度结果如下</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Train</span> Accuracy: <span class="hljs-number">83</span>.<span class="hljs-number">050847</span><br><span class="hljs-attribute">Expected</span> accuracy (with lambda = <span class="hljs-number">1</span>): <span class="hljs-number">83</span>.<span class="hljs-number">1</span> (approx)<br></code></pre></td></tr></table></figure><p>我猜，6次应该是老师选取的最好的结果。</p><p>最后，向量化计算后，代码实现的公式可读性极差，有现bug直接重写…..</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Exercise-Logistic-Regression&quot;&gt;&lt;a href=&quot;#Exercise-Logistic-Regression&quot; class=&quot;headerlink&quot; title=&quot;Exercise:Logistic Regression&quot;&gt;&lt;/a&gt;Ex</summary>
      
    
    
    
    <category term="ml" scheme="https://panda0s.top/categories/ml/"/>
    
    
    <category term="homework" scheme="https://panda0s.top/tags/homework/"/>
    
  </entry>
  
  <entry>
    <title>RDP 配置文件编写记录</title>
    <link href="https://panda0s.top/2021/02/22/RDP-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%BC%96%E5%86%99%E8%AE%B0%E5%BD%95/"/>
    <id>https://panda0s.top/2021/02/22/RDP-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%BC%96%E5%86%99%E8%AE%B0%E5%BD%95/</id>
    <published>2021-02-22T09:23:46.000Z</published>
    <updated>2021-03-16T05:22:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RDP-配置文件编写记录"><a href="#RDP-配置文件编写记录" class="headerlink" title="RDP 配置文件编写记录"></a>RDP 配置文件编写记录</h1><p>RDP Wrapper  官方配置文件只能支持到18年的Win10系统，新版本的系统需要自己编写 INI 文件，当然也可以去 RDP 的官方 github issues 里面寻找相应的配置文件。</p><p>RDP Ini 文件样本 for win10(10.0.19041.789)</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[10.0.19041.789]</span><br><span class="hljs-attr">LocalOnlyPatch.x86</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">LocalOnlyOffset.x86</span>=B59D9<br><span class="hljs-attr">LocalOnlyCode.x86</span>=jmpshort<br><span class="hljs-attr">SingleUserPatch.x86</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">SingleUserOffset.x86</span>=<span class="hljs-number">3</span>BC45<br><span class="hljs-attr">SingleUserCode.x86</span>=nop<br><span class="hljs-attr">DefPolicyPatch.x86</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">DefPolicyOffset.x86</span>=<span class="hljs-number">3</span>E7C9<br><span class="hljs-attr">DefPolicyCode.x86</span>=CDefPolicy_Query_eax_ecx<br><span class="hljs-attr">SLInitHook.x86</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">SLInitOffset.x86</span>=<span class="hljs-number">67</span>BF8<br><span class="hljs-attr">SLInitFunc.x86</span>=New_CSLQuery_Initialize<br><br><span class="hljs-attr">LocalOnlyPatch.x64</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">LocalOnlyOffset.x64</span>=<span class="hljs-number">88</span>F41<br><span class="hljs-attr">LocalOnlyCode.x64</span>=jmpshort<br><span class="hljs-attr">SingleUserPatch.x64</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">SingleUserOffset.x64</span>=<span class="hljs-number">0</span>CA4C<br><span class="hljs-attr">SingleUserCode.x64</span>=Zero<br><span class="hljs-attr">DefPolicyPatch.x64</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">DefPolicyOffset.x64</span>=<span class="hljs-number">18</span>A15<br><span class="hljs-attr">DefPolicyCode.x64</span>=CDefPolicy_Query_eax_rcx<br><span class="hljs-attr">SLInitHook.x64</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">SLInitOffset.x64</span>=<span class="hljs-number">1</span>D5BC<br><span class="hljs-attr">SLInitFunc.x64</span>=New_CSLQuery_Initialize<br><br><span class="hljs-section">[10.0.19041.789-SLInit]</span><br><span class="hljs-attr">bInitialized.x86</span>=D0954<br><span class="hljs-attr">bServerSku.x86</span>=D0958<br><span class="hljs-attr">lMaxUserSessions.x86</span>=D095C<br><span class="hljs-attr">bAppServerAllowed.x86</span>=D0964<br><span class="hljs-attr">bRemoteConnAllowed.x86</span>=D096C<br><span class="hljs-attr">bMultimonAllowed.x86</span>=D0970<br><span class="hljs-attr">ulMaxDebugSessions.x86</span>=D0974<br><span class="hljs-attr">bFUSEnabled.x86</span>=D0978<br><br><span class="hljs-attr">bInitialized.x64</span>=<span class="hljs-number">106028</span><br><span class="hljs-attr">bServerSku.x64</span>=<span class="hljs-number">10602</span>C<br><span class="hljs-attr">lMaxUserSessions.x64</span>=<span class="hljs-number">106030</span><br><span class="hljs-attr">bAppServerAllowed.x64</span>=<span class="hljs-number">106038</span><br><span class="hljs-attr">bRemoteConnAllowed.x64</span>=<span class="hljs-number">106040</span><br><span class="hljs-attr">bMultimonAllowed.x64</span>=<span class="hljs-number">106044</span><br><span class="hljs-attr">ulMaxDebugSessions.x64</span>=<span class="hljs-number">106048</span><br><span class="hljs-attr">bFUSEnabled.x64</span>=<span class="hljs-number">10604</span>C<br></code></pre></td></tr></table></figure><p>RDP 的Patch代码，我可以根据需要添加</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[PatchCodes]</span><br><span class="hljs-attr">nop</span>=<span class="hljs-number">90</span><br><span class="hljs-attr">Zero</span>=<span class="hljs-number">00</span><br><span class="hljs-attr">jmpshort</span>=EB<br><span class="hljs-attr">nopjmp</span>=<span class="hljs-number">90</span>E9<br><span class="hljs-attr">CDefPolicy_Query_edx_ecx</span>=BA000100008991200300005E90<br><span class="hljs-attr">CDefPolicy_Query_eax_rcx_jmp</span>=B80001000089813806000090EB<br><span class="hljs-attr">CDefPolicy_Query_eax_esi</span>=B80001000089862003000090<br><span class="hljs-attr">CDefPolicy_Query_eax_rdi</span>=B80001000089873806000090<br><span class="hljs-attr">CDefPolicy_Query_eax_ecx</span>=B80001000089812003000090<br><span class="hljs-attr">CDefPolicy_Query_eax_ecx_jmp</span>=B800010000898120030000EB0E<br><span class="hljs-attr">CDefPolicy_Query_eax_rcx</span>=B80001000089813806000090<br></code></pre></td></tr></table></figure><p>RDP Wrapper 对 termsrv.dll 有 3 处 Patch，1 处 hook。每个 Patch 后缀 <code>.x86</code> 和 <code>.x64</code> 指定架构。</p><h2 id="Patchs"><a href="#Patchs" class="headerlink" title="Patchs"></a>Patchs</h2><p>需要用 IDA 分析 termsrv.dll，加载的时候需要加载微软的符号表。</p><h3 id="LocalOnlyPatch"><a href="#LocalOnlyPatch" class="headerlink" title="LocalOnlyPatch"></a>LocalOnlyPatch</h3><p>函数: CEnforcementCore::GetInstanceOfTSLicense</p><p>签名:?GetInstanceOfTSLicense@CEnforcementCore@@UEAAJAEAU_GUID@@PEAPEAVITSLicense@@@Z</p><img src="/2021/02/22/RDP-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%BC%96%E5%86%99%E8%AE%B0%E5%BD%95/image-20210222162509030.png" class="" title="image-20210222162509030"><p>把 jz 改成 jmp： LocalOnlyCode.x64=jmpshort</p><h3 id="SingleUserPatch"><a href="#SingleUserPatch" class="headerlink" title="SingleUserPatch"></a>SingleUserPatch</h3><p>函数: CSessionArbitrationHelperMgr::IsSingleSessionPerUserEnabled</p><p>签名: ?IsSingleSessionPerUserEnabled@CSessionArbitrationHelperMgr@@UEAAJPEAH@Z</p><img src="/2021/02/22/RDP-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%BC%96%E5%86%99%E8%AE%B0%E5%BD%95/image-20210222162844238.png" class="" title="image-20210222162844238"><p>改成常量1改成0：SingleUserCode.x64=Zero 注意 offset 的位置。</p><h3 id="DefPolicyPatch"><a href="#DefPolicyPatch" class="headerlink" title="DefPolicyPatch"></a>DefPolicyPatch</h3><p>函数: CDefPolicy::Query</p><p>签名: ?Query@CDefPolicy@@UEAAJPEAH@Z</p><img src="/2021/02/22/RDP-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%BC%96%E5%86%99%E8%AE%B0%E5%BD%95/image-20210222171012966.png" class="" title="image-20210222171012966"><p>改成如下</p><img src="/2021/02/22/RDP-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%BC%96%E5%86%99%E8%AE%B0%E5%BD%95/image-20210222171115107.png" class="" title="image-20210222171115107"><p>DefPolicyCode.x64=CDefPolicy_Query_eax_rcx</p><p>这里的 [rcx+638h] 是最大的连接数，直接给它赋值一个大数值即可。</p><h3 id="SLInitHook"><a href="#SLInitHook" class="headerlink" title="SLInitHook"></a>SLInitHook</h3><p>hook 的目标函数是: CConnectionHandlerItem::CConnHandlerKeepAliveObject::Cleanup</p><p>签名: ?Cleanup@CConnHandlerKeepAliveObject@CConnectionHandlerItem@@AEAAXXZ</p><p>SLInitOffset.x64 填这个函数的偏移即可。</p><h3 id="其它全局变量"><a href="#其它全局变量" class="headerlink" title="其它全局变量"></a>其它全局变量</h3><p>[x.x.x.x-SLInit] 中的值</p><p> 我只给出这些全局变量的符号, IDA 加载符号表后可以直接定位</p><table><thead><tr><th>属性</th><th>符号</th></tr></thead><tbody><tr><td>bInitialized</td><td>?bInitialized@CSLQuery@@0HA</td></tr><tr><td>bServerSku</td><td>?bServerSku@CSLQuery@@0HA</td></tr><tr><td>lMaxUserSessions</td><td>?lMaxUserSessions@CSLQuery@@0JA</td></tr><tr><td>bAppServerAllowed</td><td>?bAppServerAllowed@CSLQuery@@0HA</td></tr><tr><td>bRemoteConnAllowed</td><td>?bRemoteConnAllowed@CSLQuery@@0HA</td></tr><tr><td>bMultimonAllowed</td><td>?bMultimonAllowed@CSLQuery@@0HA</td></tr><tr><td>ulMaxDebugSessions</td><td>?ulMaxDebugSessions@CSLQuery@@0KA</td></tr><tr><td>bFUSEnabled</td><td>?bFUSEnabled@CSLQuery@@0HA</td></tr></tbody></table><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://paper.seebug.org/papers/scz/windows/201804121554.txt">https://paper.seebug.org/papers/scz/windows/201804121554.txt</a></p><p><a href="https://github.com/stascorp/rdpwrap">https://github.com/stascorp/rdpwrap</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;RDP-配置文件编写记录&quot;&gt;&lt;a href=&quot;#RDP-配置文件编写记录&quot; class=&quot;headerlink&quot; title=&quot;RDP 配置文件编写记录&quot;&gt;&lt;/a&gt;RDP 配置文件编写记录&lt;/h1&gt;&lt;p&gt;RDP Wrapper  官方配置文件只能支持到18年的Wi</summary>
      
    
    
    
    <category term="RedTeam" scheme="https://panda0s.top/categories/RedTeam/"/>
    
    
    <category term="Reverse" scheme="https://panda0s.top/tags/Reverse/"/>
    
    <category term="Windows" scheme="https://panda0s.top/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>Ml3:Classification</title>
    <link href="https://panda0s.top/2021/02/21/Ml3-Classification/"/>
    <id>https://panda0s.top/2021/02/21/Ml3-Classification/</id>
    <published>2021-02-21T08:41:28.000Z</published>
    <updated>2021-02-23T11:48:49.420Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Classification"><a href="#Classification" class="headerlink" title="Classification"></a>Classification</h1><h2 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h2><p>分类问题中，预测的变量  y 为离散值，以前学习的线性回归模型就不适用了。分类将用到的算法是逻辑回归( <strong>Logistic Regression</strong> )。</p><p>我们先讨论二元的分类算法，即把输入分成两类，也就是说 y 的值为 0 或 1.</p><p>逻辑回归假设函数：$h_\theta(x)=g(\theta^Tx)$ 该函数值的范围始终是 0 到 1 之间。</p><p>当 $h_\theta(x) &gt;= 0.5$ 时，预测 y = 1</p><p>当 $h_\theta(x) &lt; 0.5$ 时，预测 y = 1</p><p>可以理解为 $h_\theta(x)$ 是计算给定输入，输出为 y=1 的可能性。</p><p>其中 g 代表的是逻辑函数，课程中选的逻辑函数叫 <code>Sigmoid function</code>, 该函数的图形是 S 形。</p><p>$g(x) = \frac{1}{1+e^{-x}}$</p><img src="/2021/02/21/Ml3-Classification/image-20210221165302648.png" class="" title="image-20210221165302648"><h2 id="决策边界"><a href="#决策边界" class="headerlink" title="决策边界"></a>决策边界</h2><p>简单说，就是假设函数所确定的图形线。这个例子中我们有：</p><p>当 $h_\theta(x) = g(\theta^Tx) &gt;= 0.5$ 时，预测 y = 1<br>当 $h_\theta(x) = g(\theta^Tx) &lt; 0.5$ 时，预测 y = 1</p><p>根据 Sigmoid 函数性质，可以继续得出:</p><p>$\theta^Tx &gt;= 0$ 时，预测 y = 1<br>$\theta^Tx &lt; 0$ 时，   预测 y = 0</p><p>在图中画出 $y = \theta^Tx$ 的图形，如图</p><img src="/2021/02/21/Ml3-Classification/image-20210221171419774.png" class="" title="image-20210221171419774"><p>红色的线就是决策边界，将样本分为两类。<strong>所谓决策边界就是能够把样本正确分类的一条边界，主要有线性决策边界(linear decision boundaries)和非线性决策边界(non-linear decision boundaries)。</strong>注意：决策边界是假设函数的属性，由参数决定，而不是由数据集的特征决定。</p><p>非线性的决策边界</p><img src="/2021/02/21/Ml3-Classification/image-20210221171637022.png" class="" title="image-20210221171637022"><h2 id="代价函数"><a href="#代价函数" class="headerlink" title="代价函数"></a>代价函数</h2><p>逻辑回归假设函数的代价函数如何来选择呢？如果将 $h_\theta(x)=g(\theta^Tx)$直接带入线性回归的代价函数的话，代价函数存在<strong>局部最优解</strong>，将得到一个非凸函数(non-convexfunction)。这种非凸函数会干扰梯度下降算法，使梯度下降算法在某个局部最优解收敛。</p><img src="/2021/02/21/Ml3-Classification/image-20210221171932745.png" class="" title="image-20210221171932745"><p>如何设计代价函数来避免这种情况呢？</p><p>重新定义代价函数 $J(\theta)=\frac{1}{m}\sum\limits_{i=1}^{m}Cost(h_\theta(x^{(i)}),y^{(i)})$，cost的定义如下</p><img src="/2021/02/21/Ml3-Classification/image-20210221172653354.png" class="" title="image-20210221172653354"><p>这个 Cost 可以进一步化简合并一下，很简单，就不写出来了。$h_\theta(x)$ 与 Cost 函数的图像如下。</p><img src="/2021/02/21/Ml3-Classification/image-20210221173009527.png" class="" title="image-20210221173009527"><p>假如训练集中某样本 y = 1，$h_\theta(x)$ 要趋于1 的时候误差才最小，反之亦然。</p><p>这样，定义代价函数后，就可以使用梯度下降算法求最优参数解。</p><img src="/2021/02/21/Ml3-Classification/image-20210221173947726.png" class="" title="image-20210221173947726">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Classification&quot;&gt;&lt;a href=&quot;#Classification&quot; class=&quot;headerlink&quot; title=&quot;Classification&quot;&gt;&lt;/a&gt;Classification&lt;/h1&gt;&lt;h2 id=&quot;模型&quot;&gt;&lt;a href=&quot;#模型&quot;</summary>
      
    
    
    
    <category term="ml" scheme="https://panda0s.top/categories/ml/"/>
    
    
    <category term="note" scheme="https://panda0s.top/tags/note/"/>
    
  </entry>
  
</feed>
